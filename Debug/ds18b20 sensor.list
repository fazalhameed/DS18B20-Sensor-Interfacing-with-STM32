
ds18b20 sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cb4  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08008d70  08008d70  00009d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091d8  080091d8  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000000  080091d8  080091d8  0000b1d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091d8  080091d8  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091d8  080091d8  0000a1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091dc  080091dc  0000a1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080091e0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200001d4  080093b4  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  080093b4  0000b554  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f3d  00000000  00000000  0000b1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002858  00000000  00000000  0001c139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001e998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be6  00000000  00000000  0001f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017472  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bc4  00000000  00000000  00037928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000909f4  00000000  00000000  0004a4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000daee0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000485c  00000000  00000000  000daf24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000df780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001d4 	.word	0x200001d4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08008d54 	.word	0x08008d54

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001d8 	.word	0x200001d8
 80000fc:	08008d54 	.word	0x08008d54

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 f8f3 	bl	8001620 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f833 	bl	80014b0 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 f8e5 	bl	8001620 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 f8db 	bl	8001620 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 f85d 	bl	8001538 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 f853 	bl	8001538 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_fmul>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	464f      	mov	r7, r9
 80004a4:	4646      	mov	r6, r8
 80004a6:	46d6      	mov	lr, sl
 80004a8:	0243      	lsls	r3, r0, #9
 80004aa:	0a5b      	lsrs	r3, r3, #9
 80004ac:	0045      	lsls	r5, r0, #1
 80004ae:	b5c0      	push	{r6, r7, lr}
 80004b0:	4699      	mov	r9, r3
 80004b2:	1c0f      	adds	r7, r1, #0
 80004b4:	0e2d      	lsrs	r5, r5, #24
 80004b6:	0fc6      	lsrs	r6, r0, #31
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	d100      	bne.n	80004be <__aeabi_fmul+0x1e>
 80004bc:	e088      	b.n	80005d0 <__aeabi_fmul+0x130>
 80004be:	2dff      	cmp	r5, #255	@ 0xff
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fmul+0x24>
 80004c2:	e08d      	b.n	80005e0 <__aeabi_fmul+0x140>
 80004c4:	2280      	movs	r2, #128	@ 0x80
 80004c6:	00db      	lsls	r3, r3, #3
 80004c8:	04d2      	lsls	r2, r2, #19
 80004ca:	431a      	orrs	r2, r3
 80004cc:	2300      	movs	r3, #0
 80004ce:	4691      	mov	r9, r2
 80004d0:	4698      	mov	r8, r3
 80004d2:	469a      	mov	sl, r3
 80004d4:	3d7f      	subs	r5, #127	@ 0x7f
 80004d6:	027c      	lsls	r4, r7, #9
 80004d8:	007b      	lsls	r3, r7, #1
 80004da:	0a64      	lsrs	r4, r4, #9
 80004dc:	0e1b      	lsrs	r3, r3, #24
 80004de:	0fff      	lsrs	r7, r7, #31
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d068      	beq.n	80005b6 <__aeabi_fmul+0x116>
 80004e4:	2bff      	cmp	r3, #255	@ 0xff
 80004e6:	d021      	beq.n	800052c <__aeabi_fmul+0x8c>
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	00e4      	lsls	r4, r4, #3
 80004ec:	04d2      	lsls	r2, r2, #19
 80004ee:	4314      	orrs	r4, r2
 80004f0:	4642      	mov	r2, r8
 80004f2:	3b7f      	subs	r3, #127	@ 0x7f
 80004f4:	195b      	adds	r3, r3, r5
 80004f6:	2100      	movs	r1, #0
 80004f8:	1c5d      	adds	r5, r3, #1
 80004fa:	2a0a      	cmp	r2, #10
 80004fc:	dc2e      	bgt.n	800055c <__aeabi_fmul+0xbc>
 80004fe:	407e      	eors	r6, r7
 8000500:	4642      	mov	r2, r8
 8000502:	2a02      	cmp	r2, #2
 8000504:	dc23      	bgt.n	800054e <__aeabi_fmul+0xae>
 8000506:	3a01      	subs	r2, #1
 8000508:	2a01      	cmp	r2, #1
 800050a:	d900      	bls.n	800050e <__aeabi_fmul+0x6e>
 800050c:	e0bd      	b.n	800068a <__aeabi_fmul+0x1ea>
 800050e:	2902      	cmp	r1, #2
 8000510:	d06e      	beq.n	80005f0 <__aeabi_fmul+0x150>
 8000512:	2901      	cmp	r1, #1
 8000514:	d12c      	bne.n	8000570 <__aeabi_fmul+0xd0>
 8000516:	2000      	movs	r0, #0
 8000518:	2200      	movs	r2, #0
 800051a:	05c0      	lsls	r0, r0, #23
 800051c:	07f6      	lsls	r6, r6, #31
 800051e:	4310      	orrs	r0, r2
 8000520:	4330      	orrs	r0, r6
 8000522:	bce0      	pop	{r5, r6, r7}
 8000524:	46ba      	mov	sl, r7
 8000526:	46b1      	mov	r9, r6
 8000528:	46a8      	mov	r8, r5
 800052a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800052c:	002b      	movs	r3, r5
 800052e:	33ff      	adds	r3, #255	@ 0xff
 8000530:	2c00      	cmp	r4, #0
 8000532:	d065      	beq.n	8000600 <__aeabi_fmul+0x160>
 8000534:	2203      	movs	r2, #3
 8000536:	4641      	mov	r1, r8
 8000538:	4311      	orrs	r1, r2
 800053a:	0032      	movs	r2, r6
 800053c:	3501      	adds	r5, #1
 800053e:	4688      	mov	r8, r1
 8000540:	407a      	eors	r2, r7
 8000542:	35ff      	adds	r5, #255	@ 0xff
 8000544:	290a      	cmp	r1, #10
 8000546:	dd00      	ble.n	800054a <__aeabi_fmul+0xaa>
 8000548:	e0d8      	b.n	80006fc <__aeabi_fmul+0x25c>
 800054a:	0016      	movs	r6, r2
 800054c:	2103      	movs	r1, #3
 800054e:	4640      	mov	r0, r8
 8000550:	2201      	movs	r2, #1
 8000552:	4082      	lsls	r2, r0
 8000554:	20a6      	movs	r0, #166	@ 0xa6
 8000556:	00c0      	lsls	r0, r0, #3
 8000558:	4202      	tst	r2, r0
 800055a:	d020      	beq.n	800059e <__aeabi_fmul+0xfe>
 800055c:	4653      	mov	r3, sl
 800055e:	2b02      	cmp	r3, #2
 8000560:	d046      	beq.n	80005f0 <__aeabi_fmul+0x150>
 8000562:	2b03      	cmp	r3, #3
 8000564:	d100      	bne.n	8000568 <__aeabi_fmul+0xc8>
 8000566:	e0bb      	b.n	80006e0 <__aeabi_fmul+0x240>
 8000568:	4651      	mov	r1, sl
 800056a:	464c      	mov	r4, r9
 800056c:	2901      	cmp	r1, #1
 800056e:	d0d2      	beq.n	8000516 <__aeabi_fmul+0x76>
 8000570:	002b      	movs	r3, r5
 8000572:	337f      	adds	r3, #127	@ 0x7f
 8000574:	2b00      	cmp	r3, #0
 8000576:	dd70      	ble.n	800065a <__aeabi_fmul+0x1ba>
 8000578:	0762      	lsls	r2, r4, #29
 800057a:	d004      	beq.n	8000586 <__aeabi_fmul+0xe6>
 800057c:	220f      	movs	r2, #15
 800057e:	4022      	ands	r2, r4
 8000580:	2a04      	cmp	r2, #4
 8000582:	d000      	beq.n	8000586 <__aeabi_fmul+0xe6>
 8000584:	3404      	adds	r4, #4
 8000586:	0122      	lsls	r2, r4, #4
 8000588:	d503      	bpl.n	8000592 <__aeabi_fmul+0xf2>
 800058a:	4b63      	ldr	r3, [pc, #396]	@ (8000718 <__aeabi_fmul+0x278>)
 800058c:	401c      	ands	r4, r3
 800058e:	002b      	movs	r3, r5
 8000590:	3380      	adds	r3, #128	@ 0x80
 8000592:	2bfe      	cmp	r3, #254	@ 0xfe
 8000594:	dc2c      	bgt.n	80005f0 <__aeabi_fmul+0x150>
 8000596:	01a2      	lsls	r2, r4, #6
 8000598:	0a52      	lsrs	r2, r2, #9
 800059a:	b2d8      	uxtb	r0, r3
 800059c:	e7bd      	b.n	800051a <__aeabi_fmul+0x7a>
 800059e:	2090      	movs	r0, #144	@ 0x90
 80005a0:	0080      	lsls	r0, r0, #2
 80005a2:	4202      	tst	r2, r0
 80005a4:	d127      	bne.n	80005f6 <__aeabi_fmul+0x156>
 80005a6:	38b9      	subs	r0, #185	@ 0xb9
 80005a8:	38ff      	subs	r0, #255	@ 0xff
 80005aa:	4210      	tst	r0, r2
 80005ac:	d06d      	beq.n	800068a <__aeabi_fmul+0x1ea>
 80005ae:	003e      	movs	r6, r7
 80005b0:	46a1      	mov	r9, r4
 80005b2:	468a      	mov	sl, r1
 80005b4:	e7d2      	b.n	800055c <__aeabi_fmul+0xbc>
 80005b6:	2c00      	cmp	r4, #0
 80005b8:	d141      	bne.n	800063e <__aeabi_fmul+0x19e>
 80005ba:	2301      	movs	r3, #1
 80005bc:	4642      	mov	r2, r8
 80005be:	431a      	orrs	r2, r3
 80005c0:	4690      	mov	r8, r2
 80005c2:	002b      	movs	r3, r5
 80005c4:	4642      	mov	r2, r8
 80005c6:	2101      	movs	r1, #1
 80005c8:	1c5d      	adds	r5, r3, #1
 80005ca:	2a0a      	cmp	r2, #10
 80005cc:	dd97      	ble.n	80004fe <__aeabi_fmul+0x5e>
 80005ce:	e7c5      	b.n	800055c <__aeabi_fmul+0xbc>
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d126      	bne.n	8000622 <__aeabi_fmul+0x182>
 80005d4:	2304      	movs	r3, #4
 80005d6:	4698      	mov	r8, r3
 80005d8:	3b03      	subs	r3, #3
 80005da:	2500      	movs	r5, #0
 80005dc:	469a      	mov	sl, r3
 80005de:	e77a      	b.n	80004d6 <__aeabi_fmul+0x36>
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d118      	bne.n	8000616 <__aeabi_fmul+0x176>
 80005e4:	2308      	movs	r3, #8
 80005e6:	4698      	mov	r8, r3
 80005e8:	3b06      	subs	r3, #6
 80005ea:	25ff      	movs	r5, #255	@ 0xff
 80005ec:	469a      	mov	sl, r3
 80005ee:	e772      	b.n	80004d6 <__aeabi_fmul+0x36>
 80005f0:	20ff      	movs	r0, #255	@ 0xff
 80005f2:	2200      	movs	r2, #0
 80005f4:	e791      	b.n	800051a <__aeabi_fmul+0x7a>
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	2600      	movs	r6, #0
 80005fa:	20ff      	movs	r0, #255	@ 0xff
 80005fc:	03d2      	lsls	r2, r2, #15
 80005fe:	e78c      	b.n	800051a <__aeabi_fmul+0x7a>
 8000600:	4641      	mov	r1, r8
 8000602:	2202      	movs	r2, #2
 8000604:	3501      	adds	r5, #1
 8000606:	4311      	orrs	r1, r2
 8000608:	4688      	mov	r8, r1
 800060a:	35ff      	adds	r5, #255	@ 0xff
 800060c:	290a      	cmp	r1, #10
 800060e:	dca5      	bgt.n	800055c <__aeabi_fmul+0xbc>
 8000610:	2102      	movs	r1, #2
 8000612:	407e      	eors	r6, r7
 8000614:	e774      	b.n	8000500 <__aeabi_fmul+0x60>
 8000616:	230c      	movs	r3, #12
 8000618:	4698      	mov	r8, r3
 800061a:	3b09      	subs	r3, #9
 800061c:	25ff      	movs	r5, #255	@ 0xff
 800061e:	469a      	mov	sl, r3
 8000620:	e759      	b.n	80004d6 <__aeabi_fmul+0x36>
 8000622:	0018      	movs	r0, r3
 8000624:	f001 ffca 	bl	80025bc <__clzsi2>
 8000628:	464a      	mov	r2, r9
 800062a:	1f43      	subs	r3, r0, #5
 800062c:	2576      	movs	r5, #118	@ 0x76
 800062e:	409a      	lsls	r2, r3
 8000630:	2300      	movs	r3, #0
 8000632:	426d      	negs	r5, r5
 8000634:	4691      	mov	r9, r2
 8000636:	4698      	mov	r8, r3
 8000638:	469a      	mov	sl, r3
 800063a:	1a2d      	subs	r5, r5, r0
 800063c:	e74b      	b.n	80004d6 <__aeabi_fmul+0x36>
 800063e:	0020      	movs	r0, r4
 8000640:	f001 ffbc 	bl	80025bc <__clzsi2>
 8000644:	4642      	mov	r2, r8
 8000646:	1f43      	subs	r3, r0, #5
 8000648:	409c      	lsls	r4, r3
 800064a:	1a2b      	subs	r3, r5, r0
 800064c:	3b76      	subs	r3, #118	@ 0x76
 800064e:	2100      	movs	r1, #0
 8000650:	1c5d      	adds	r5, r3, #1
 8000652:	2a0a      	cmp	r2, #10
 8000654:	dc00      	bgt.n	8000658 <__aeabi_fmul+0x1b8>
 8000656:	e752      	b.n	80004fe <__aeabi_fmul+0x5e>
 8000658:	e780      	b.n	800055c <__aeabi_fmul+0xbc>
 800065a:	2201      	movs	r2, #1
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	2b1b      	cmp	r3, #27
 8000660:	dd00      	ble.n	8000664 <__aeabi_fmul+0x1c4>
 8000662:	e758      	b.n	8000516 <__aeabi_fmul+0x76>
 8000664:	359e      	adds	r5, #158	@ 0x9e
 8000666:	0022      	movs	r2, r4
 8000668:	40ac      	lsls	r4, r5
 800066a:	40da      	lsrs	r2, r3
 800066c:	1e63      	subs	r3, r4, #1
 800066e:	419c      	sbcs	r4, r3
 8000670:	4322      	orrs	r2, r4
 8000672:	0753      	lsls	r3, r2, #29
 8000674:	d004      	beq.n	8000680 <__aeabi_fmul+0x1e0>
 8000676:	230f      	movs	r3, #15
 8000678:	4013      	ands	r3, r2
 800067a:	2b04      	cmp	r3, #4
 800067c:	d000      	beq.n	8000680 <__aeabi_fmul+0x1e0>
 800067e:	3204      	adds	r2, #4
 8000680:	0153      	lsls	r3, r2, #5
 8000682:	d537      	bpl.n	80006f4 <__aeabi_fmul+0x254>
 8000684:	2001      	movs	r0, #1
 8000686:	2200      	movs	r2, #0
 8000688:	e747      	b.n	800051a <__aeabi_fmul+0x7a>
 800068a:	0c21      	lsrs	r1, r4, #16
 800068c:	464a      	mov	r2, r9
 800068e:	0424      	lsls	r4, r4, #16
 8000690:	0c24      	lsrs	r4, r4, #16
 8000692:	0027      	movs	r7, r4
 8000694:	0c10      	lsrs	r0, r2, #16
 8000696:	0412      	lsls	r2, r2, #16
 8000698:	0c12      	lsrs	r2, r2, #16
 800069a:	4344      	muls	r4, r0
 800069c:	4357      	muls	r7, r2
 800069e:	4348      	muls	r0, r1
 80006a0:	4351      	muls	r1, r2
 80006a2:	0c3a      	lsrs	r2, r7, #16
 80006a4:	1909      	adds	r1, r1, r4
 80006a6:	1852      	adds	r2, r2, r1
 80006a8:	4294      	cmp	r4, r2
 80006aa:	d903      	bls.n	80006b4 <__aeabi_fmul+0x214>
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	0249      	lsls	r1, r1, #9
 80006b0:	468c      	mov	ip, r1
 80006b2:	4460      	add	r0, ip
 80006b4:	043f      	lsls	r7, r7, #16
 80006b6:	0411      	lsls	r1, r2, #16
 80006b8:	0c3f      	lsrs	r7, r7, #16
 80006ba:	19c9      	adds	r1, r1, r7
 80006bc:	018c      	lsls	r4, r1, #6
 80006be:	1e67      	subs	r7, r4, #1
 80006c0:	41bc      	sbcs	r4, r7
 80006c2:	0c12      	lsrs	r2, r2, #16
 80006c4:	0e89      	lsrs	r1, r1, #26
 80006c6:	1812      	adds	r2, r2, r0
 80006c8:	430c      	orrs	r4, r1
 80006ca:	0192      	lsls	r2, r2, #6
 80006cc:	4314      	orrs	r4, r2
 80006ce:	0112      	lsls	r2, r2, #4
 80006d0:	d50e      	bpl.n	80006f0 <__aeabi_fmul+0x250>
 80006d2:	2301      	movs	r3, #1
 80006d4:	0862      	lsrs	r2, r4, #1
 80006d6:	401c      	ands	r4, r3
 80006d8:	4314      	orrs	r4, r2
 80006da:	e749      	b.n	8000570 <__aeabi_fmul+0xd0>
 80006dc:	003e      	movs	r6, r7
 80006de:	46a1      	mov	r9, r4
 80006e0:	2280      	movs	r2, #128	@ 0x80
 80006e2:	464b      	mov	r3, r9
 80006e4:	03d2      	lsls	r2, r2, #15
 80006e6:	431a      	orrs	r2, r3
 80006e8:	0252      	lsls	r2, r2, #9
 80006ea:	20ff      	movs	r0, #255	@ 0xff
 80006ec:	0a52      	lsrs	r2, r2, #9
 80006ee:	e714      	b.n	800051a <__aeabi_fmul+0x7a>
 80006f0:	001d      	movs	r5, r3
 80006f2:	e73d      	b.n	8000570 <__aeabi_fmul+0xd0>
 80006f4:	0192      	lsls	r2, r2, #6
 80006f6:	2000      	movs	r0, #0
 80006f8:	0a52      	lsrs	r2, r2, #9
 80006fa:	e70e      	b.n	800051a <__aeabi_fmul+0x7a>
 80006fc:	290f      	cmp	r1, #15
 80006fe:	d1ed      	bne.n	80006dc <__aeabi_fmul+0x23c>
 8000700:	2280      	movs	r2, #128	@ 0x80
 8000702:	464b      	mov	r3, r9
 8000704:	03d2      	lsls	r2, r2, #15
 8000706:	4213      	tst	r3, r2
 8000708:	d0ea      	beq.n	80006e0 <__aeabi_fmul+0x240>
 800070a:	4214      	tst	r4, r2
 800070c:	d1e8      	bne.n	80006e0 <__aeabi_fmul+0x240>
 800070e:	003e      	movs	r6, r7
 8000710:	20ff      	movs	r0, #255	@ 0xff
 8000712:	4322      	orrs	r2, r4
 8000714:	e701      	b.n	800051a <__aeabi_fmul+0x7a>
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	f7ffffff 	.word	0xf7ffffff

0800071c <__aeabi_i2f>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	2800      	cmp	r0, #0
 8000720:	d013      	beq.n	800074a <__aeabi_i2f+0x2e>
 8000722:	17c3      	asrs	r3, r0, #31
 8000724:	18c5      	adds	r5, r0, r3
 8000726:	405d      	eors	r5, r3
 8000728:	0fc4      	lsrs	r4, r0, #31
 800072a:	0028      	movs	r0, r5
 800072c:	f001 ff46 	bl	80025bc <__clzsi2>
 8000730:	239e      	movs	r3, #158	@ 0x9e
 8000732:	0001      	movs	r1, r0
 8000734:	1a1b      	subs	r3, r3, r0
 8000736:	2b96      	cmp	r3, #150	@ 0x96
 8000738:	dc0f      	bgt.n	800075a <__aeabi_i2f+0x3e>
 800073a:	2808      	cmp	r0, #8
 800073c:	d034      	beq.n	80007a8 <__aeabi_i2f+0x8c>
 800073e:	3908      	subs	r1, #8
 8000740:	408d      	lsls	r5, r1
 8000742:	026d      	lsls	r5, r5, #9
 8000744:	0a6d      	lsrs	r5, r5, #9
 8000746:	b2d8      	uxtb	r0, r3
 8000748:	e002      	b.n	8000750 <__aeabi_i2f+0x34>
 800074a:	2400      	movs	r4, #0
 800074c:	2000      	movs	r0, #0
 800074e:	2500      	movs	r5, #0
 8000750:	05c0      	lsls	r0, r0, #23
 8000752:	4328      	orrs	r0, r5
 8000754:	07e4      	lsls	r4, r4, #31
 8000756:	4320      	orrs	r0, r4
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	2b99      	cmp	r3, #153	@ 0x99
 800075c:	dc16      	bgt.n	800078c <__aeabi_i2f+0x70>
 800075e:	1f42      	subs	r2, r0, #5
 8000760:	2805      	cmp	r0, #5
 8000762:	d000      	beq.n	8000766 <__aeabi_i2f+0x4a>
 8000764:	4095      	lsls	r5, r2
 8000766:	002a      	movs	r2, r5
 8000768:	4811      	ldr	r0, [pc, #68]	@ (80007b0 <__aeabi_i2f+0x94>)
 800076a:	4002      	ands	r2, r0
 800076c:	076e      	lsls	r6, r5, #29
 800076e:	d009      	beq.n	8000784 <__aeabi_i2f+0x68>
 8000770:	260f      	movs	r6, #15
 8000772:	4035      	ands	r5, r6
 8000774:	2d04      	cmp	r5, #4
 8000776:	d005      	beq.n	8000784 <__aeabi_i2f+0x68>
 8000778:	3204      	adds	r2, #4
 800077a:	0155      	lsls	r5, r2, #5
 800077c:	d502      	bpl.n	8000784 <__aeabi_i2f+0x68>
 800077e:	239f      	movs	r3, #159	@ 0x9f
 8000780:	4002      	ands	r2, r0
 8000782:	1a5b      	subs	r3, r3, r1
 8000784:	0192      	lsls	r2, r2, #6
 8000786:	0a55      	lsrs	r5, r2, #9
 8000788:	b2d8      	uxtb	r0, r3
 800078a:	e7e1      	b.n	8000750 <__aeabi_i2f+0x34>
 800078c:	2205      	movs	r2, #5
 800078e:	1a12      	subs	r2, r2, r0
 8000790:	0028      	movs	r0, r5
 8000792:	40d0      	lsrs	r0, r2
 8000794:	0002      	movs	r2, r0
 8000796:	0008      	movs	r0, r1
 8000798:	301b      	adds	r0, #27
 800079a:	4085      	lsls	r5, r0
 800079c:	0028      	movs	r0, r5
 800079e:	1e45      	subs	r5, r0, #1
 80007a0:	41a8      	sbcs	r0, r5
 80007a2:	4302      	orrs	r2, r0
 80007a4:	0015      	movs	r5, r2
 80007a6:	e7de      	b.n	8000766 <__aeabi_i2f+0x4a>
 80007a8:	026d      	lsls	r5, r5, #9
 80007aa:	2096      	movs	r0, #150	@ 0x96
 80007ac:	0a6d      	lsrs	r5, r5, #9
 80007ae:	e7cf      	b.n	8000750 <__aeabi_i2f+0x34>
 80007b0:	fbffffff 	.word	0xfbffffff

080007b4 <__aeabi_dadd>:
 80007b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b6:	4657      	mov	r7, sl
 80007b8:	464e      	mov	r6, r9
 80007ba:	4645      	mov	r5, r8
 80007bc:	46de      	mov	lr, fp
 80007be:	b5e0      	push	{r5, r6, r7, lr}
 80007c0:	b083      	sub	sp, #12
 80007c2:	9000      	str	r0, [sp, #0]
 80007c4:	9101      	str	r1, [sp, #4]
 80007c6:	030c      	lsls	r4, r1, #12
 80007c8:	004f      	lsls	r7, r1, #1
 80007ca:	0fce      	lsrs	r6, r1, #31
 80007cc:	0a61      	lsrs	r1, r4, #9
 80007ce:	9c00      	ldr	r4, [sp, #0]
 80007d0:	031d      	lsls	r5, r3, #12
 80007d2:	0f64      	lsrs	r4, r4, #29
 80007d4:	430c      	orrs	r4, r1
 80007d6:	9900      	ldr	r1, [sp, #0]
 80007d8:	9200      	str	r2, [sp, #0]
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	00c8      	lsls	r0, r1, #3
 80007de:	0059      	lsls	r1, r3, #1
 80007e0:	0d4b      	lsrs	r3, r1, #21
 80007e2:	4699      	mov	r9, r3
 80007e4:	9a00      	ldr	r2, [sp, #0]
 80007e6:	9b01      	ldr	r3, [sp, #4]
 80007e8:	0a6d      	lsrs	r5, r5, #9
 80007ea:	0fd9      	lsrs	r1, r3, #31
 80007ec:	0f53      	lsrs	r3, r2, #29
 80007ee:	432b      	orrs	r3, r5
 80007f0:	469a      	mov	sl, r3
 80007f2:	9b00      	ldr	r3, [sp, #0]
 80007f4:	0d7f      	lsrs	r7, r7, #21
 80007f6:	00da      	lsls	r2, r3, #3
 80007f8:	4694      	mov	ip, r2
 80007fa:	464a      	mov	r2, r9
 80007fc:	46b0      	mov	r8, r6
 80007fe:	1aba      	subs	r2, r7, r2
 8000800:	428e      	cmp	r6, r1
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x52>
 8000804:	e0b0      	b.n	8000968 <__aeabi_dadd+0x1b4>
 8000806:	2a00      	cmp	r2, #0
 8000808:	dc00      	bgt.n	800080c <__aeabi_dadd+0x58>
 800080a:	e078      	b.n	80008fe <__aeabi_dadd+0x14a>
 800080c:	4649      	mov	r1, r9
 800080e:	2900      	cmp	r1, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x60>
 8000812:	e0e9      	b.n	80009e8 <__aeabi_dadd+0x234>
 8000814:	49c9      	ldr	r1, [pc, #804]	@ (8000b3c <__aeabi_dadd+0x388>)
 8000816:	428f      	cmp	r7, r1
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x68>
 800081a:	e195      	b.n	8000b48 <__aeabi_dadd+0x394>
 800081c:	2501      	movs	r5, #1
 800081e:	2a38      	cmp	r2, #56	@ 0x38
 8000820:	dc16      	bgt.n	8000850 <__aeabi_dadd+0x9c>
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	4653      	mov	r3, sl
 8000826:	0409      	lsls	r1, r1, #16
 8000828:	430b      	orrs	r3, r1
 800082a:	469a      	mov	sl, r3
 800082c:	2a1f      	cmp	r2, #31
 800082e:	dd00      	ble.n	8000832 <__aeabi_dadd+0x7e>
 8000830:	e1e7      	b.n	8000c02 <__aeabi_dadd+0x44e>
 8000832:	2120      	movs	r1, #32
 8000834:	4655      	mov	r5, sl
 8000836:	1a8b      	subs	r3, r1, r2
 8000838:	4661      	mov	r1, ip
 800083a:	409d      	lsls	r5, r3
 800083c:	40d1      	lsrs	r1, r2
 800083e:	430d      	orrs	r5, r1
 8000840:	4661      	mov	r1, ip
 8000842:	4099      	lsls	r1, r3
 8000844:	1e4b      	subs	r3, r1, #1
 8000846:	4199      	sbcs	r1, r3
 8000848:	4653      	mov	r3, sl
 800084a:	40d3      	lsrs	r3, r2
 800084c:	430d      	orrs	r5, r1
 800084e:	1ae4      	subs	r4, r4, r3
 8000850:	1b45      	subs	r5, r0, r5
 8000852:	42a8      	cmp	r0, r5
 8000854:	4180      	sbcs	r0, r0
 8000856:	4240      	negs	r0, r0
 8000858:	1a24      	subs	r4, r4, r0
 800085a:	0223      	lsls	r3, r4, #8
 800085c:	d400      	bmi.n	8000860 <__aeabi_dadd+0xac>
 800085e:	e10f      	b.n	8000a80 <__aeabi_dadd+0x2cc>
 8000860:	0264      	lsls	r4, r4, #9
 8000862:	0a64      	lsrs	r4, r4, #9
 8000864:	2c00      	cmp	r4, #0
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0xb6>
 8000868:	e139      	b.n	8000ade <__aeabi_dadd+0x32a>
 800086a:	0020      	movs	r0, r4
 800086c:	f001 fea6 	bl	80025bc <__clzsi2>
 8000870:	0003      	movs	r3, r0
 8000872:	3b08      	subs	r3, #8
 8000874:	2120      	movs	r1, #32
 8000876:	0028      	movs	r0, r5
 8000878:	1aca      	subs	r2, r1, r3
 800087a:	40d0      	lsrs	r0, r2
 800087c:	409c      	lsls	r4, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409d      	lsls	r5, r3
 8000882:	4322      	orrs	r2, r4
 8000884:	429f      	cmp	r7, r3
 8000886:	dd00      	ble.n	800088a <__aeabi_dadd+0xd6>
 8000888:	e173      	b.n	8000b72 <__aeabi_dadd+0x3be>
 800088a:	1bd8      	subs	r0, r3, r7
 800088c:	3001      	adds	r0, #1
 800088e:	1a09      	subs	r1, r1, r0
 8000890:	002c      	movs	r4, r5
 8000892:	408d      	lsls	r5, r1
 8000894:	40c4      	lsrs	r4, r0
 8000896:	1e6b      	subs	r3, r5, #1
 8000898:	419d      	sbcs	r5, r3
 800089a:	0013      	movs	r3, r2
 800089c:	40c2      	lsrs	r2, r0
 800089e:	408b      	lsls	r3, r1
 80008a0:	4325      	orrs	r5, r4
 80008a2:	2700      	movs	r7, #0
 80008a4:	0014      	movs	r4, r2
 80008a6:	431d      	orrs	r5, r3
 80008a8:	076b      	lsls	r3, r5, #29
 80008aa:	d009      	beq.n	80008c0 <__aeabi_dadd+0x10c>
 80008ac:	230f      	movs	r3, #15
 80008ae:	402b      	ands	r3, r5
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	d005      	beq.n	80008c0 <__aeabi_dadd+0x10c>
 80008b4:	1d2b      	adds	r3, r5, #4
 80008b6:	42ab      	cmp	r3, r5
 80008b8:	41ad      	sbcs	r5, r5
 80008ba:	426d      	negs	r5, r5
 80008bc:	1964      	adds	r4, r4, r5
 80008be:	001d      	movs	r5, r3
 80008c0:	0223      	lsls	r3, r4, #8
 80008c2:	d400      	bmi.n	80008c6 <__aeabi_dadd+0x112>
 80008c4:	e12d      	b.n	8000b22 <__aeabi_dadd+0x36e>
 80008c6:	4a9d      	ldr	r2, [pc, #628]	@ (8000b3c <__aeabi_dadd+0x388>)
 80008c8:	3701      	adds	r7, #1
 80008ca:	4297      	cmp	r7, r2
 80008cc:	d100      	bne.n	80008d0 <__aeabi_dadd+0x11c>
 80008ce:	e0d3      	b.n	8000a78 <__aeabi_dadd+0x2c4>
 80008d0:	4646      	mov	r6, r8
 80008d2:	499b      	ldr	r1, [pc, #620]	@ (8000b40 <__aeabi_dadd+0x38c>)
 80008d4:	08ed      	lsrs	r5, r5, #3
 80008d6:	4021      	ands	r1, r4
 80008d8:	074a      	lsls	r2, r1, #29
 80008da:	432a      	orrs	r2, r5
 80008dc:	057c      	lsls	r4, r7, #21
 80008de:	024d      	lsls	r5, r1, #9
 80008e0:	0b2d      	lsrs	r5, r5, #12
 80008e2:	0d64      	lsrs	r4, r4, #21
 80008e4:	0524      	lsls	r4, r4, #20
 80008e6:	432c      	orrs	r4, r5
 80008e8:	07f6      	lsls	r6, r6, #31
 80008ea:	4334      	orrs	r4, r6
 80008ec:	0010      	movs	r0, r2
 80008ee:	0021      	movs	r1, r4
 80008f0:	b003      	add	sp, #12
 80008f2:	bcf0      	pop	{r4, r5, r6, r7}
 80008f4:	46bb      	mov	fp, r7
 80008f6:	46b2      	mov	sl, r6
 80008f8:	46a9      	mov	r9, r5
 80008fa:	46a0      	mov	r8, r4
 80008fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fe:	2a00      	cmp	r2, #0
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x150>
 8000902:	e084      	b.n	8000a0e <__aeabi_dadd+0x25a>
 8000904:	464a      	mov	r2, r9
 8000906:	1bd2      	subs	r2, r2, r7
 8000908:	2f00      	cmp	r7, #0
 800090a:	d000      	beq.n	800090e <__aeabi_dadd+0x15a>
 800090c:	e16d      	b.n	8000bea <__aeabi_dadd+0x436>
 800090e:	0025      	movs	r5, r4
 8000910:	4305      	orrs	r5, r0
 8000912:	d100      	bne.n	8000916 <__aeabi_dadd+0x162>
 8000914:	e127      	b.n	8000b66 <__aeabi_dadd+0x3b2>
 8000916:	1e56      	subs	r6, r2, #1
 8000918:	2a01      	cmp	r2, #1
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x16a>
 800091c:	e23b      	b.n	8000d96 <__aeabi_dadd+0x5e2>
 800091e:	4d87      	ldr	r5, [pc, #540]	@ (8000b3c <__aeabi_dadd+0x388>)
 8000920:	42aa      	cmp	r2, r5
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x172>
 8000924:	e26a      	b.n	8000dfc <__aeabi_dadd+0x648>
 8000926:	2501      	movs	r5, #1
 8000928:	2e38      	cmp	r6, #56	@ 0x38
 800092a:	dc12      	bgt.n	8000952 <__aeabi_dadd+0x19e>
 800092c:	0032      	movs	r2, r6
 800092e:	2a1f      	cmp	r2, #31
 8000930:	dd00      	ble.n	8000934 <__aeabi_dadd+0x180>
 8000932:	e1f8      	b.n	8000d26 <__aeabi_dadd+0x572>
 8000934:	2620      	movs	r6, #32
 8000936:	0025      	movs	r5, r4
 8000938:	1ab6      	subs	r6, r6, r2
 800093a:	0007      	movs	r7, r0
 800093c:	4653      	mov	r3, sl
 800093e:	40b0      	lsls	r0, r6
 8000940:	40d4      	lsrs	r4, r2
 8000942:	40b5      	lsls	r5, r6
 8000944:	40d7      	lsrs	r7, r2
 8000946:	1e46      	subs	r6, r0, #1
 8000948:	41b0      	sbcs	r0, r6
 800094a:	1b1b      	subs	r3, r3, r4
 800094c:	469a      	mov	sl, r3
 800094e:	433d      	orrs	r5, r7
 8000950:	4305      	orrs	r5, r0
 8000952:	4662      	mov	r2, ip
 8000954:	1b55      	subs	r5, r2, r5
 8000956:	45ac      	cmp	ip, r5
 8000958:	4192      	sbcs	r2, r2
 800095a:	4653      	mov	r3, sl
 800095c:	4252      	negs	r2, r2
 800095e:	000e      	movs	r6, r1
 8000960:	464f      	mov	r7, r9
 8000962:	4688      	mov	r8, r1
 8000964:	1a9c      	subs	r4, r3, r2
 8000966:	e778      	b.n	800085a <__aeabi_dadd+0xa6>
 8000968:	2a00      	cmp	r2, #0
 800096a:	dc00      	bgt.n	800096e <__aeabi_dadd+0x1ba>
 800096c:	e08e      	b.n	8000a8c <__aeabi_dadd+0x2d8>
 800096e:	4649      	mov	r1, r9
 8000970:	2900      	cmp	r1, #0
 8000972:	d175      	bne.n	8000a60 <__aeabi_dadd+0x2ac>
 8000974:	4661      	mov	r1, ip
 8000976:	4653      	mov	r3, sl
 8000978:	4319      	orrs	r1, r3
 800097a:	d100      	bne.n	800097e <__aeabi_dadd+0x1ca>
 800097c:	e0f6      	b.n	8000b6c <__aeabi_dadd+0x3b8>
 800097e:	1e51      	subs	r1, r2, #1
 8000980:	2a01      	cmp	r2, #1
 8000982:	d100      	bne.n	8000986 <__aeabi_dadd+0x1d2>
 8000984:	e191      	b.n	8000caa <__aeabi_dadd+0x4f6>
 8000986:	4d6d      	ldr	r5, [pc, #436]	@ (8000b3c <__aeabi_dadd+0x388>)
 8000988:	42aa      	cmp	r2, r5
 800098a:	d100      	bne.n	800098e <__aeabi_dadd+0x1da>
 800098c:	e0dc      	b.n	8000b48 <__aeabi_dadd+0x394>
 800098e:	2501      	movs	r5, #1
 8000990:	2938      	cmp	r1, #56	@ 0x38
 8000992:	dc14      	bgt.n	80009be <__aeabi_dadd+0x20a>
 8000994:	000a      	movs	r2, r1
 8000996:	2a1f      	cmp	r2, #31
 8000998:	dd00      	ble.n	800099c <__aeabi_dadd+0x1e8>
 800099a:	e1a2      	b.n	8000ce2 <__aeabi_dadd+0x52e>
 800099c:	2120      	movs	r1, #32
 800099e:	4653      	mov	r3, sl
 80009a0:	1a89      	subs	r1, r1, r2
 80009a2:	408b      	lsls	r3, r1
 80009a4:	001d      	movs	r5, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	40d3      	lsrs	r3, r2
 80009aa:	431d      	orrs	r5, r3
 80009ac:	4663      	mov	r3, ip
 80009ae:	408b      	lsls	r3, r1
 80009b0:	0019      	movs	r1, r3
 80009b2:	1e4b      	subs	r3, r1, #1
 80009b4:	4199      	sbcs	r1, r3
 80009b6:	4653      	mov	r3, sl
 80009b8:	40d3      	lsrs	r3, r2
 80009ba:	430d      	orrs	r5, r1
 80009bc:	18e4      	adds	r4, r4, r3
 80009be:	182d      	adds	r5, r5, r0
 80009c0:	4285      	cmp	r5, r0
 80009c2:	4180      	sbcs	r0, r0
 80009c4:	4240      	negs	r0, r0
 80009c6:	1824      	adds	r4, r4, r0
 80009c8:	0223      	lsls	r3, r4, #8
 80009ca:	d559      	bpl.n	8000a80 <__aeabi_dadd+0x2cc>
 80009cc:	4b5b      	ldr	r3, [pc, #364]	@ (8000b3c <__aeabi_dadd+0x388>)
 80009ce:	3701      	adds	r7, #1
 80009d0:	429f      	cmp	r7, r3
 80009d2:	d051      	beq.n	8000a78 <__aeabi_dadd+0x2c4>
 80009d4:	2101      	movs	r1, #1
 80009d6:	4b5a      	ldr	r3, [pc, #360]	@ (8000b40 <__aeabi_dadd+0x38c>)
 80009d8:	086a      	lsrs	r2, r5, #1
 80009da:	401c      	ands	r4, r3
 80009dc:	4029      	ands	r1, r5
 80009de:	430a      	orrs	r2, r1
 80009e0:	07e5      	lsls	r5, r4, #31
 80009e2:	4315      	orrs	r5, r2
 80009e4:	0864      	lsrs	r4, r4, #1
 80009e6:	e75f      	b.n	80008a8 <__aeabi_dadd+0xf4>
 80009e8:	4661      	mov	r1, ip
 80009ea:	4653      	mov	r3, sl
 80009ec:	4319      	orrs	r1, r3
 80009ee:	d100      	bne.n	80009f2 <__aeabi_dadd+0x23e>
 80009f0:	e0bc      	b.n	8000b6c <__aeabi_dadd+0x3b8>
 80009f2:	1e51      	subs	r1, r2, #1
 80009f4:	2a01      	cmp	r2, #1
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0x246>
 80009f8:	e164      	b.n	8000cc4 <__aeabi_dadd+0x510>
 80009fa:	4d50      	ldr	r5, [pc, #320]	@ (8000b3c <__aeabi_dadd+0x388>)
 80009fc:	42aa      	cmp	r2, r5
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x24e>
 8000a00:	e16a      	b.n	8000cd8 <__aeabi_dadd+0x524>
 8000a02:	2501      	movs	r5, #1
 8000a04:	2938      	cmp	r1, #56	@ 0x38
 8000a06:	dd00      	ble.n	8000a0a <__aeabi_dadd+0x256>
 8000a08:	e722      	b.n	8000850 <__aeabi_dadd+0x9c>
 8000a0a:	000a      	movs	r2, r1
 8000a0c:	e70e      	b.n	800082c <__aeabi_dadd+0x78>
 8000a0e:	4a4d      	ldr	r2, [pc, #308]	@ (8000b44 <__aeabi_dadd+0x390>)
 8000a10:	1c7d      	adds	r5, r7, #1
 8000a12:	4215      	tst	r5, r2
 8000a14:	d000      	beq.n	8000a18 <__aeabi_dadd+0x264>
 8000a16:	e0d0      	b.n	8000bba <__aeabi_dadd+0x406>
 8000a18:	0025      	movs	r5, r4
 8000a1a:	4662      	mov	r2, ip
 8000a1c:	4653      	mov	r3, sl
 8000a1e:	4305      	orrs	r5, r0
 8000a20:	431a      	orrs	r2, r3
 8000a22:	2f00      	cmp	r7, #0
 8000a24:	d000      	beq.n	8000a28 <__aeabi_dadd+0x274>
 8000a26:	e137      	b.n	8000c98 <__aeabi_dadd+0x4e4>
 8000a28:	2d00      	cmp	r5, #0
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x27a>
 8000a2c:	e1a8      	b.n	8000d80 <__aeabi_dadd+0x5cc>
 8000a2e:	2a00      	cmp	r2, #0
 8000a30:	d100      	bne.n	8000a34 <__aeabi_dadd+0x280>
 8000a32:	e16a      	b.n	8000d0a <__aeabi_dadd+0x556>
 8000a34:	4663      	mov	r3, ip
 8000a36:	1ac5      	subs	r5, r0, r3
 8000a38:	4653      	mov	r3, sl
 8000a3a:	1ae2      	subs	r2, r4, r3
 8000a3c:	42a8      	cmp	r0, r5
 8000a3e:	419b      	sbcs	r3, r3
 8000a40:	425b      	negs	r3, r3
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	021a      	lsls	r2, r3, #8
 8000a46:	d400      	bmi.n	8000a4a <__aeabi_dadd+0x296>
 8000a48:	e203      	b.n	8000e52 <__aeabi_dadd+0x69e>
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	1a1d      	subs	r5, r3, r0
 8000a4e:	45ac      	cmp	ip, r5
 8000a50:	4192      	sbcs	r2, r2
 8000a52:	4653      	mov	r3, sl
 8000a54:	4252      	negs	r2, r2
 8000a56:	1b1c      	subs	r4, r3, r4
 8000a58:	000e      	movs	r6, r1
 8000a5a:	4688      	mov	r8, r1
 8000a5c:	1aa4      	subs	r4, r4, r2
 8000a5e:	e723      	b.n	80008a8 <__aeabi_dadd+0xf4>
 8000a60:	4936      	ldr	r1, [pc, #216]	@ (8000b3c <__aeabi_dadd+0x388>)
 8000a62:	428f      	cmp	r7, r1
 8000a64:	d070      	beq.n	8000b48 <__aeabi_dadd+0x394>
 8000a66:	2501      	movs	r5, #1
 8000a68:	2a38      	cmp	r2, #56	@ 0x38
 8000a6a:	dca8      	bgt.n	80009be <__aeabi_dadd+0x20a>
 8000a6c:	2180      	movs	r1, #128	@ 0x80
 8000a6e:	4653      	mov	r3, sl
 8000a70:	0409      	lsls	r1, r1, #16
 8000a72:	430b      	orrs	r3, r1
 8000a74:	469a      	mov	sl, r3
 8000a76:	e78e      	b.n	8000996 <__aeabi_dadd+0x1e2>
 8000a78:	003c      	movs	r4, r7
 8000a7a:	2500      	movs	r5, #0
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	e731      	b.n	80008e4 <__aeabi_dadd+0x130>
 8000a80:	2307      	movs	r3, #7
 8000a82:	402b      	ands	r3, r5
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d000      	beq.n	8000a8a <__aeabi_dadd+0x2d6>
 8000a88:	e710      	b.n	80008ac <__aeabi_dadd+0xf8>
 8000a8a:	e093      	b.n	8000bb4 <__aeabi_dadd+0x400>
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	d074      	beq.n	8000b7a <__aeabi_dadd+0x3c6>
 8000a90:	464a      	mov	r2, r9
 8000a92:	1bd2      	subs	r2, r2, r7
 8000a94:	2f00      	cmp	r7, #0
 8000a96:	d100      	bne.n	8000a9a <__aeabi_dadd+0x2e6>
 8000a98:	e0c7      	b.n	8000c2a <__aeabi_dadd+0x476>
 8000a9a:	4928      	ldr	r1, [pc, #160]	@ (8000b3c <__aeabi_dadd+0x388>)
 8000a9c:	4589      	cmp	r9, r1
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_dadd+0x2ee>
 8000aa0:	e185      	b.n	8000dae <__aeabi_dadd+0x5fa>
 8000aa2:	2501      	movs	r5, #1
 8000aa4:	2a38      	cmp	r2, #56	@ 0x38
 8000aa6:	dc12      	bgt.n	8000ace <__aeabi_dadd+0x31a>
 8000aa8:	2180      	movs	r1, #128	@ 0x80
 8000aaa:	0409      	lsls	r1, r1, #16
 8000aac:	430c      	orrs	r4, r1
 8000aae:	2a1f      	cmp	r2, #31
 8000ab0:	dd00      	ble.n	8000ab4 <__aeabi_dadd+0x300>
 8000ab2:	e1ab      	b.n	8000e0c <__aeabi_dadd+0x658>
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	0025      	movs	r5, r4
 8000ab8:	1a89      	subs	r1, r1, r2
 8000aba:	0007      	movs	r7, r0
 8000abc:	4088      	lsls	r0, r1
 8000abe:	408d      	lsls	r5, r1
 8000ac0:	40d7      	lsrs	r7, r2
 8000ac2:	1e41      	subs	r1, r0, #1
 8000ac4:	4188      	sbcs	r0, r1
 8000ac6:	40d4      	lsrs	r4, r2
 8000ac8:	433d      	orrs	r5, r7
 8000aca:	4305      	orrs	r5, r0
 8000acc:	44a2      	add	sl, r4
 8000ace:	4465      	add	r5, ip
 8000ad0:	4565      	cmp	r5, ip
 8000ad2:	4192      	sbcs	r2, r2
 8000ad4:	4252      	negs	r2, r2
 8000ad6:	4452      	add	r2, sl
 8000ad8:	0014      	movs	r4, r2
 8000ada:	464f      	mov	r7, r9
 8000adc:	e774      	b.n	80009c8 <__aeabi_dadd+0x214>
 8000ade:	0028      	movs	r0, r5
 8000ae0:	f001 fd6c 	bl	80025bc <__clzsi2>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	3318      	adds	r3, #24
 8000ae8:	2b1f      	cmp	r3, #31
 8000aea:	dc00      	bgt.n	8000aee <__aeabi_dadd+0x33a>
 8000aec:	e6c2      	b.n	8000874 <__aeabi_dadd+0xc0>
 8000aee:	002a      	movs	r2, r5
 8000af0:	3808      	subs	r0, #8
 8000af2:	4082      	lsls	r2, r0
 8000af4:	429f      	cmp	r7, r3
 8000af6:	dd00      	ble.n	8000afa <__aeabi_dadd+0x346>
 8000af8:	e0a9      	b.n	8000c4e <__aeabi_dadd+0x49a>
 8000afa:	1bdb      	subs	r3, r3, r7
 8000afc:	1c58      	adds	r0, r3, #1
 8000afe:	281f      	cmp	r0, #31
 8000b00:	dc00      	bgt.n	8000b04 <__aeabi_dadd+0x350>
 8000b02:	e1ac      	b.n	8000e5e <__aeabi_dadd+0x6aa>
 8000b04:	0015      	movs	r5, r2
 8000b06:	3b1f      	subs	r3, #31
 8000b08:	40dd      	lsrs	r5, r3
 8000b0a:	2820      	cmp	r0, #32
 8000b0c:	d005      	beq.n	8000b1a <__aeabi_dadd+0x366>
 8000b0e:	2340      	movs	r3, #64	@ 0x40
 8000b10:	1a1b      	subs	r3, r3, r0
 8000b12:	409a      	lsls	r2, r3
 8000b14:	1e53      	subs	r3, r2, #1
 8000b16:	419a      	sbcs	r2, r3
 8000b18:	4315      	orrs	r5, r2
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	2700      	movs	r7, #0
 8000b1e:	402b      	ands	r3, r5
 8000b20:	e7b0      	b.n	8000a84 <__aeabi_dadd+0x2d0>
 8000b22:	08ed      	lsrs	r5, r5, #3
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <__aeabi_dadd+0x388>)
 8000b26:	0762      	lsls	r2, r4, #29
 8000b28:	432a      	orrs	r2, r5
 8000b2a:	08e4      	lsrs	r4, r4, #3
 8000b2c:	429f      	cmp	r7, r3
 8000b2e:	d00f      	beq.n	8000b50 <__aeabi_dadd+0x39c>
 8000b30:	0324      	lsls	r4, r4, #12
 8000b32:	0b25      	lsrs	r5, r4, #12
 8000b34:	057c      	lsls	r4, r7, #21
 8000b36:	0d64      	lsrs	r4, r4, #21
 8000b38:	e6d4      	b.n	80008e4 <__aeabi_dadd+0x130>
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	000007ff 	.word	0x000007ff
 8000b40:	ff7fffff 	.word	0xff7fffff
 8000b44:	000007fe 	.word	0x000007fe
 8000b48:	08c0      	lsrs	r0, r0, #3
 8000b4a:	0762      	lsls	r2, r4, #29
 8000b4c:	4302      	orrs	r2, r0
 8000b4e:	08e4      	lsrs	r4, r4, #3
 8000b50:	0013      	movs	r3, r2
 8000b52:	4323      	orrs	r3, r4
 8000b54:	d100      	bne.n	8000b58 <__aeabi_dadd+0x3a4>
 8000b56:	e186      	b.n	8000e66 <__aeabi_dadd+0x6b2>
 8000b58:	2580      	movs	r5, #128	@ 0x80
 8000b5a:	032d      	lsls	r5, r5, #12
 8000b5c:	4325      	orrs	r5, r4
 8000b5e:	032d      	lsls	r5, r5, #12
 8000b60:	4cc3      	ldr	r4, [pc, #780]	@ (8000e70 <__aeabi_dadd+0x6bc>)
 8000b62:	0b2d      	lsrs	r5, r5, #12
 8000b64:	e6be      	b.n	80008e4 <__aeabi_dadd+0x130>
 8000b66:	4660      	mov	r0, ip
 8000b68:	4654      	mov	r4, sl
 8000b6a:	000e      	movs	r6, r1
 8000b6c:	0017      	movs	r7, r2
 8000b6e:	08c5      	lsrs	r5, r0, #3
 8000b70:	e7d8      	b.n	8000b24 <__aeabi_dadd+0x370>
 8000b72:	4cc0      	ldr	r4, [pc, #768]	@ (8000e74 <__aeabi_dadd+0x6c0>)
 8000b74:	1aff      	subs	r7, r7, r3
 8000b76:	4014      	ands	r4, r2
 8000b78:	e696      	b.n	80008a8 <__aeabi_dadd+0xf4>
 8000b7a:	4abf      	ldr	r2, [pc, #764]	@ (8000e78 <__aeabi_dadd+0x6c4>)
 8000b7c:	1c79      	adds	r1, r7, #1
 8000b7e:	4211      	tst	r1, r2
 8000b80:	d16b      	bne.n	8000c5a <__aeabi_dadd+0x4a6>
 8000b82:	0022      	movs	r2, r4
 8000b84:	4302      	orrs	r2, r0
 8000b86:	2f00      	cmp	r7, #0
 8000b88:	d000      	beq.n	8000b8c <__aeabi_dadd+0x3d8>
 8000b8a:	e0db      	b.n	8000d44 <__aeabi_dadd+0x590>
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x3de>
 8000b90:	e12d      	b.n	8000dee <__aeabi_dadd+0x63a>
 8000b92:	4662      	mov	r2, ip
 8000b94:	4653      	mov	r3, sl
 8000b96:	431a      	orrs	r2, r3
 8000b98:	d100      	bne.n	8000b9c <__aeabi_dadd+0x3e8>
 8000b9a:	e0b6      	b.n	8000d0a <__aeabi_dadd+0x556>
 8000b9c:	4663      	mov	r3, ip
 8000b9e:	18c5      	adds	r5, r0, r3
 8000ba0:	4285      	cmp	r5, r0
 8000ba2:	4180      	sbcs	r0, r0
 8000ba4:	4454      	add	r4, sl
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	1824      	adds	r4, r4, r0
 8000baa:	0223      	lsls	r3, r4, #8
 8000bac:	d502      	bpl.n	8000bb4 <__aeabi_dadd+0x400>
 8000bae:	000f      	movs	r7, r1
 8000bb0:	4bb0      	ldr	r3, [pc, #704]	@ (8000e74 <__aeabi_dadd+0x6c0>)
 8000bb2:	401c      	ands	r4, r3
 8000bb4:	003a      	movs	r2, r7
 8000bb6:	0028      	movs	r0, r5
 8000bb8:	e7d8      	b.n	8000b6c <__aeabi_dadd+0x3b8>
 8000bba:	4662      	mov	r2, ip
 8000bbc:	1a85      	subs	r5, r0, r2
 8000bbe:	42a8      	cmp	r0, r5
 8000bc0:	4192      	sbcs	r2, r2
 8000bc2:	4653      	mov	r3, sl
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	1ae3      	subs	r3, r4, r3
 8000bca:	001a      	movs	r2, r3
 8000bcc:	464b      	mov	r3, r9
 8000bce:	1ad2      	subs	r2, r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	4691      	mov	r9, r2
 8000bd4:	021a      	lsls	r2, r3, #8
 8000bd6:	d454      	bmi.n	8000c82 <__aeabi_dadd+0x4ce>
 8000bd8:	464a      	mov	r2, r9
 8000bda:	464c      	mov	r4, r9
 8000bdc:	432a      	orrs	r2, r5
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dadd+0x42e>
 8000be0:	e640      	b.n	8000864 <__aeabi_dadd+0xb0>
 8000be2:	2600      	movs	r6, #0
 8000be4:	2400      	movs	r4, #0
 8000be6:	2500      	movs	r5, #0
 8000be8:	e67c      	b.n	80008e4 <__aeabi_dadd+0x130>
 8000bea:	4da1      	ldr	r5, [pc, #644]	@ (8000e70 <__aeabi_dadd+0x6bc>)
 8000bec:	45a9      	cmp	r9, r5
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dadd+0x43e>
 8000bf0:	e090      	b.n	8000d14 <__aeabi_dadd+0x560>
 8000bf2:	2501      	movs	r5, #1
 8000bf4:	2a38      	cmp	r2, #56	@ 0x38
 8000bf6:	dd00      	ble.n	8000bfa <__aeabi_dadd+0x446>
 8000bf8:	e6ab      	b.n	8000952 <__aeabi_dadd+0x19e>
 8000bfa:	2580      	movs	r5, #128	@ 0x80
 8000bfc:	042d      	lsls	r5, r5, #16
 8000bfe:	432c      	orrs	r4, r5
 8000c00:	e695      	b.n	800092e <__aeabi_dadd+0x17a>
 8000c02:	0011      	movs	r1, r2
 8000c04:	4655      	mov	r5, sl
 8000c06:	3920      	subs	r1, #32
 8000c08:	40cd      	lsrs	r5, r1
 8000c0a:	46a9      	mov	r9, r5
 8000c0c:	2a20      	cmp	r2, #32
 8000c0e:	d006      	beq.n	8000c1e <__aeabi_dadd+0x46a>
 8000c10:	2140      	movs	r1, #64	@ 0x40
 8000c12:	4653      	mov	r3, sl
 8000c14:	1a8a      	subs	r2, r1, r2
 8000c16:	4093      	lsls	r3, r2
 8000c18:	4662      	mov	r2, ip
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	4665      	mov	r5, ip
 8000c20:	1e6b      	subs	r3, r5, #1
 8000c22:	419d      	sbcs	r5, r3
 8000c24:	464b      	mov	r3, r9
 8000c26:	431d      	orrs	r5, r3
 8000c28:	e612      	b.n	8000850 <__aeabi_dadd+0x9c>
 8000c2a:	0021      	movs	r1, r4
 8000c2c:	4301      	orrs	r1, r0
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_dadd+0x47e>
 8000c30:	e0c4      	b.n	8000dbc <__aeabi_dadd+0x608>
 8000c32:	1e51      	subs	r1, r2, #1
 8000c34:	2a01      	cmp	r2, #1
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dadd+0x486>
 8000c38:	e0fb      	b.n	8000e32 <__aeabi_dadd+0x67e>
 8000c3a:	4d8d      	ldr	r5, [pc, #564]	@ (8000e70 <__aeabi_dadd+0x6bc>)
 8000c3c:	42aa      	cmp	r2, r5
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dadd+0x48e>
 8000c40:	e0b5      	b.n	8000dae <__aeabi_dadd+0x5fa>
 8000c42:	2501      	movs	r5, #1
 8000c44:	2938      	cmp	r1, #56	@ 0x38
 8000c46:	dd00      	ble.n	8000c4a <__aeabi_dadd+0x496>
 8000c48:	e741      	b.n	8000ace <__aeabi_dadd+0x31a>
 8000c4a:	000a      	movs	r2, r1
 8000c4c:	e72f      	b.n	8000aae <__aeabi_dadd+0x2fa>
 8000c4e:	4c89      	ldr	r4, [pc, #548]	@ (8000e74 <__aeabi_dadd+0x6c0>)
 8000c50:	1aff      	subs	r7, r7, r3
 8000c52:	4014      	ands	r4, r2
 8000c54:	0762      	lsls	r2, r4, #29
 8000c56:	08e4      	lsrs	r4, r4, #3
 8000c58:	e76a      	b.n	8000b30 <__aeabi_dadd+0x37c>
 8000c5a:	4a85      	ldr	r2, [pc, #532]	@ (8000e70 <__aeabi_dadd+0x6bc>)
 8000c5c:	4291      	cmp	r1, r2
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dadd+0x4ae>
 8000c60:	e0e3      	b.n	8000e2a <__aeabi_dadd+0x676>
 8000c62:	4663      	mov	r3, ip
 8000c64:	18c2      	adds	r2, r0, r3
 8000c66:	4282      	cmp	r2, r0
 8000c68:	4180      	sbcs	r0, r0
 8000c6a:	0023      	movs	r3, r4
 8000c6c:	4240      	negs	r0, r0
 8000c6e:	4453      	add	r3, sl
 8000c70:	181b      	adds	r3, r3, r0
 8000c72:	07dd      	lsls	r5, r3, #31
 8000c74:	085c      	lsrs	r4, r3, #1
 8000c76:	2307      	movs	r3, #7
 8000c78:	0852      	lsrs	r2, r2, #1
 8000c7a:	4315      	orrs	r5, r2
 8000c7c:	000f      	movs	r7, r1
 8000c7e:	402b      	ands	r3, r5
 8000c80:	e700      	b.n	8000a84 <__aeabi_dadd+0x2d0>
 8000c82:	4663      	mov	r3, ip
 8000c84:	1a1d      	subs	r5, r3, r0
 8000c86:	45ac      	cmp	ip, r5
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	4653      	mov	r3, sl
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	1b1c      	subs	r4, r3, r4
 8000c90:	000e      	movs	r6, r1
 8000c92:	4688      	mov	r8, r1
 8000c94:	1aa4      	subs	r4, r4, r2
 8000c96:	e5e5      	b.n	8000864 <__aeabi_dadd+0xb0>
 8000c98:	2d00      	cmp	r5, #0
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_dadd+0x4ea>
 8000c9c:	e091      	b.n	8000dc2 <__aeabi_dadd+0x60e>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d138      	bne.n	8000d14 <__aeabi_dadd+0x560>
 8000ca2:	2480      	movs	r4, #128	@ 0x80
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	0324      	lsls	r4, r4, #12
 8000ca8:	e756      	b.n	8000b58 <__aeabi_dadd+0x3a4>
 8000caa:	4663      	mov	r3, ip
 8000cac:	18c5      	adds	r5, r0, r3
 8000cae:	4285      	cmp	r5, r0
 8000cb0:	4180      	sbcs	r0, r0
 8000cb2:	4454      	add	r4, sl
 8000cb4:	4240      	negs	r0, r0
 8000cb6:	1824      	adds	r4, r4, r0
 8000cb8:	2701      	movs	r7, #1
 8000cba:	0223      	lsls	r3, r4, #8
 8000cbc:	d400      	bmi.n	8000cc0 <__aeabi_dadd+0x50c>
 8000cbe:	e6df      	b.n	8000a80 <__aeabi_dadd+0x2cc>
 8000cc0:	2702      	movs	r7, #2
 8000cc2:	e687      	b.n	80009d4 <__aeabi_dadd+0x220>
 8000cc4:	4663      	mov	r3, ip
 8000cc6:	1ac5      	subs	r5, r0, r3
 8000cc8:	42a8      	cmp	r0, r5
 8000cca:	4180      	sbcs	r0, r0
 8000ccc:	4653      	mov	r3, sl
 8000cce:	4240      	negs	r0, r0
 8000cd0:	1ae4      	subs	r4, r4, r3
 8000cd2:	2701      	movs	r7, #1
 8000cd4:	1a24      	subs	r4, r4, r0
 8000cd6:	e5c0      	b.n	800085a <__aeabi_dadd+0xa6>
 8000cd8:	0762      	lsls	r2, r4, #29
 8000cda:	08c0      	lsrs	r0, r0, #3
 8000cdc:	4302      	orrs	r2, r0
 8000cde:	08e4      	lsrs	r4, r4, #3
 8000ce0:	e736      	b.n	8000b50 <__aeabi_dadd+0x39c>
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	4653      	mov	r3, sl
 8000ce6:	3920      	subs	r1, #32
 8000ce8:	40cb      	lsrs	r3, r1
 8000cea:	4699      	mov	r9, r3
 8000cec:	2a20      	cmp	r2, #32
 8000cee:	d006      	beq.n	8000cfe <__aeabi_dadd+0x54a>
 8000cf0:	2140      	movs	r1, #64	@ 0x40
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	1a8a      	subs	r2, r1, r2
 8000cf6:	4093      	lsls	r3, r2
 8000cf8:	4662      	mov	r2, ip
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	4694      	mov	ip, r2
 8000cfe:	4665      	mov	r5, ip
 8000d00:	1e6b      	subs	r3, r5, #1
 8000d02:	419d      	sbcs	r5, r3
 8000d04:	464b      	mov	r3, r9
 8000d06:	431d      	orrs	r5, r3
 8000d08:	e659      	b.n	80009be <__aeabi_dadd+0x20a>
 8000d0a:	0762      	lsls	r2, r4, #29
 8000d0c:	08c0      	lsrs	r0, r0, #3
 8000d0e:	4302      	orrs	r2, r0
 8000d10:	08e4      	lsrs	r4, r4, #3
 8000d12:	e70d      	b.n	8000b30 <__aeabi_dadd+0x37c>
 8000d14:	4653      	mov	r3, sl
 8000d16:	075a      	lsls	r2, r3, #29
 8000d18:	4663      	mov	r3, ip
 8000d1a:	08d8      	lsrs	r0, r3, #3
 8000d1c:	4653      	mov	r3, sl
 8000d1e:	000e      	movs	r6, r1
 8000d20:	4302      	orrs	r2, r0
 8000d22:	08dc      	lsrs	r4, r3, #3
 8000d24:	e714      	b.n	8000b50 <__aeabi_dadd+0x39c>
 8000d26:	0015      	movs	r5, r2
 8000d28:	0026      	movs	r6, r4
 8000d2a:	3d20      	subs	r5, #32
 8000d2c:	40ee      	lsrs	r6, r5
 8000d2e:	2a20      	cmp	r2, #32
 8000d30:	d003      	beq.n	8000d3a <__aeabi_dadd+0x586>
 8000d32:	2540      	movs	r5, #64	@ 0x40
 8000d34:	1aaa      	subs	r2, r5, r2
 8000d36:	4094      	lsls	r4, r2
 8000d38:	4320      	orrs	r0, r4
 8000d3a:	1e42      	subs	r2, r0, #1
 8000d3c:	4190      	sbcs	r0, r2
 8000d3e:	0005      	movs	r5, r0
 8000d40:	4335      	orrs	r5, r6
 8000d42:	e606      	b.n	8000952 <__aeabi_dadd+0x19e>
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	d07c      	beq.n	8000e42 <__aeabi_dadd+0x68e>
 8000d48:	4662      	mov	r2, ip
 8000d4a:	4653      	mov	r3, sl
 8000d4c:	08c0      	lsrs	r0, r0, #3
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x5a0>
 8000d52:	e6fa      	b.n	8000b4a <__aeabi_dadd+0x396>
 8000d54:	0762      	lsls	r2, r4, #29
 8000d56:	4310      	orrs	r0, r2
 8000d58:	2280      	movs	r2, #128	@ 0x80
 8000d5a:	08e4      	lsrs	r4, r4, #3
 8000d5c:	0312      	lsls	r2, r2, #12
 8000d5e:	4214      	tst	r4, r2
 8000d60:	d008      	beq.n	8000d74 <__aeabi_dadd+0x5c0>
 8000d62:	08d9      	lsrs	r1, r3, #3
 8000d64:	4211      	tst	r1, r2
 8000d66:	d105      	bne.n	8000d74 <__aeabi_dadd+0x5c0>
 8000d68:	4663      	mov	r3, ip
 8000d6a:	08d8      	lsrs	r0, r3, #3
 8000d6c:	4653      	mov	r3, sl
 8000d6e:	000c      	movs	r4, r1
 8000d70:	075b      	lsls	r3, r3, #29
 8000d72:	4318      	orrs	r0, r3
 8000d74:	0f42      	lsrs	r2, r0, #29
 8000d76:	00c0      	lsls	r0, r0, #3
 8000d78:	08c0      	lsrs	r0, r0, #3
 8000d7a:	0752      	lsls	r2, r2, #29
 8000d7c:	4302      	orrs	r2, r0
 8000d7e:	e6e7      	b.n	8000b50 <__aeabi_dadd+0x39c>
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	d100      	bne.n	8000d86 <__aeabi_dadd+0x5d2>
 8000d84:	e72d      	b.n	8000be2 <__aeabi_dadd+0x42e>
 8000d86:	4663      	mov	r3, ip
 8000d88:	08d8      	lsrs	r0, r3, #3
 8000d8a:	4653      	mov	r3, sl
 8000d8c:	075a      	lsls	r2, r3, #29
 8000d8e:	000e      	movs	r6, r1
 8000d90:	4302      	orrs	r2, r0
 8000d92:	08dc      	lsrs	r4, r3, #3
 8000d94:	e6cc      	b.n	8000b30 <__aeabi_dadd+0x37c>
 8000d96:	4663      	mov	r3, ip
 8000d98:	1a1d      	subs	r5, r3, r0
 8000d9a:	45ac      	cmp	ip, r5
 8000d9c:	4192      	sbcs	r2, r2
 8000d9e:	4653      	mov	r3, sl
 8000da0:	4252      	negs	r2, r2
 8000da2:	1b1c      	subs	r4, r3, r4
 8000da4:	000e      	movs	r6, r1
 8000da6:	4688      	mov	r8, r1
 8000da8:	1aa4      	subs	r4, r4, r2
 8000daa:	3701      	adds	r7, #1
 8000dac:	e555      	b.n	800085a <__aeabi_dadd+0xa6>
 8000dae:	4663      	mov	r3, ip
 8000db0:	08d9      	lsrs	r1, r3, #3
 8000db2:	4653      	mov	r3, sl
 8000db4:	075a      	lsls	r2, r3, #29
 8000db6:	430a      	orrs	r2, r1
 8000db8:	08dc      	lsrs	r4, r3, #3
 8000dba:	e6c9      	b.n	8000b50 <__aeabi_dadd+0x39c>
 8000dbc:	4660      	mov	r0, ip
 8000dbe:	4654      	mov	r4, sl
 8000dc0:	e6d4      	b.n	8000b6c <__aeabi_dadd+0x3b8>
 8000dc2:	08c0      	lsrs	r0, r0, #3
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dadd+0x616>
 8000dc8:	e6bf      	b.n	8000b4a <__aeabi_dadd+0x396>
 8000dca:	0762      	lsls	r2, r4, #29
 8000dcc:	4310      	orrs	r0, r2
 8000dce:	2280      	movs	r2, #128	@ 0x80
 8000dd0:	08e4      	lsrs	r4, r4, #3
 8000dd2:	0312      	lsls	r2, r2, #12
 8000dd4:	4214      	tst	r4, r2
 8000dd6:	d0cd      	beq.n	8000d74 <__aeabi_dadd+0x5c0>
 8000dd8:	08dd      	lsrs	r5, r3, #3
 8000dda:	4215      	tst	r5, r2
 8000ddc:	d1ca      	bne.n	8000d74 <__aeabi_dadd+0x5c0>
 8000dde:	4663      	mov	r3, ip
 8000de0:	08d8      	lsrs	r0, r3, #3
 8000de2:	4653      	mov	r3, sl
 8000de4:	075b      	lsls	r3, r3, #29
 8000de6:	000e      	movs	r6, r1
 8000de8:	002c      	movs	r4, r5
 8000dea:	4318      	orrs	r0, r3
 8000dec:	e7c2      	b.n	8000d74 <__aeabi_dadd+0x5c0>
 8000dee:	4663      	mov	r3, ip
 8000df0:	08d9      	lsrs	r1, r3, #3
 8000df2:	4653      	mov	r3, sl
 8000df4:	075a      	lsls	r2, r3, #29
 8000df6:	430a      	orrs	r2, r1
 8000df8:	08dc      	lsrs	r4, r3, #3
 8000dfa:	e699      	b.n	8000b30 <__aeabi_dadd+0x37c>
 8000dfc:	4663      	mov	r3, ip
 8000dfe:	08d8      	lsrs	r0, r3, #3
 8000e00:	4653      	mov	r3, sl
 8000e02:	075a      	lsls	r2, r3, #29
 8000e04:	000e      	movs	r6, r1
 8000e06:	4302      	orrs	r2, r0
 8000e08:	08dc      	lsrs	r4, r3, #3
 8000e0a:	e6a1      	b.n	8000b50 <__aeabi_dadd+0x39c>
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	0027      	movs	r7, r4
 8000e10:	3920      	subs	r1, #32
 8000e12:	40cf      	lsrs	r7, r1
 8000e14:	2a20      	cmp	r2, #32
 8000e16:	d003      	beq.n	8000e20 <__aeabi_dadd+0x66c>
 8000e18:	2140      	movs	r1, #64	@ 0x40
 8000e1a:	1a8a      	subs	r2, r1, r2
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	4320      	orrs	r0, r4
 8000e20:	1e42      	subs	r2, r0, #1
 8000e22:	4190      	sbcs	r0, r2
 8000e24:	0005      	movs	r5, r0
 8000e26:	433d      	orrs	r5, r7
 8000e28:	e651      	b.n	8000ace <__aeabi_dadd+0x31a>
 8000e2a:	000c      	movs	r4, r1
 8000e2c:	2500      	movs	r5, #0
 8000e2e:	2200      	movs	r2, #0
 8000e30:	e558      	b.n	80008e4 <__aeabi_dadd+0x130>
 8000e32:	4460      	add	r0, ip
 8000e34:	4560      	cmp	r0, ip
 8000e36:	4192      	sbcs	r2, r2
 8000e38:	4454      	add	r4, sl
 8000e3a:	4252      	negs	r2, r2
 8000e3c:	0005      	movs	r5, r0
 8000e3e:	18a4      	adds	r4, r4, r2
 8000e40:	e73a      	b.n	8000cb8 <__aeabi_dadd+0x504>
 8000e42:	4653      	mov	r3, sl
 8000e44:	075a      	lsls	r2, r3, #29
 8000e46:	4663      	mov	r3, ip
 8000e48:	08d9      	lsrs	r1, r3, #3
 8000e4a:	4653      	mov	r3, sl
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	08dc      	lsrs	r4, r3, #3
 8000e50:	e67e      	b.n	8000b50 <__aeabi_dadd+0x39c>
 8000e52:	001a      	movs	r2, r3
 8000e54:	001c      	movs	r4, r3
 8000e56:	432a      	orrs	r2, r5
 8000e58:	d000      	beq.n	8000e5c <__aeabi_dadd+0x6a8>
 8000e5a:	e6ab      	b.n	8000bb4 <__aeabi_dadd+0x400>
 8000e5c:	e6c1      	b.n	8000be2 <__aeabi_dadd+0x42e>
 8000e5e:	2120      	movs	r1, #32
 8000e60:	2500      	movs	r5, #0
 8000e62:	1a09      	subs	r1, r1, r0
 8000e64:	e519      	b.n	800089a <__aeabi_dadd+0xe6>
 8000e66:	2200      	movs	r2, #0
 8000e68:	2500      	movs	r5, #0
 8000e6a:	4c01      	ldr	r4, [pc, #4]	@ (8000e70 <__aeabi_dadd+0x6bc>)
 8000e6c:	e53a      	b.n	80008e4 <__aeabi_dadd+0x130>
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff
 8000e78:	000007fe 	.word	0x000007fe

08000e7c <__aeabi_ddiv>:
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	46de      	mov	lr, fp
 8000e80:	4645      	mov	r5, r8
 8000e82:	4657      	mov	r7, sl
 8000e84:	464e      	mov	r6, r9
 8000e86:	b5e0      	push	{r5, r6, r7, lr}
 8000e88:	b087      	sub	sp, #28
 8000e8a:	9200      	str	r2, [sp, #0]
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	030b      	lsls	r3, r1, #12
 8000e90:	0b1b      	lsrs	r3, r3, #12
 8000e92:	469b      	mov	fp, r3
 8000e94:	0fca      	lsrs	r2, r1, #31
 8000e96:	004b      	lsls	r3, r1, #1
 8000e98:	0004      	movs	r4, r0
 8000e9a:	4680      	mov	r8, r0
 8000e9c:	0d5b      	lsrs	r3, r3, #21
 8000e9e:	9202      	str	r2, [sp, #8]
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x28>
 8000ea2:	e16a      	b.n	800117a <__aeabi_ddiv+0x2fe>
 8000ea4:	4ad4      	ldr	r2, [pc, #848]	@ (80011f8 <__aeabi_ddiv+0x37c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d100      	bne.n	8000eac <__aeabi_ddiv+0x30>
 8000eaa:	e18c      	b.n	80011c6 <__aeabi_ddiv+0x34a>
 8000eac:	4659      	mov	r1, fp
 8000eae:	0f42      	lsrs	r2, r0, #29
 8000eb0:	00c9      	lsls	r1, r1, #3
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	2180      	movs	r1, #128	@ 0x80
 8000eb6:	0409      	lsls	r1, r1, #16
 8000eb8:	4311      	orrs	r1, r2
 8000eba:	00c2      	lsls	r2, r0, #3
 8000ebc:	4690      	mov	r8, r2
 8000ebe:	4acf      	ldr	r2, [pc, #828]	@ (80011fc <__aeabi_ddiv+0x380>)
 8000ec0:	4689      	mov	r9, r1
 8000ec2:	4692      	mov	sl, r2
 8000ec4:	449a      	add	sl, r3
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2400      	movs	r4, #0
 8000eca:	9303      	str	r3, [sp, #12]
 8000ecc:	9e00      	ldr	r6, [sp, #0]
 8000ece:	9f01      	ldr	r7, [sp, #4]
 8000ed0:	033b      	lsls	r3, r7, #12
 8000ed2:	0b1b      	lsrs	r3, r3, #12
 8000ed4:	469b      	mov	fp, r3
 8000ed6:	007b      	lsls	r3, r7, #1
 8000ed8:	0030      	movs	r0, r6
 8000eda:	0d5b      	lsrs	r3, r3, #21
 8000edc:	0ffd      	lsrs	r5, r7, #31
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_ddiv+0x68>
 8000ee2:	e128      	b.n	8001136 <__aeabi_ddiv+0x2ba>
 8000ee4:	4ac4      	ldr	r2, [pc, #784]	@ (80011f8 <__aeabi_ddiv+0x37c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d100      	bne.n	8000eec <__aeabi_ddiv+0x70>
 8000eea:	e177      	b.n	80011dc <__aeabi_ddiv+0x360>
 8000eec:	4659      	mov	r1, fp
 8000eee:	0f72      	lsrs	r2, r6, #29
 8000ef0:	00c9      	lsls	r1, r1, #3
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	2180      	movs	r1, #128	@ 0x80
 8000ef6:	0409      	lsls	r1, r1, #16
 8000ef8:	4311      	orrs	r1, r2
 8000efa:	468b      	mov	fp, r1
 8000efc:	49bf      	ldr	r1, [pc, #764]	@ (80011fc <__aeabi_ddiv+0x380>)
 8000efe:	00f2      	lsls	r2, r6, #3
 8000f00:	468c      	mov	ip, r1
 8000f02:	4651      	mov	r1, sl
 8000f04:	4463      	add	r3, ip
 8000f06:	1acb      	subs	r3, r1, r3
 8000f08:	469a      	mov	sl, r3
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9e02      	ldr	r6, [sp, #8]
 8000f0e:	406e      	eors	r6, r5
 8000f10:	2c0f      	cmp	r4, #15
 8000f12:	d827      	bhi.n	8000f64 <__aeabi_ddiv+0xe8>
 8000f14:	49ba      	ldr	r1, [pc, #744]	@ (8001200 <__aeabi_ddiv+0x384>)
 8000f16:	00a4      	lsls	r4, r4, #2
 8000f18:	5909      	ldr	r1, [r1, r4]
 8000f1a:	468f      	mov	pc, r1
 8000f1c:	46cb      	mov	fp, r9
 8000f1e:	4642      	mov	r2, r8
 8000f20:	9e02      	ldr	r6, [sp, #8]
 8000f22:	9b03      	ldr	r3, [sp, #12]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d016      	beq.n	8000f56 <__aeabi_ddiv+0xda>
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_ddiv+0xb2>
 8000f2c:	e2a6      	b.n	800147c <__aeabi_ddiv+0x600>
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d000      	beq.n	8000f34 <__aeabi_ddiv+0xb8>
 8000f32:	e0df      	b.n	80010f4 <__aeabi_ddiv+0x278>
 8000f34:	2200      	movs	r2, #0
 8000f36:	2300      	movs	r3, #0
 8000f38:	2400      	movs	r4, #0
 8000f3a:	4690      	mov	r8, r2
 8000f3c:	051b      	lsls	r3, r3, #20
 8000f3e:	4323      	orrs	r3, r4
 8000f40:	07f6      	lsls	r6, r6, #31
 8000f42:	4333      	orrs	r3, r6
 8000f44:	4640      	mov	r0, r8
 8000f46:	0019      	movs	r1, r3
 8000f48:	b007      	add	sp, #28
 8000f4a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f4c:	46bb      	mov	fp, r7
 8000f4e:	46b2      	mov	sl, r6
 8000f50:	46a9      	mov	r9, r5
 8000f52:	46a0      	mov	r8, r4
 8000f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f56:	2200      	movs	r2, #0
 8000f58:	2400      	movs	r4, #0
 8000f5a:	4690      	mov	r8, r2
 8000f5c:	4ba6      	ldr	r3, [pc, #664]	@ (80011f8 <__aeabi_ddiv+0x37c>)
 8000f5e:	e7ed      	b.n	8000f3c <__aeabi_ddiv+0xc0>
 8000f60:	002e      	movs	r6, r5
 8000f62:	e7df      	b.n	8000f24 <__aeabi_ddiv+0xa8>
 8000f64:	45cb      	cmp	fp, r9
 8000f66:	d200      	bcs.n	8000f6a <__aeabi_ddiv+0xee>
 8000f68:	e1d4      	b.n	8001314 <__aeabi_ddiv+0x498>
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_ddiv+0xf2>
 8000f6c:	e1cf      	b.n	800130e <__aeabi_ddiv+0x492>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	425b      	negs	r3, r3
 8000f72:	469c      	mov	ip, r3
 8000f74:	4644      	mov	r4, r8
 8000f76:	4648      	mov	r0, r9
 8000f78:	2700      	movs	r7, #0
 8000f7a:	44e2      	add	sl, ip
 8000f7c:	465b      	mov	r3, fp
 8000f7e:	0e15      	lsrs	r5, r2, #24
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	431d      	orrs	r5, r3
 8000f84:	0c19      	lsrs	r1, r3, #16
 8000f86:	042b      	lsls	r3, r5, #16
 8000f88:	0212      	lsls	r2, r2, #8
 8000f8a:	9500      	str	r5, [sp, #0]
 8000f8c:	0c1d      	lsrs	r5, r3, #16
 8000f8e:	4691      	mov	r9, r2
 8000f90:	9102      	str	r1, [sp, #8]
 8000f92:	9503      	str	r5, [sp, #12]
 8000f94:	f7ff f956 	bl	8000244 <__aeabi_uidivmod>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	436a      	muls	r2, r5
 8000f9c:	040b      	lsls	r3, r1, #16
 8000f9e:	0c21      	lsrs	r1, r4, #16
 8000fa0:	4680      	mov	r8, r0
 8000fa2:	4319      	orrs	r1, r3
 8000fa4:	428a      	cmp	r2, r1
 8000fa6:	d909      	bls.n	8000fbc <__aeabi_ddiv+0x140>
 8000fa8:	9d00      	ldr	r5, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	46ac      	mov	ip, r5
 8000fae:	425b      	negs	r3, r3
 8000fb0:	4461      	add	r1, ip
 8000fb2:	469c      	mov	ip, r3
 8000fb4:	44e0      	add	r8, ip
 8000fb6:	428d      	cmp	r5, r1
 8000fb8:	d800      	bhi.n	8000fbc <__aeabi_ddiv+0x140>
 8000fba:	e1fb      	b.n	80013b4 <__aeabi_ddiv+0x538>
 8000fbc:	1a88      	subs	r0, r1, r2
 8000fbe:	9902      	ldr	r1, [sp, #8]
 8000fc0:	f7ff f940 	bl	8000244 <__aeabi_uidivmod>
 8000fc4:	9a03      	ldr	r2, [sp, #12]
 8000fc6:	0424      	lsls	r4, r4, #16
 8000fc8:	4342      	muls	r2, r0
 8000fca:	0409      	lsls	r1, r1, #16
 8000fcc:	0c24      	lsrs	r4, r4, #16
 8000fce:	0003      	movs	r3, r0
 8000fd0:	430c      	orrs	r4, r1
 8000fd2:	42a2      	cmp	r2, r4
 8000fd4:	d906      	bls.n	8000fe4 <__aeabi_ddiv+0x168>
 8000fd6:	9900      	ldr	r1, [sp, #0]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	468c      	mov	ip, r1
 8000fdc:	4464      	add	r4, ip
 8000fde:	42a1      	cmp	r1, r4
 8000fe0:	d800      	bhi.n	8000fe4 <__aeabi_ddiv+0x168>
 8000fe2:	e1e1      	b.n	80013a8 <__aeabi_ddiv+0x52c>
 8000fe4:	1aa0      	subs	r0, r4, r2
 8000fe6:	4642      	mov	r2, r8
 8000fe8:	0412      	lsls	r2, r2, #16
 8000fea:	431a      	orrs	r2, r3
 8000fec:	4693      	mov	fp, r2
 8000fee:	464b      	mov	r3, r9
 8000ff0:	4659      	mov	r1, fp
 8000ff2:	0c1b      	lsrs	r3, r3, #16
 8000ff4:	001d      	movs	r5, r3
 8000ff6:	9304      	str	r3, [sp, #16]
 8000ff8:	040b      	lsls	r3, r1, #16
 8000ffa:	4649      	mov	r1, r9
 8000ffc:	0409      	lsls	r1, r1, #16
 8000ffe:	0c09      	lsrs	r1, r1, #16
 8001000:	000c      	movs	r4, r1
 8001002:	0c1b      	lsrs	r3, r3, #16
 8001004:	435c      	muls	r4, r3
 8001006:	0c12      	lsrs	r2, r2, #16
 8001008:	436b      	muls	r3, r5
 800100a:	4688      	mov	r8, r1
 800100c:	4351      	muls	r1, r2
 800100e:	436a      	muls	r2, r5
 8001010:	0c25      	lsrs	r5, r4, #16
 8001012:	46ac      	mov	ip, r5
 8001014:	185b      	adds	r3, r3, r1
 8001016:	4463      	add	r3, ip
 8001018:	4299      	cmp	r1, r3
 800101a:	d903      	bls.n	8001024 <__aeabi_ddiv+0x1a8>
 800101c:	2180      	movs	r1, #128	@ 0x80
 800101e:	0249      	lsls	r1, r1, #9
 8001020:	468c      	mov	ip, r1
 8001022:	4462      	add	r2, ip
 8001024:	0c19      	lsrs	r1, r3, #16
 8001026:	0424      	lsls	r4, r4, #16
 8001028:	041b      	lsls	r3, r3, #16
 800102a:	0c24      	lsrs	r4, r4, #16
 800102c:	188a      	adds	r2, r1, r2
 800102e:	191c      	adds	r4, r3, r4
 8001030:	4290      	cmp	r0, r2
 8001032:	d302      	bcc.n	800103a <__aeabi_ddiv+0x1be>
 8001034:	d116      	bne.n	8001064 <__aeabi_ddiv+0x1e8>
 8001036:	42a7      	cmp	r7, r4
 8001038:	d214      	bcs.n	8001064 <__aeabi_ddiv+0x1e8>
 800103a:	465b      	mov	r3, fp
 800103c:	9d00      	ldr	r5, [sp, #0]
 800103e:	3b01      	subs	r3, #1
 8001040:	444f      	add	r7, r9
 8001042:	9305      	str	r3, [sp, #20]
 8001044:	454f      	cmp	r7, r9
 8001046:	419b      	sbcs	r3, r3
 8001048:	46ac      	mov	ip, r5
 800104a:	425b      	negs	r3, r3
 800104c:	4463      	add	r3, ip
 800104e:	18c0      	adds	r0, r0, r3
 8001050:	4285      	cmp	r5, r0
 8001052:	d300      	bcc.n	8001056 <__aeabi_ddiv+0x1da>
 8001054:	e1a1      	b.n	800139a <__aeabi_ddiv+0x51e>
 8001056:	4282      	cmp	r2, r0
 8001058:	d900      	bls.n	800105c <__aeabi_ddiv+0x1e0>
 800105a:	e1f6      	b.n	800144a <__aeabi_ddiv+0x5ce>
 800105c:	d100      	bne.n	8001060 <__aeabi_ddiv+0x1e4>
 800105e:	e1f1      	b.n	8001444 <__aeabi_ddiv+0x5c8>
 8001060:	9b05      	ldr	r3, [sp, #20]
 8001062:	469b      	mov	fp, r3
 8001064:	1b3c      	subs	r4, r7, r4
 8001066:	42a7      	cmp	r7, r4
 8001068:	41bf      	sbcs	r7, r7
 800106a:	9d00      	ldr	r5, [sp, #0]
 800106c:	1a80      	subs	r0, r0, r2
 800106e:	427f      	negs	r7, r7
 8001070:	1bc0      	subs	r0, r0, r7
 8001072:	4285      	cmp	r5, r0
 8001074:	d100      	bne.n	8001078 <__aeabi_ddiv+0x1fc>
 8001076:	e1d0      	b.n	800141a <__aeabi_ddiv+0x59e>
 8001078:	9902      	ldr	r1, [sp, #8]
 800107a:	f7ff f8e3 	bl	8000244 <__aeabi_uidivmod>
 800107e:	9a03      	ldr	r2, [sp, #12]
 8001080:	040b      	lsls	r3, r1, #16
 8001082:	4342      	muls	r2, r0
 8001084:	0c21      	lsrs	r1, r4, #16
 8001086:	0007      	movs	r7, r0
 8001088:	4319      	orrs	r1, r3
 800108a:	428a      	cmp	r2, r1
 800108c:	d900      	bls.n	8001090 <__aeabi_ddiv+0x214>
 800108e:	e178      	b.n	8001382 <__aeabi_ddiv+0x506>
 8001090:	1a88      	subs	r0, r1, r2
 8001092:	9902      	ldr	r1, [sp, #8]
 8001094:	f7ff f8d6 	bl	8000244 <__aeabi_uidivmod>
 8001098:	9a03      	ldr	r2, [sp, #12]
 800109a:	0424      	lsls	r4, r4, #16
 800109c:	4342      	muls	r2, r0
 800109e:	0409      	lsls	r1, r1, #16
 80010a0:	0c24      	lsrs	r4, r4, #16
 80010a2:	0003      	movs	r3, r0
 80010a4:	430c      	orrs	r4, r1
 80010a6:	42a2      	cmp	r2, r4
 80010a8:	d900      	bls.n	80010ac <__aeabi_ddiv+0x230>
 80010aa:	e15d      	b.n	8001368 <__aeabi_ddiv+0x4ec>
 80010ac:	4641      	mov	r1, r8
 80010ae:	1aa4      	subs	r4, r4, r2
 80010b0:	043a      	lsls	r2, r7, #16
 80010b2:	431a      	orrs	r2, r3
 80010b4:	9d04      	ldr	r5, [sp, #16]
 80010b6:	0413      	lsls	r3, r2, #16
 80010b8:	0c1b      	lsrs	r3, r3, #16
 80010ba:	4359      	muls	r1, r3
 80010bc:	4647      	mov	r7, r8
 80010be:	436b      	muls	r3, r5
 80010c0:	469c      	mov	ip, r3
 80010c2:	0c10      	lsrs	r0, r2, #16
 80010c4:	4347      	muls	r7, r0
 80010c6:	0c0b      	lsrs	r3, r1, #16
 80010c8:	44bc      	add	ip, r7
 80010ca:	4463      	add	r3, ip
 80010cc:	4368      	muls	r0, r5
 80010ce:	429f      	cmp	r7, r3
 80010d0:	d903      	bls.n	80010da <__aeabi_ddiv+0x25e>
 80010d2:	2580      	movs	r5, #128	@ 0x80
 80010d4:	026d      	lsls	r5, r5, #9
 80010d6:	46ac      	mov	ip, r5
 80010d8:	4460      	add	r0, ip
 80010da:	0c1f      	lsrs	r7, r3, #16
 80010dc:	0409      	lsls	r1, r1, #16
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	0c09      	lsrs	r1, r1, #16
 80010e2:	183f      	adds	r7, r7, r0
 80010e4:	185b      	adds	r3, r3, r1
 80010e6:	42bc      	cmp	r4, r7
 80010e8:	d200      	bcs.n	80010ec <__aeabi_ddiv+0x270>
 80010ea:	e102      	b.n	80012f2 <__aeabi_ddiv+0x476>
 80010ec:	d100      	bne.n	80010f0 <__aeabi_ddiv+0x274>
 80010ee:	e0fd      	b.n	80012ec <__aeabi_ddiv+0x470>
 80010f0:	2301      	movs	r3, #1
 80010f2:	431a      	orrs	r2, r3
 80010f4:	4b43      	ldr	r3, [pc, #268]	@ (8001204 <__aeabi_ddiv+0x388>)
 80010f6:	4453      	add	r3, sl
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dc00      	bgt.n	80010fe <__aeabi_ddiv+0x282>
 80010fc:	e0ae      	b.n	800125c <__aeabi_ddiv+0x3e0>
 80010fe:	0751      	lsls	r1, r2, #29
 8001100:	d000      	beq.n	8001104 <__aeabi_ddiv+0x288>
 8001102:	e198      	b.n	8001436 <__aeabi_ddiv+0x5ba>
 8001104:	4659      	mov	r1, fp
 8001106:	01c9      	lsls	r1, r1, #7
 8001108:	d506      	bpl.n	8001118 <__aeabi_ddiv+0x29c>
 800110a:	4659      	mov	r1, fp
 800110c:	4b3e      	ldr	r3, [pc, #248]	@ (8001208 <__aeabi_ddiv+0x38c>)
 800110e:	4019      	ands	r1, r3
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	468b      	mov	fp, r1
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4453      	add	r3, sl
 8001118:	493c      	ldr	r1, [pc, #240]	@ (800120c <__aeabi_ddiv+0x390>)
 800111a:	428b      	cmp	r3, r1
 800111c:	dd00      	ble.n	8001120 <__aeabi_ddiv+0x2a4>
 800111e:	e71a      	b.n	8000f56 <__aeabi_ddiv+0xda>
 8001120:	4659      	mov	r1, fp
 8001122:	08d2      	lsrs	r2, r2, #3
 8001124:	0749      	lsls	r1, r1, #29
 8001126:	4311      	orrs	r1, r2
 8001128:	465a      	mov	r2, fp
 800112a:	055b      	lsls	r3, r3, #21
 800112c:	0254      	lsls	r4, r2, #9
 800112e:	4688      	mov	r8, r1
 8001130:	0b24      	lsrs	r4, r4, #12
 8001132:	0d5b      	lsrs	r3, r3, #21
 8001134:	e702      	b.n	8000f3c <__aeabi_ddiv+0xc0>
 8001136:	465a      	mov	r2, fp
 8001138:	9b00      	ldr	r3, [sp, #0]
 800113a:	431a      	orrs	r2, r3
 800113c:	d100      	bne.n	8001140 <__aeabi_ddiv+0x2c4>
 800113e:	e07e      	b.n	800123e <__aeabi_ddiv+0x3c2>
 8001140:	465b      	mov	r3, fp
 8001142:	2b00      	cmp	r3, #0
 8001144:	d100      	bne.n	8001148 <__aeabi_ddiv+0x2cc>
 8001146:	e100      	b.n	800134a <__aeabi_ddiv+0x4ce>
 8001148:	4658      	mov	r0, fp
 800114a:	f001 fa37 	bl	80025bc <__clzsi2>
 800114e:	0002      	movs	r2, r0
 8001150:	0003      	movs	r3, r0
 8001152:	3a0b      	subs	r2, #11
 8001154:	271d      	movs	r7, #29
 8001156:	9e00      	ldr	r6, [sp, #0]
 8001158:	1aba      	subs	r2, r7, r2
 800115a:	0019      	movs	r1, r3
 800115c:	4658      	mov	r0, fp
 800115e:	40d6      	lsrs	r6, r2
 8001160:	3908      	subs	r1, #8
 8001162:	4088      	lsls	r0, r1
 8001164:	0032      	movs	r2, r6
 8001166:	4302      	orrs	r2, r0
 8001168:	4693      	mov	fp, r2
 800116a:	9a00      	ldr	r2, [sp, #0]
 800116c:	408a      	lsls	r2, r1
 800116e:	4928      	ldr	r1, [pc, #160]	@ (8001210 <__aeabi_ddiv+0x394>)
 8001170:	4453      	add	r3, sl
 8001172:	468a      	mov	sl, r1
 8001174:	449a      	add	sl, r3
 8001176:	2300      	movs	r3, #0
 8001178:	e6c8      	b.n	8000f0c <__aeabi_ddiv+0x90>
 800117a:	465b      	mov	r3, fp
 800117c:	4303      	orrs	r3, r0
 800117e:	4699      	mov	r9, r3
 8001180:	d056      	beq.n	8001230 <__aeabi_ddiv+0x3b4>
 8001182:	465b      	mov	r3, fp
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <__aeabi_ddiv+0x30e>
 8001188:	e0cd      	b.n	8001326 <__aeabi_ddiv+0x4aa>
 800118a:	4658      	mov	r0, fp
 800118c:	f001 fa16 	bl	80025bc <__clzsi2>
 8001190:	230b      	movs	r3, #11
 8001192:	425b      	negs	r3, r3
 8001194:	469c      	mov	ip, r3
 8001196:	0002      	movs	r2, r0
 8001198:	4484      	add	ip, r0
 800119a:	4666      	mov	r6, ip
 800119c:	231d      	movs	r3, #29
 800119e:	1b9b      	subs	r3, r3, r6
 80011a0:	0026      	movs	r6, r4
 80011a2:	0011      	movs	r1, r2
 80011a4:	4658      	mov	r0, fp
 80011a6:	40de      	lsrs	r6, r3
 80011a8:	3908      	subs	r1, #8
 80011aa:	4088      	lsls	r0, r1
 80011ac:	0033      	movs	r3, r6
 80011ae:	4303      	orrs	r3, r0
 80011b0:	4699      	mov	r9, r3
 80011b2:	0023      	movs	r3, r4
 80011b4:	408b      	lsls	r3, r1
 80011b6:	4698      	mov	r8, r3
 80011b8:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <__aeabi_ddiv+0x398>)
 80011ba:	2400      	movs	r4, #0
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	469a      	mov	sl, r3
 80011c0:	2300      	movs	r3, #0
 80011c2:	9303      	str	r3, [sp, #12]
 80011c4:	e682      	b.n	8000ecc <__aeabi_ddiv+0x50>
 80011c6:	465a      	mov	r2, fp
 80011c8:	4302      	orrs	r2, r0
 80011ca:	4691      	mov	r9, r2
 80011cc:	d12a      	bne.n	8001224 <__aeabi_ddiv+0x3a8>
 80011ce:	2200      	movs	r2, #0
 80011d0:	469a      	mov	sl, r3
 80011d2:	2302      	movs	r3, #2
 80011d4:	4690      	mov	r8, r2
 80011d6:	2408      	movs	r4, #8
 80011d8:	9303      	str	r3, [sp, #12]
 80011da:	e677      	b.n	8000ecc <__aeabi_ddiv+0x50>
 80011dc:	465a      	mov	r2, fp
 80011de:	9b00      	ldr	r3, [sp, #0]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <__aeabi_ddiv+0x39c>)
 80011e4:	469c      	mov	ip, r3
 80011e6:	44e2      	add	sl, ip
 80011e8:	2a00      	cmp	r2, #0
 80011ea:	d117      	bne.n	800121c <__aeabi_ddiv+0x3a0>
 80011ec:	2302      	movs	r3, #2
 80011ee:	431c      	orrs	r4, r3
 80011f0:	2300      	movs	r3, #0
 80011f2:	469b      	mov	fp, r3
 80011f4:	3302      	adds	r3, #2
 80011f6:	e689      	b.n	8000f0c <__aeabi_ddiv+0x90>
 80011f8:	000007ff 	.word	0x000007ff
 80011fc:	fffffc01 	.word	0xfffffc01
 8001200:	08008da0 	.word	0x08008da0
 8001204:	000003ff 	.word	0x000003ff
 8001208:	feffffff 	.word	0xfeffffff
 800120c:	000007fe 	.word	0x000007fe
 8001210:	000003f3 	.word	0x000003f3
 8001214:	fffffc0d 	.word	0xfffffc0d
 8001218:	fffff801 	.word	0xfffff801
 800121c:	2303      	movs	r3, #3
 800121e:	0032      	movs	r2, r6
 8001220:	431c      	orrs	r4, r3
 8001222:	e673      	b.n	8000f0c <__aeabi_ddiv+0x90>
 8001224:	469a      	mov	sl, r3
 8001226:	2303      	movs	r3, #3
 8001228:	46d9      	mov	r9, fp
 800122a:	240c      	movs	r4, #12
 800122c:	9303      	str	r3, [sp, #12]
 800122e:	e64d      	b.n	8000ecc <__aeabi_ddiv+0x50>
 8001230:	2300      	movs	r3, #0
 8001232:	4698      	mov	r8, r3
 8001234:	469a      	mov	sl, r3
 8001236:	3301      	adds	r3, #1
 8001238:	2404      	movs	r4, #4
 800123a:	9303      	str	r3, [sp, #12]
 800123c:	e646      	b.n	8000ecc <__aeabi_ddiv+0x50>
 800123e:	2301      	movs	r3, #1
 8001240:	431c      	orrs	r4, r3
 8001242:	2300      	movs	r3, #0
 8001244:	469b      	mov	fp, r3
 8001246:	3301      	adds	r3, #1
 8001248:	e660      	b.n	8000f0c <__aeabi_ddiv+0x90>
 800124a:	2300      	movs	r3, #0
 800124c:	2480      	movs	r4, #128	@ 0x80
 800124e:	4698      	mov	r8, r3
 8001250:	2600      	movs	r6, #0
 8001252:	4b92      	ldr	r3, [pc, #584]	@ (800149c <__aeabi_ddiv+0x620>)
 8001254:	0324      	lsls	r4, r4, #12
 8001256:	e671      	b.n	8000f3c <__aeabi_ddiv+0xc0>
 8001258:	2201      	movs	r2, #1
 800125a:	4252      	negs	r2, r2
 800125c:	2101      	movs	r1, #1
 800125e:	1ac9      	subs	r1, r1, r3
 8001260:	2938      	cmp	r1, #56	@ 0x38
 8001262:	dd00      	ble.n	8001266 <__aeabi_ddiv+0x3ea>
 8001264:	e666      	b.n	8000f34 <__aeabi_ddiv+0xb8>
 8001266:	291f      	cmp	r1, #31
 8001268:	dc00      	bgt.n	800126c <__aeabi_ddiv+0x3f0>
 800126a:	e0ab      	b.n	80013c4 <__aeabi_ddiv+0x548>
 800126c:	201f      	movs	r0, #31
 800126e:	4240      	negs	r0, r0
 8001270:	1ac3      	subs	r3, r0, r3
 8001272:	4658      	mov	r0, fp
 8001274:	40d8      	lsrs	r0, r3
 8001276:	0003      	movs	r3, r0
 8001278:	2920      	cmp	r1, #32
 800127a:	d004      	beq.n	8001286 <__aeabi_ddiv+0x40a>
 800127c:	4658      	mov	r0, fp
 800127e:	4988      	ldr	r1, [pc, #544]	@ (80014a0 <__aeabi_ddiv+0x624>)
 8001280:	4451      	add	r1, sl
 8001282:	4088      	lsls	r0, r1
 8001284:	4302      	orrs	r2, r0
 8001286:	1e51      	subs	r1, r2, #1
 8001288:	418a      	sbcs	r2, r1
 800128a:	431a      	orrs	r2, r3
 800128c:	2307      	movs	r3, #7
 800128e:	0019      	movs	r1, r3
 8001290:	2400      	movs	r4, #0
 8001292:	4011      	ands	r1, r2
 8001294:	4213      	tst	r3, r2
 8001296:	d00c      	beq.n	80012b2 <__aeabi_ddiv+0x436>
 8001298:	230f      	movs	r3, #15
 800129a:	4013      	ands	r3, r2
 800129c:	2b04      	cmp	r3, #4
 800129e:	d100      	bne.n	80012a2 <__aeabi_ddiv+0x426>
 80012a0:	e0f9      	b.n	8001496 <__aeabi_ddiv+0x61a>
 80012a2:	1d11      	adds	r1, r2, #4
 80012a4:	4291      	cmp	r1, r2
 80012a6:	419b      	sbcs	r3, r3
 80012a8:	000a      	movs	r2, r1
 80012aa:	425b      	negs	r3, r3
 80012ac:	0759      	lsls	r1, r3, #29
 80012ae:	025b      	lsls	r3, r3, #9
 80012b0:	0b1c      	lsrs	r4, r3, #12
 80012b2:	08d2      	lsrs	r2, r2, #3
 80012b4:	430a      	orrs	r2, r1
 80012b6:	4690      	mov	r8, r2
 80012b8:	2300      	movs	r3, #0
 80012ba:	e63f      	b.n	8000f3c <__aeabi_ddiv+0xc0>
 80012bc:	2480      	movs	r4, #128	@ 0x80
 80012be:	464b      	mov	r3, r9
 80012c0:	0324      	lsls	r4, r4, #12
 80012c2:	4223      	tst	r3, r4
 80012c4:	d009      	beq.n	80012da <__aeabi_ddiv+0x45e>
 80012c6:	465b      	mov	r3, fp
 80012c8:	4223      	tst	r3, r4
 80012ca:	d106      	bne.n	80012da <__aeabi_ddiv+0x45e>
 80012cc:	431c      	orrs	r4, r3
 80012ce:	0324      	lsls	r4, r4, #12
 80012d0:	002e      	movs	r6, r5
 80012d2:	4690      	mov	r8, r2
 80012d4:	4b71      	ldr	r3, [pc, #452]	@ (800149c <__aeabi_ddiv+0x620>)
 80012d6:	0b24      	lsrs	r4, r4, #12
 80012d8:	e630      	b.n	8000f3c <__aeabi_ddiv+0xc0>
 80012da:	2480      	movs	r4, #128	@ 0x80
 80012dc:	464b      	mov	r3, r9
 80012de:	0324      	lsls	r4, r4, #12
 80012e0:	431c      	orrs	r4, r3
 80012e2:	0324      	lsls	r4, r4, #12
 80012e4:	9e02      	ldr	r6, [sp, #8]
 80012e6:	4b6d      	ldr	r3, [pc, #436]	@ (800149c <__aeabi_ddiv+0x620>)
 80012e8:	0b24      	lsrs	r4, r4, #12
 80012ea:	e627      	b.n	8000f3c <__aeabi_ddiv+0xc0>
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d100      	bne.n	80012f2 <__aeabi_ddiv+0x476>
 80012f0:	e700      	b.n	80010f4 <__aeabi_ddiv+0x278>
 80012f2:	9800      	ldr	r0, [sp, #0]
 80012f4:	1e51      	subs	r1, r2, #1
 80012f6:	4684      	mov	ip, r0
 80012f8:	4464      	add	r4, ip
 80012fa:	4284      	cmp	r4, r0
 80012fc:	d200      	bcs.n	8001300 <__aeabi_ddiv+0x484>
 80012fe:	e084      	b.n	800140a <__aeabi_ddiv+0x58e>
 8001300:	42bc      	cmp	r4, r7
 8001302:	d200      	bcs.n	8001306 <__aeabi_ddiv+0x48a>
 8001304:	e0ae      	b.n	8001464 <__aeabi_ddiv+0x5e8>
 8001306:	d100      	bne.n	800130a <__aeabi_ddiv+0x48e>
 8001308:	e0c1      	b.n	800148e <__aeabi_ddiv+0x612>
 800130a:	000a      	movs	r2, r1
 800130c:	e6f0      	b.n	80010f0 <__aeabi_ddiv+0x274>
 800130e:	4542      	cmp	r2, r8
 8001310:	d900      	bls.n	8001314 <__aeabi_ddiv+0x498>
 8001312:	e62c      	b.n	8000f6e <__aeabi_ddiv+0xf2>
 8001314:	464b      	mov	r3, r9
 8001316:	07dc      	lsls	r4, r3, #31
 8001318:	0858      	lsrs	r0, r3, #1
 800131a:	4643      	mov	r3, r8
 800131c:	085b      	lsrs	r3, r3, #1
 800131e:	431c      	orrs	r4, r3
 8001320:	4643      	mov	r3, r8
 8001322:	07df      	lsls	r7, r3, #31
 8001324:	e62a      	b.n	8000f7c <__aeabi_ddiv+0x100>
 8001326:	f001 f949 	bl	80025bc <__clzsi2>
 800132a:	2315      	movs	r3, #21
 800132c:	469c      	mov	ip, r3
 800132e:	4484      	add	ip, r0
 8001330:	0002      	movs	r2, r0
 8001332:	4663      	mov	r3, ip
 8001334:	3220      	adds	r2, #32
 8001336:	2b1c      	cmp	r3, #28
 8001338:	dc00      	bgt.n	800133c <__aeabi_ddiv+0x4c0>
 800133a:	e72e      	b.n	800119a <__aeabi_ddiv+0x31e>
 800133c:	0023      	movs	r3, r4
 800133e:	3808      	subs	r0, #8
 8001340:	4083      	lsls	r3, r0
 8001342:	4699      	mov	r9, r3
 8001344:	2300      	movs	r3, #0
 8001346:	4698      	mov	r8, r3
 8001348:	e736      	b.n	80011b8 <__aeabi_ddiv+0x33c>
 800134a:	f001 f937 	bl	80025bc <__clzsi2>
 800134e:	0002      	movs	r2, r0
 8001350:	0003      	movs	r3, r0
 8001352:	3215      	adds	r2, #21
 8001354:	3320      	adds	r3, #32
 8001356:	2a1c      	cmp	r2, #28
 8001358:	dc00      	bgt.n	800135c <__aeabi_ddiv+0x4e0>
 800135a:	e6fb      	b.n	8001154 <__aeabi_ddiv+0x2d8>
 800135c:	9900      	ldr	r1, [sp, #0]
 800135e:	3808      	subs	r0, #8
 8001360:	4081      	lsls	r1, r0
 8001362:	2200      	movs	r2, #0
 8001364:	468b      	mov	fp, r1
 8001366:	e702      	b.n	800116e <__aeabi_ddiv+0x2f2>
 8001368:	9900      	ldr	r1, [sp, #0]
 800136a:	3b01      	subs	r3, #1
 800136c:	468c      	mov	ip, r1
 800136e:	4464      	add	r4, ip
 8001370:	42a1      	cmp	r1, r4
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fa>
 8001374:	e69a      	b.n	80010ac <__aeabi_ddiv+0x230>
 8001376:	42a2      	cmp	r2, r4
 8001378:	d800      	bhi.n	800137c <__aeabi_ddiv+0x500>
 800137a:	e697      	b.n	80010ac <__aeabi_ddiv+0x230>
 800137c:	1e83      	subs	r3, r0, #2
 800137e:	4464      	add	r4, ip
 8001380:	e694      	b.n	80010ac <__aeabi_ddiv+0x230>
 8001382:	46ac      	mov	ip, r5
 8001384:	4461      	add	r1, ip
 8001386:	3f01      	subs	r7, #1
 8001388:	428d      	cmp	r5, r1
 800138a:	d900      	bls.n	800138e <__aeabi_ddiv+0x512>
 800138c:	e680      	b.n	8001090 <__aeabi_ddiv+0x214>
 800138e:	428a      	cmp	r2, r1
 8001390:	d800      	bhi.n	8001394 <__aeabi_ddiv+0x518>
 8001392:	e67d      	b.n	8001090 <__aeabi_ddiv+0x214>
 8001394:	1e87      	subs	r7, r0, #2
 8001396:	4461      	add	r1, ip
 8001398:	e67a      	b.n	8001090 <__aeabi_ddiv+0x214>
 800139a:	4285      	cmp	r5, r0
 800139c:	d000      	beq.n	80013a0 <__aeabi_ddiv+0x524>
 800139e:	e65f      	b.n	8001060 <__aeabi_ddiv+0x1e4>
 80013a0:	45b9      	cmp	r9, r7
 80013a2:	d900      	bls.n	80013a6 <__aeabi_ddiv+0x52a>
 80013a4:	e65c      	b.n	8001060 <__aeabi_ddiv+0x1e4>
 80013a6:	e656      	b.n	8001056 <__aeabi_ddiv+0x1da>
 80013a8:	42a2      	cmp	r2, r4
 80013aa:	d800      	bhi.n	80013ae <__aeabi_ddiv+0x532>
 80013ac:	e61a      	b.n	8000fe4 <__aeabi_ddiv+0x168>
 80013ae:	1e83      	subs	r3, r0, #2
 80013b0:	4464      	add	r4, ip
 80013b2:	e617      	b.n	8000fe4 <__aeabi_ddiv+0x168>
 80013b4:	428a      	cmp	r2, r1
 80013b6:	d800      	bhi.n	80013ba <__aeabi_ddiv+0x53e>
 80013b8:	e600      	b.n	8000fbc <__aeabi_ddiv+0x140>
 80013ba:	46ac      	mov	ip, r5
 80013bc:	1e83      	subs	r3, r0, #2
 80013be:	4698      	mov	r8, r3
 80013c0:	4461      	add	r1, ip
 80013c2:	e5fb      	b.n	8000fbc <__aeabi_ddiv+0x140>
 80013c4:	4837      	ldr	r0, [pc, #220]	@ (80014a4 <__aeabi_ddiv+0x628>)
 80013c6:	0014      	movs	r4, r2
 80013c8:	4450      	add	r0, sl
 80013ca:	4082      	lsls	r2, r0
 80013cc:	465b      	mov	r3, fp
 80013ce:	0017      	movs	r7, r2
 80013d0:	4083      	lsls	r3, r0
 80013d2:	40cc      	lsrs	r4, r1
 80013d4:	1e7a      	subs	r2, r7, #1
 80013d6:	4197      	sbcs	r7, r2
 80013d8:	4323      	orrs	r3, r4
 80013da:	433b      	orrs	r3, r7
 80013dc:	001a      	movs	r2, r3
 80013de:	465b      	mov	r3, fp
 80013e0:	40cb      	lsrs	r3, r1
 80013e2:	0751      	lsls	r1, r2, #29
 80013e4:	d009      	beq.n	80013fa <__aeabi_ddiv+0x57e>
 80013e6:	210f      	movs	r1, #15
 80013e8:	4011      	ands	r1, r2
 80013ea:	2904      	cmp	r1, #4
 80013ec:	d005      	beq.n	80013fa <__aeabi_ddiv+0x57e>
 80013ee:	1d11      	adds	r1, r2, #4
 80013f0:	4291      	cmp	r1, r2
 80013f2:	4192      	sbcs	r2, r2
 80013f4:	4252      	negs	r2, r2
 80013f6:	189b      	adds	r3, r3, r2
 80013f8:	000a      	movs	r2, r1
 80013fa:	0219      	lsls	r1, r3, #8
 80013fc:	d400      	bmi.n	8001400 <__aeabi_ddiv+0x584>
 80013fe:	e755      	b.n	80012ac <__aeabi_ddiv+0x430>
 8001400:	2200      	movs	r2, #0
 8001402:	2301      	movs	r3, #1
 8001404:	2400      	movs	r4, #0
 8001406:	4690      	mov	r8, r2
 8001408:	e598      	b.n	8000f3c <__aeabi_ddiv+0xc0>
 800140a:	000a      	movs	r2, r1
 800140c:	42bc      	cmp	r4, r7
 800140e:	d000      	beq.n	8001412 <__aeabi_ddiv+0x596>
 8001410:	e66e      	b.n	80010f0 <__aeabi_ddiv+0x274>
 8001412:	454b      	cmp	r3, r9
 8001414:	d000      	beq.n	8001418 <__aeabi_ddiv+0x59c>
 8001416:	e66b      	b.n	80010f0 <__aeabi_ddiv+0x274>
 8001418:	e66c      	b.n	80010f4 <__aeabi_ddiv+0x278>
 800141a:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <__aeabi_ddiv+0x62c>)
 800141c:	4a23      	ldr	r2, [pc, #140]	@ (80014ac <__aeabi_ddiv+0x630>)
 800141e:	4453      	add	r3, sl
 8001420:	4592      	cmp	sl, r2
 8001422:	da00      	bge.n	8001426 <__aeabi_ddiv+0x5aa>
 8001424:	e718      	b.n	8001258 <__aeabi_ddiv+0x3dc>
 8001426:	2101      	movs	r1, #1
 8001428:	4249      	negs	r1, r1
 800142a:	1d0a      	adds	r2, r1, #4
 800142c:	428a      	cmp	r2, r1
 800142e:	4189      	sbcs	r1, r1
 8001430:	4249      	negs	r1, r1
 8001432:	448b      	add	fp, r1
 8001434:	e666      	b.n	8001104 <__aeabi_ddiv+0x288>
 8001436:	210f      	movs	r1, #15
 8001438:	4011      	ands	r1, r2
 800143a:	2904      	cmp	r1, #4
 800143c:	d100      	bne.n	8001440 <__aeabi_ddiv+0x5c4>
 800143e:	e661      	b.n	8001104 <__aeabi_ddiv+0x288>
 8001440:	0011      	movs	r1, r2
 8001442:	e7f2      	b.n	800142a <__aeabi_ddiv+0x5ae>
 8001444:	42bc      	cmp	r4, r7
 8001446:	d800      	bhi.n	800144a <__aeabi_ddiv+0x5ce>
 8001448:	e60a      	b.n	8001060 <__aeabi_ddiv+0x1e4>
 800144a:	2302      	movs	r3, #2
 800144c:	425b      	negs	r3, r3
 800144e:	469c      	mov	ip, r3
 8001450:	9900      	ldr	r1, [sp, #0]
 8001452:	444f      	add	r7, r9
 8001454:	454f      	cmp	r7, r9
 8001456:	419b      	sbcs	r3, r3
 8001458:	44e3      	add	fp, ip
 800145a:	468c      	mov	ip, r1
 800145c:	425b      	negs	r3, r3
 800145e:	4463      	add	r3, ip
 8001460:	18c0      	adds	r0, r0, r3
 8001462:	e5ff      	b.n	8001064 <__aeabi_ddiv+0x1e8>
 8001464:	4649      	mov	r1, r9
 8001466:	9d00      	ldr	r5, [sp, #0]
 8001468:	0048      	lsls	r0, r1, #1
 800146a:	4548      	cmp	r0, r9
 800146c:	4189      	sbcs	r1, r1
 800146e:	46ac      	mov	ip, r5
 8001470:	4249      	negs	r1, r1
 8001472:	4461      	add	r1, ip
 8001474:	4681      	mov	r9, r0
 8001476:	3a02      	subs	r2, #2
 8001478:	1864      	adds	r4, r4, r1
 800147a:	e7c7      	b.n	800140c <__aeabi_ddiv+0x590>
 800147c:	2480      	movs	r4, #128	@ 0x80
 800147e:	465b      	mov	r3, fp
 8001480:	0324      	lsls	r4, r4, #12
 8001482:	431c      	orrs	r4, r3
 8001484:	0324      	lsls	r4, r4, #12
 8001486:	4690      	mov	r8, r2
 8001488:	4b04      	ldr	r3, [pc, #16]	@ (800149c <__aeabi_ddiv+0x620>)
 800148a:	0b24      	lsrs	r4, r4, #12
 800148c:	e556      	b.n	8000f3c <__aeabi_ddiv+0xc0>
 800148e:	4599      	cmp	r9, r3
 8001490:	d3e8      	bcc.n	8001464 <__aeabi_ddiv+0x5e8>
 8001492:	000a      	movs	r2, r1
 8001494:	e7bd      	b.n	8001412 <__aeabi_ddiv+0x596>
 8001496:	2300      	movs	r3, #0
 8001498:	e708      	b.n	80012ac <__aeabi_ddiv+0x430>
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	000007ff 	.word	0x000007ff
 80014a0:	0000043e 	.word	0x0000043e
 80014a4:	0000041e 	.word	0x0000041e
 80014a8:	000003ff 	.word	0x000003ff
 80014ac:	fffffc02 	.word	0xfffffc02

080014b0 <__eqdf2>:
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b2:	4657      	mov	r7, sl
 80014b4:	46de      	mov	lr, fp
 80014b6:	464e      	mov	r6, r9
 80014b8:	4645      	mov	r5, r8
 80014ba:	b5e0      	push	{r5, r6, r7, lr}
 80014bc:	000d      	movs	r5, r1
 80014be:	0004      	movs	r4, r0
 80014c0:	0fe8      	lsrs	r0, r5, #31
 80014c2:	4683      	mov	fp, r0
 80014c4:	0309      	lsls	r1, r1, #12
 80014c6:	0fd8      	lsrs	r0, r3, #31
 80014c8:	0b09      	lsrs	r1, r1, #12
 80014ca:	4682      	mov	sl, r0
 80014cc:	4819      	ldr	r0, [pc, #100]	@ (8001534 <__eqdf2+0x84>)
 80014ce:	468c      	mov	ip, r1
 80014d0:	031f      	lsls	r7, r3, #12
 80014d2:	0069      	lsls	r1, r5, #1
 80014d4:	005e      	lsls	r6, r3, #1
 80014d6:	0d49      	lsrs	r1, r1, #21
 80014d8:	0b3f      	lsrs	r7, r7, #12
 80014da:	0d76      	lsrs	r6, r6, #21
 80014dc:	4281      	cmp	r1, r0
 80014de:	d018      	beq.n	8001512 <__eqdf2+0x62>
 80014e0:	4286      	cmp	r6, r0
 80014e2:	d00f      	beq.n	8001504 <__eqdf2+0x54>
 80014e4:	2001      	movs	r0, #1
 80014e6:	42b1      	cmp	r1, r6
 80014e8:	d10d      	bne.n	8001506 <__eqdf2+0x56>
 80014ea:	45bc      	cmp	ip, r7
 80014ec:	d10b      	bne.n	8001506 <__eqdf2+0x56>
 80014ee:	4294      	cmp	r4, r2
 80014f0:	d109      	bne.n	8001506 <__eqdf2+0x56>
 80014f2:	45d3      	cmp	fp, sl
 80014f4:	d01c      	beq.n	8001530 <__eqdf2+0x80>
 80014f6:	2900      	cmp	r1, #0
 80014f8:	d105      	bne.n	8001506 <__eqdf2+0x56>
 80014fa:	4660      	mov	r0, ip
 80014fc:	4320      	orrs	r0, r4
 80014fe:	1e43      	subs	r3, r0, #1
 8001500:	4198      	sbcs	r0, r3
 8001502:	e000      	b.n	8001506 <__eqdf2+0x56>
 8001504:	2001      	movs	r0, #1
 8001506:	bcf0      	pop	{r4, r5, r6, r7}
 8001508:	46bb      	mov	fp, r7
 800150a:	46b2      	mov	sl, r6
 800150c:	46a9      	mov	r9, r5
 800150e:	46a0      	mov	r8, r4
 8001510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001512:	2001      	movs	r0, #1
 8001514:	428e      	cmp	r6, r1
 8001516:	d1f6      	bne.n	8001506 <__eqdf2+0x56>
 8001518:	4661      	mov	r1, ip
 800151a:	4339      	orrs	r1, r7
 800151c:	000f      	movs	r7, r1
 800151e:	4317      	orrs	r7, r2
 8001520:	4327      	orrs	r7, r4
 8001522:	d1f0      	bne.n	8001506 <__eqdf2+0x56>
 8001524:	465b      	mov	r3, fp
 8001526:	4652      	mov	r2, sl
 8001528:	1a98      	subs	r0, r3, r2
 800152a:	1e43      	subs	r3, r0, #1
 800152c:	4198      	sbcs	r0, r3
 800152e:	e7ea      	b.n	8001506 <__eqdf2+0x56>
 8001530:	2000      	movs	r0, #0
 8001532:	e7e8      	b.n	8001506 <__eqdf2+0x56>
 8001534:	000007ff 	.word	0x000007ff

08001538 <__gedf2>:
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153a:	4657      	mov	r7, sl
 800153c:	464e      	mov	r6, r9
 800153e:	4645      	mov	r5, r8
 8001540:	46de      	mov	lr, fp
 8001542:	b5e0      	push	{r5, r6, r7, lr}
 8001544:	000d      	movs	r5, r1
 8001546:	030f      	lsls	r7, r1, #12
 8001548:	0b39      	lsrs	r1, r7, #12
 800154a:	b083      	sub	sp, #12
 800154c:	0004      	movs	r4, r0
 800154e:	4680      	mov	r8, r0
 8001550:	9101      	str	r1, [sp, #4]
 8001552:	0058      	lsls	r0, r3, #1
 8001554:	0fe9      	lsrs	r1, r5, #31
 8001556:	4f31      	ldr	r7, [pc, #196]	@ (800161c <__gedf2+0xe4>)
 8001558:	0d40      	lsrs	r0, r0, #21
 800155a:	468c      	mov	ip, r1
 800155c:	006e      	lsls	r6, r5, #1
 800155e:	0319      	lsls	r1, r3, #12
 8001560:	4682      	mov	sl, r0
 8001562:	4691      	mov	r9, r2
 8001564:	0d76      	lsrs	r6, r6, #21
 8001566:	0b09      	lsrs	r1, r1, #12
 8001568:	0fd8      	lsrs	r0, r3, #31
 800156a:	42be      	cmp	r6, r7
 800156c:	d01f      	beq.n	80015ae <__gedf2+0x76>
 800156e:	45ba      	cmp	sl, r7
 8001570:	d00f      	beq.n	8001592 <__gedf2+0x5a>
 8001572:	2e00      	cmp	r6, #0
 8001574:	d12f      	bne.n	80015d6 <__gedf2+0x9e>
 8001576:	4655      	mov	r5, sl
 8001578:	9e01      	ldr	r6, [sp, #4]
 800157a:	4334      	orrs	r4, r6
 800157c:	2d00      	cmp	r5, #0
 800157e:	d127      	bne.n	80015d0 <__gedf2+0x98>
 8001580:	430a      	orrs	r2, r1
 8001582:	d03a      	beq.n	80015fa <__gedf2+0xc2>
 8001584:	2c00      	cmp	r4, #0
 8001586:	d145      	bne.n	8001614 <__gedf2+0xdc>
 8001588:	2800      	cmp	r0, #0
 800158a:	d11a      	bne.n	80015c2 <__gedf2+0x8a>
 800158c:	2001      	movs	r0, #1
 800158e:	4240      	negs	r0, r0
 8001590:	e017      	b.n	80015c2 <__gedf2+0x8a>
 8001592:	4311      	orrs	r1, r2
 8001594:	d13b      	bne.n	800160e <__gedf2+0xd6>
 8001596:	2e00      	cmp	r6, #0
 8001598:	d102      	bne.n	80015a0 <__gedf2+0x68>
 800159a:	9f01      	ldr	r7, [sp, #4]
 800159c:	4327      	orrs	r7, r4
 800159e:	d0f3      	beq.n	8001588 <__gedf2+0x50>
 80015a0:	4584      	cmp	ip, r0
 80015a2:	d109      	bne.n	80015b8 <__gedf2+0x80>
 80015a4:	4663      	mov	r3, ip
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <__gedf2+0x54>
 80015aa:	4660      	mov	r0, ip
 80015ac:	e009      	b.n	80015c2 <__gedf2+0x8a>
 80015ae:	9f01      	ldr	r7, [sp, #4]
 80015b0:	4327      	orrs	r7, r4
 80015b2:	d12c      	bne.n	800160e <__gedf2+0xd6>
 80015b4:	45b2      	cmp	sl, r6
 80015b6:	d024      	beq.n	8001602 <__gedf2+0xca>
 80015b8:	4663      	mov	r3, ip
 80015ba:	2002      	movs	r0, #2
 80015bc:	3b01      	subs	r3, #1
 80015be:	4018      	ands	r0, r3
 80015c0:	3801      	subs	r0, #1
 80015c2:	b003      	add	sp, #12
 80015c4:	bcf0      	pop	{r4, r5, r6, r7}
 80015c6:	46bb      	mov	fp, r7
 80015c8:	46b2      	mov	sl, r6
 80015ca:	46a9      	mov	r9, r5
 80015cc:	46a0      	mov	r8, r4
 80015ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d0:	2c00      	cmp	r4, #0
 80015d2:	d0d9      	beq.n	8001588 <__gedf2+0x50>
 80015d4:	e7e4      	b.n	80015a0 <__gedf2+0x68>
 80015d6:	4654      	mov	r4, sl
 80015d8:	2c00      	cmp	r4, #0
 80015da:	d0ed      	beq.n	80015b8 <__gedf2+0x80>
 80015dc:	4584      	cmp	ip, r0
 80015de:	d1eb      	bne.n	80015b8 <__gedf2+0x80>
 80015e0:	4556      	cmp	r6, sl
 80015e2:	dce9      	bgt.n	80015b8 <__gedf2+0x80>
 80015e4:	dbde      	blt.n	80015a4 <__gedf2+0x6c>
 80015e6:	9b01      	ldr	r3, [sp, #4]
 80015e8:	428b      	cmp	r3, r1
 80015ea:	d8e5      	bhi.n	80015b8 <__gedf2+0x80>
 80015ec:	d1da      	bne.n	80015a4 <__gedf2+0x6c>
 80015ee:	45c8      	cmp	r8, r9
 80015f0:	d8e2      	bhi.n	80015b8 <__gedf2+0x80>
 80015f2:	2000      	movs	r0, #0
 80015f4:	45c8      	cmp	r8, r9
 80015f6:	d2e4      	bcs.n	80015c2 <__gedf2+0x8a>
 80015f8:	e7d4      	b.n	80015a4 <__gedf2+0x6c>
 80015fa:	2000      	movs	r0, #0
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d0e0      	beq.n	80015c2 <__gedf2+0x8a>
 8001600:	e7da      	b.n	80015b8 <__gedf2+0x80>
 8001602:	4311      	orrs	r1, r2
 8001604:	d103      	bne.n	800160e <__gedf2+0xd6>
 8001606:	4584      	cmp	ip, r0
 8001608:	d1d6      	bne.n	80015b8 <__gedf2+0x80>
 800160a:	2000      	movs	r0, #0
 800160c:	e7d9      	b.n	80015c2 <__gedf2+0x8a>
 800160e:	2002      	movs	r0, #2
 8001610:	4240      	negs	r0, r0
 8001612:	e7d6      	b.n	80015c2 <__gedf2+0x8a>
 8001614:	4584      	cmp	ip, r0
 8001616:	d0e6      	beq.n	80015e6 <__gedf2+0xae>
 8001618:	e7ce      	b.n	80015b8 <__gedf2+0x80>
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	000007ff 	.word	0x000007ff

08001620 <__ledf2>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	464e      	mov	r6, r9
 8001626:	4645      	mov	r5, r8
 8001628:	46de      	mov	lr, fp
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	000d      	movs	r5, r1
 800162e:	030f      	lsls	r7, r1, #12
 8001630:	0004      	movs	r4, r0
 8001632:	4680      	mov	r8, r0
 8001634:	0fe8      	lsrs	r0, r5, #31
 8001636:	0b39      	lsrs	r1, r7, #12
 8001638:	4684      	mov	ip, r0
 800163a:	b083      	sub	sp, #12
 800163c:	0058      	lsls	r0, r3, #1
 800163e:	4f30      	ldr	r7, [pc, #192]	@ (8001700 <__ledf2+0xe0>)
 8001640:	0d40      	lsrs	r0, r0, #21
 8001642:	9101      	str	r1, [sp, #4]
 8001644:	031e      	lsls	r6, r3, #12
 8001646:	0069      	lsls	r1, r5, #1
 8001648:	4682      	mov	sl, r0
 800164a:	4691      	mov	r9, r2
 800164c:	0d49      	lsrs	r1, r1, #21
 800164e:	0b36      	lsrs	r6, r6, #12
 8001650:	0fd8      	lsrs	r0, r3, #31
 8001652:	42b9      	cmp	r1, r7
 8001654:	d020      	beq.n	8001698 <__ledf2+0x78>
 8001656:	45ba      	cmp	sl, r7
 8001658:	d00f      	beq.n	800167a <__ledf2+0x5a>
 800165a:	2900      	cmp	r1, #0
 800165c:	d12b      	bne.n	80016b6 <__ledf2+0x96>
 800165e:	9901      	ldr	r1, [sp, #4]
 8001660:	430c      	orrs	r4, r1
 8001662:	4651      	mov	r1, sl
 8001664:	2900      	cmp	r1, #0
 8001666:	d137      	bne.n	80016d8 <__ledf2+0xb8>
 8001668:	4332      	orrs	r2, r6
 800166a:	d038      	beq.n	80016de <__ledf2+0xbe>
 800166c:	2c00      	cmp	r4, #0
 800166e:	d144      	bne.n	80016fa <__ledf2+0xda>
 8001670:	2800      	cmp	r0, #0
 8001672:	d119      	bne.n	80016a8 <__ledf2+0x88>
 8001674:	2001      	movs	r0, #1
 8001676:	4240      	negs	r0, r0
 8001678:	e016      	b.n	80016a8 <__ledf2+0x88>
 800167a:	4316      	orrs	r6, r2
 800167c:	d113      	bne.n	80016a6 <__ledf2+0x86>
 800167e:	2900      	cmp	r1, #0
 8001680:	d102      	bne.n	8001688 <__ledf2+0x68>
 8001682:	9f01      	ldr	r7, [sp, #4]
 8001684:	4327      	orrs	r7, r4
 8001686:	d0f3      	beq.n	8001670 <__ledf2+0x50>
 8001688:	4584      	cmp	ip, r0
 800168a:	d020      	beq.n	80016ce <__ledf2+0xae>
 800168c:	4663      	mov	r3, ip
 800168e:	2002      	movs	r0, #2
 8001690:	3b01      	subs	r3, #1
 8001692:	4018      	ands	r0, r3
 8001694:	3801      	subs	r0, #1
 8001696:	e007      	b.n	80016a8 <__ledf2+0x88>
 8001698:	9f01      	ldr	r7, [sp, #4]
 800169a:	4327      	orrs	r7, r4
 800169c:	d103      	bne.n	80016a6 <__ledf2+0x86>
 800169e:	458a      	cmp	sl, r1
 80016a0:	d1f4      	bne.n	800168c <__ledf2+0x6c>
 80016a2:	4316      	orrs	r6, r2
 80016a4:	d01f      	beq.n	80016e6 <__ledf2+0xc6>
 80016a6:	2002      	movs	r0, #2
 80016a8:	b003      	add	sp, #12
 80016aa:	bcf0      	pop	{r4, r5, r6, r7}
 80016ac:	46bb      	mov	fp, r7
 80016ae:	46b2      	mov	sl, r6
 80016b0:	46a9      	mov	r9, r5
 80016b2:	46a0      	mov	r8, r4
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b6:	4654      	mov	r4, sl
 80016b8:	2c00      	cmp	r4, #0
 80016ba:	d0e7      	beq.n	800168c <__ledf2+0x6c>
 80016bc:	4584      	cmp	ip, r0
 80016be:	d1e5      	bne.n	800168c <__ledf2+0x6c>
 80016c0:	4551      	cmp	r1, sl
 80016c2:	dce3      	bgt.n	800168c <__ledf2+0x6c>
 80016c4:	db03      	blt.n	80016ce <__ledf2+0xae>
 80016c6:	9b01      	ldr	r3, [sp, #4]
 80016c8:	42b3      	cmp	r3, r6
 80016ca:	d8df      	bhi.n	800168c <__ledf2+0x6c>
 80016cc:	d00f      	beq.n	80016ee <__ledf2+0xce>
 80016ce:	4663      	mov	r3, ip
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0cf      	beq.n	8001674 <__ledf2+0x54>
 80016d4:	4660      	mov	r0, ip
 80016d6:	e7e7      	b.n	80016a8 <__ledf2+0x88>
 80016d8:	2c00      	cmp	r4, #0
 80016da:	d0c9      	beq.n	8001670 <__ledf2+0x50>
 80016dc:	e7d4      	b.n	8001688 <__ledf2+0x68>
 80016de:	2000      	movs	r0, #0
 80016e0:	2c00      	cmp	r4, #0
 80016e2:	d0e1      	beq.n	80016a8 <__ledf2+0x88>
 80016e4:	e7d2      	b.n	800168c <__ledf2+0x6c>
 80016e6:	4584      	cmp	ip, r0
 80016e8:	d1d0      	bne.n	800168c <__ledf2+0x6c>
 80016ea:	2000      	movs	r0, #0
 80016ec:	e7dc      	b.n	80016a8 <__ledf2+0x88>
 80016ee:	45c8      	cmp	r8, r9
 80016f0:	d8cc      	bhi.n	800168c <__ledf2+0x6c>
 80016f2:	2000      	movs	r0, #0
 80016f4:	45c8      	cmp	r8, r9
 80016f6:	d2d7      	bcs.n	80016a8 <__ledf2+0x88>
 80016f8:	e7e9      	b.n	80016ce <__ledf2+0xae>
 80016fa:	4584      	cmp	ip, r0
 80016fc:	d0e3      	beq.n	80016c6 <__ledf2+0xa6>
 80016fe:	e7c5      	b.n	800168c <__ledf2+0x6c>
 8001700:	000007ff 	.word	0x000007ff

08001704 <__aeabi_dmul>:
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	4657      	mov	r7, sl
 8001708:	46de      	mov	lr, fp
 800170a:	464e      	mov	r6, r9
 800170c:	4645      	mov	r5, r8
 800170e:	b5e0      	push	{r5, r6, r7, lr}
 8001710:	001f      	movs	r7, r3
 8001712:	030b      	lsls	r3, r1, #12
 8001714:	0b1b      	lsrs	r3, r3, #12
 8001716:	0016      	movs	r6, r2
 8001718:	469a      	mov	sl, r3
 800171a:	0fca      	lsrs	r2, r1, #31
 800171c:	004b      	lsls	r3, r1, #1
 800171e:	0004      	movs	r4, r0
 8001720:	4693      	mov	fp, r2
 8001722:	b087      	sub	sp, #28
 8001724:	0d5b      	lsrs	r3, r3, #21
 8001726:	d100      	bne.n	800172a <__aeabi_dmul+0x26>
 8001728:	e0d5      	b.n	80018d6 <__aeabi_dmul+0x1d2>
 800172a:	4abb      	ldr	r2, [pc, #748]	@ (8001a18 <__aeabi_dmul+0x314>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d100      	bne.n	8001732 <__aeabi_dmul+0x2e>
 8001730:	e0f8      	b.n	8001924 <__aeabi_dmul+0x220>
 8001732:	4651      	mov	r1, sl
 8001734:	0f42      	lsrs	r2, r0, #29
 8001736:	00c9      	lsls	r1, r1, #3
 8001738:	430a      	orrs	r2, r1
 800173a:	2180      	movs	r1, #128	@ 0x80
 800173c:	0409      	lsls	r1, r1, #16
 800173e:	4311      	orrs	r1, r2
 8001740:	00c2      	lsls	r2, r0, #3
 8001742:	4691      	mov	r9, r2
 8001744:	4ab5      	ldr	r2, [pc, #724]	@ (8001a1c <__aeabi_dmul+0x318>)
 8001746:	468a      	mov	sl, r1
 8001748:	189d      	adds	r5, r3, r2
 800174a:	2300      	movs	r3, #0
 800174c:	4698      	mov	r8, r3
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	033c      	lsls	r4, r7, #12
 8001752:	007b      	lsls	r3, r7, #1
 8001754:	0ffa      	lsrs	r2, r7, #31
 8001756:	0030      	movs	r0, r6
 8001758:	0b24      	lsrs	r4, r4, #12
 800175a:	0d5b      	lsrs	r3, r3, #21
 800175c:	9200      	str	r2, [sp, #0]
 800175e:	d100      	bne.n	8001762 <__aeabi_dmul+0x5e>
 8001760:	e096      	b.n	8001890 <__aeabi_dmul+0x18c>
 8001762:	4aad      	ldr	r2, [pc, #692]	@ (8001a18 <__aeabi_dmul+0x314>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d031      	beq.n	80017cc <__aeabi_dmul+0xc8>
 8001768:	0f72      	lsrs	r2, r6, #29
 800176a:	00e4      	lsls	r4, r4, #3
 800176c:	4322      	orrs	r2, r4
 800176e:	2480      	movs	r4, #128	@ 0x80
 8001770:	0424      	lsls	r4, r4, #16
 8001772:	4314      	orrs	r4, r2
 8001774:	4aa9      	ldr	r2, [pc, #676]	@ (8001a1c <__aeabi_dmul+0x318>)
 8001776:	00f0      	lsls	r0, r6, #3
 8001778:	4694      	mov	ip, r2
 800177a:	4463      	add	r3, ip
 800177c:	195b      	adds	r3, r3, r5
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	9201      	str	r2, [sp, #4]
 8001782:	4642      	mov	r2, r8
 8001784:	2600      	movs	r6, #0
 8001786:	2a0a      	cmp	r2, #10
 8001788:	dc42      	bgt.n	8001810 <__aeabi_dmul+0x10c>
 800178a:	465a      	mov	r2, fp
 800178c:	9900      	ldr	r1, [sp, #0]
 800178e:	404a      	eors	r2, r1
 8001790:	4693      	mov	fp, r2
 8001792:	4642      	mov	r2, r8
 8001794:	2a02      	cmp	r2, #2
 8001796:	dc32      	bgt.n	80017fe <__aeabi_dmul+0xfa>
 8001798:	3a01      	subs	r2, #1
 800179a:	2a01      	cmp	r2, #1
 800179c:	d900      	bls.n	80017a0 <__aeabi_dmul+0x9c>
 800179e:	e149      	b.n	8001a34 <__aeabi_dmul+0x330>
 80017a0:	2e02      	cmp	r6, #2
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dmul+0xa2>
 80017a4:	e0ca      	b.n	800193c <__aeabi_dmul+0x238>
 80017a6:	2e01      	cmp	r6, #1
 80017a8:	d13d      	bne.n	8001826 <__aeabi_dmul+0x122>
 80017aa:	2300      	movs	r3, #0
 80017ac:	2400      	movs	r4, #0
 80017ae:	2200      	movs	r2, #0
 80017b0:	0010      	movs	r0, r2
 80017b2:	465a      	mov	r2, fp
 80017b4:	051b      	lsls	r3, r3, #20
 80017b6:	4323      	orrs	r3, r4
 80017b8:	07d2      	lsls	r2, r2, #31
 80017ba:	4313      	orrs	r3, r2
 80017bc:	0019      	movs	r1, r3
 80017be:	b007      	add	sp, #28
 80017c0:	bcf0      	pop	{r4, r5, r6, r7}
 80017c2:	46bb      	mov	fp, r7
 80017c4:	46b2      	mov	sl, r6
 80017c6:	46a9      	mov	r9, r5
 80017c8:	46a0      	mov	r8, r4
 80017ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017cc:	4b92      	ldr	r3, [pc, #584]	@ (8001a18 <__aeabi_dmul+0x314>)
 80017ce:	4326      	orrs	r6, r4
 80017d0:	18eb      	adds	r3, r5, r3
 80017d2:	2e00      	cmp	r6, #0
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dmul+0xd4>
 80017d6:	e0bb      	b.n	8001950 <__aeabi_dmul+0x24c>
 80017d8:	2203      	movs	r2, #3
 80017da:	4641      	mov	r1, r8
 80017dc:	4311      	orrs	r1, r2
 80017de:	465a      	mov	r2, fp
 80017e0:	4688      	mov	r8, r1
 80017e2:	9900      	ldr	r1, [sp, #0]
 80017e4:	404a      	eors	r2, r1
 80017e6:	2180      	movs	r1, #128	@ 0x80
 80017e8:	0109      	lsls	r1, r1, #4
 80017ea:	468c      	mov	ip, r1
 80017ec:	0029      	movs	r1, r5
 80017ee:	4461      	add	r1, ip
 80017f0:	9101      	str	r1, [sp, #4]
 80017f2:	4641      	mov	r1, r8
 80017f4:	290a      	cmp	r1, #10
 80017f6:	dd00      	ble.n	80017fa <__aeabi_dmul+0xf6>
 80017f8:	e233      	b.n	8001c62 <__aeabi_dmul+0x55e>
 80017fa:	4693      	mov	fp, r2
 80017fc:	2603      	movs	r6, #3
 80017fe:	4642      	mov	r2, r8
 8001800:	2701      	movs	r7, #1
 8001802:	4097      	lsls	r7, r2
 8001804:	21a6      	movs	r1, #166	@ 0xa6
 8001806:	003a      	movs	r2, r7
 8001808:	00c9      	lsls	r1, r1, #3
 800180a:	400a      	ands	r2, r1
 800180c:	420f      	tst	r7, r1
 800180e:	d031      	beq.n	8001874 <__aeabi_dmul+0x170>
 8001810:	9e02      	ldr	r6, [sp, #8]
 8001812:	2e02      	cmp	r6, #2
 8001814:	d100      	bne.n	8001818 <__aeabi_dmul+0x114>
 8001816:	e235      	b.n	8001c84 <__aeabi_dmul+0x580>
 8001818:	2e03      	cmp	r6, #3
 800181a:	d100      	bne.n	800181e <__aeabi_dmul+0x11a>
 800181c:	e1d2      	b.n	8001bc4 <__aeabi_dmul+0x4c0>
 800181e:	4654      	mov	r4, sl
 8001820:	4648      	mov	r0, r9
 8001822:	2e01      	cmp	r6, #1
 8001824:	d0c1      	beq.n	80017aa <__aeabi_dmul+0xa6>
 8001826:	9a01      	ldr	r2, [sp, #4]
 8001828:	4b7d      	ldr	r3, [pc, #500]	@ (8001a20 <__aeabi_dmul+0x31c>)
 800182a:	4694      	mov	ip, r2
 800182c:	4463      	add	r3, ip
 800182e:	2b00      	cmp	r3, #0
 8001830:	dc00      	bgt.n	8001834 <__aeabi_dmul+0x130>
 8001832:	e0c0      	b.n	80019b6 <__aeabi_dmul+0x2b2>
 8001834:	0742      	lsls	r2, r0, #29
 8001836:	d009      	beq.n	800184c <__aeabi_dmul+0x148>
 8001838:	220f      	movs	r2, #15
 800183a:	4002      	ands	r2, r0
 800183c:	2a04      	cmp	r2, #4
 800183e:	d005      	beq.n	800184c <__aeabi_dmul+0x148>
 8001840:	1d02      	adds	r2, r0, #4
 8001842:	4282      	cmp	r2, r0
 8001844:	4180      	sbcs	r0, r0
 8001846:	4240      	negs	r0, r0
 8001848:	1824      	adds	r4, r4, r0
 800184a:	0010      	movs	r0, r2
 800184c:	01e2      	lsls	r2, r4, #7
 800184e:	d506      	bpl.n	800185e <__aeabi_dmul+0x15a>
 8001850:	4b74      	ldr	r3, [pc, #464]	@ (8001a24 <__aeabi_dmul+0x320>)
 8001852:	9a01      	ldr	r2, [sp, #4]
 8001854:	401c      	ands	r4, r3
 8001856:	2380      	movs	r3, #128	@ 0x80
 8001858:	4694      	mov	ip, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4463      	add	r3, ip
 800185e:	4a72      	ldr	r2, [pc, #456]	@ (8001a28 <__aeabi_dmul+0x324>)
 8001860:	4293      	cmp	r3, r2
 8001862:	dc6b      	bgt.n	800193c <__aeabi_dmul+0x238>
 8001864:	0762      	lsls	r2, r4, #29
 8001866:	08c0      	lsrs	r0, r0, #3
 8001868:	0264      	lsls	r4, r4, #9
 800186a:	055b      	lsls	r3, r3, #21
 800186c:	4302      	orrs	r2, r0
 800186e:	0b24      	lsrs	r4, r4, #12
 8001870:	0d5b      	lsrs	r3, r3, #21
 8001872:	e79d      	b.n	80017b0 <__aeabi_dmul+0xac>
 8001874:	2190      	movs	r1, #144	@ 0x90
 8001876:	0089      	lsls	r1, r1, #2
 8001878:	420f      	tst	r7, r1
 800187a:	d163      	bne.n	8001944 <__aeabi_dmul+0x240>
 800187c:	2288      	movs	r2, #136	@ 0x88
 800187e:	423a      	tst	r2, r7
 8001880:	d100      	bne.n	8001884 <__aeabi_dmul+0x180>
 8001882:	e0d7      	b.n	8001a34 <__aeabi_dmul+0x330>
 8001884:	9b00      	ldr	r3, [sp, #0]
 8001886:	46a2      	mov	sl, r4
 8001888:	469b      	mov	fp, r3
 800188a:	4681      	mov	r9, r0
 800188c:	9602      	str	r6, [sp, #8]
 800188e:	e7bf      	b.n	8001810 <__aeabi_dmul+0x10c>
 8001890:	0023      	movs	r3, r4
 8001892:	4333      	orrs	r3, r6
 8001894:	d100      	bne.n	8001898 <__aeabi_dmul+0x194>
 8001896:	e07f      	b.n	8001998 <__aeabi_dmul+0x294>
 8001898:	2c00      	cmp	r4, #0
 800189a:	d100      	bne.n	800189e <__aeabi_dmul+0x19a>
 800189c:	e1ad      	b.n	8001bfa <__aeabi_dmul+0x4f6>
 800189e:	0020      	movs	r0, r4
 80018a0:	f000 fe8c 	bl	80025bc <__clzsi2>
 80018a4:	0002      	movs	r2, r0
 80018a6:	0003      	movs	r3, r0
 80018a8:	3a0b      	subs	r2, #11
 80018aa:	201d      	movs	r0, #29
 80018ac:	0019      	movs	r1, r3
 80018ae:	1a82      	subs	r2, r0, r2
 80018b0:	0030      	movs	r0, r6
 80018b2:	3908      	subs	r1, #8
 80018b4:	40d0      	lsrs	r0, r2
 80018b6:	408c      	lsls	r4, r1
 80018b8:	4304      	orrs	r4, r0
 80018ba:	0030      	movs	r0, r6
 80018bc:	4088      	lsls	r0, r1
 80018be:	4a5b      	ldr	r2, [pc, #364]	@ (8001a2c <__aeabi_dmul+0x328>)
 80018c0:	1aeb      	subs	r3, r5, r3
 80018c2:	4694      	mov	ip, r2
 80018c4:	4463      	add	r3, ip
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	9201      	str	r2, [sp, #4]
 80018ca:	4642      	mov	r2, r8
 80018cc:	2600      	movs	r6, #0
 80018ce:	2a0a      	cmp	r2, #10
 80018d0:	dc00      	bgt.n	80018d4 <__aeabi_dmul+0x1d0>
 80018d2:	e75a      	b.n	800178a <__aeabi_dmul+0x86>
 80018d4:	e79c      	b.n	8001810 <__aeabi_dmul+0x10c>
 80018d6:	4653      	mov	r3, sl
 80018d8:	4303      	orrs	r3, r0
 80018da:	4699      	mov	r9, r3
 80018dc:	d054      	beq.n	8001988 <__aeabi_dmul+0x284>
 80018de:	4653      	mov	r3, sl
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dmul+0x1e2>
 80018e4:	e177      	b.n	8001bd6 <__aeabi_dmul+0x4d2>
 80018e6:	4650      	mov	r0, sl
 80018e8:	f000 fe68 	bl	80025bc <__clzsi2>
 80018ec:	230b      	movs	r3, #11
 80018ee:	425b      	negs	r3, r3
 80018f0:	469c      	mov	ip, r3
 80018f2:	0002      	movs	r2, r0
 80018f4:	4484      	add	ip, r0
 80018f6:	0011      	movs	r1, r2
 80018f8:	4650      	mov	r0, sl
 80018fa:	3908      	subs	r1, #8
 80018fc:	4088      	lsls	r0, r1
 80018fe:	231d      	movs	r3, #29
 8001900:	4680      	mov	r8, r0
 8001902:	4660      	mov	r0, ip
 8001904:	1a1b      	subs	r3, r3, r0
 8001906:	0020      	movs	r0, r4
 8001908:	40d8      	lsrs	r0, r3
 800190a:	0003      	movs	r3, r0
 800190c:	4640      	mov	r0, r8
 800190e:	4303      	orrs	r3, r0
 8001910:	469a      	mov	sl, r3
 8001912:	0023      	movs	r3, r4
 8001914:	408b      	lsls	r3, r1
 8001916:	4699      	mov	r9, r3
 8001918:	2300      	movs	r3, #0
 800191a:	4d44      	ldr	r5, [pc, #272]	@ (8001a2c <__aeabi_dmul+0x328>)
 800191c:	4698      	mov	r8, r3
 800191e:	1aad      	subs	r5, r5, r2
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	e715      	b.n	8001750 <__aeabi_dmul+0x4c>
 8001924:	4652      	mov	r2, sl
 8001926:	4302      	orrs	r2, r0
 8001928:	4691      	mov	r9, r2
 800192a:	d126      	bne.n	800197a <__aeabi_dmul+0x276>
 800192c:	2200      	movs	r2, #0
 800192e:	001d      	movs	r5, r3
 8001930:	2302      	movs	r3, #2
 8001932:	4692      	mov	sl, r2
 8001934:	3208      	adds	r2, #8
 8001936:	4690      	mov	r8, r2
 8001938:	9302      	str	r3, [sp, #8]
 800193a:	e709      	b.n	8001750 <__aeabi_dmul+0x4c>
 800193c:	2400      	movs	r4, #0
 800193e:	2200      	movs	r2, #0
 8001940:	4b35      	ldr	r3, [pc, #212]	@ (8001a18 <__aeabi_dmul+0x314>)
 8001942:	e735      	b.n	80017b0 <__aeabi_dmul+0xac>
 8001944:	2300      	movs	r3, #0
 8001946:	2480      	movs	r4, #128	@ 0x80
 8001948:	469b      	mov	fp, r3
 800194a:	0324      	lsls	r4, r4, #12
 800194c:	4b32      	ldr	r3, [pc, #200]	@ (8001a18 <__aeabi_dmul+0x314>)
 800194e:	e72f      	b.n	80017b0 <__aeabi_dmul+0xac>
 8001950:	2202      	movs	r2, #2
 8001952:	4641      	mov	r1, r8
 8001954:	4311      	orrs	r1, r2
 8001956:	2280      	movs	r2, #128	@ 0x80
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	4694      	mov	ip, r2
 800195c:	002a      	movs	r2, r5
 800195e:	4462      	add	r2, ip
 8001960:	4688      	mov	r8, r1
 8001962:	9201      	str	r2, [sp, #4]
 8001964:	290a      	cmp	r1, #10
 8001966:	dd00      	ble.n	800196a <__aeabi_dmul+0x266>
 8001968:	e752      	b.n	8001810 <__aeabi_dmul+0x10c>
 800196a:	465a      	mov	r2, fp
 800196c:	2000      	movs	r0, #0
 800196e:	9900      	ldr	r1, [sp, #0]
 8001970:	0004      	movs	r4, r0
 8001972:	404a      	eors	r2, r1
 8001974:	4693      	mov	fp, r2
 8001976:	2602      	movs	r6, #2
 8001978:	e70b      	b.n	8001792 <__aeabi_dmul+0x8e>
 800197a:	220c      	movs	r2, #12
 800197c:	001d      	movs	r5, r3
 800197e:	2303      	movs	r3, #3
 8001980:	4681      	mov	r9, r0
 8001982:	4690      	mov	r8, r2
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	e6e3      	b.n	8001750 <__aeabi_dmul+0x4c>
 8001988:	2300      	movs	r3, #0
 800198a:	469a      	mov	sl, r3
 800198c:	3304      	adds	r3, #4
 800198e:	4698      	mov	r8, r3
 8001990:	3b03      	subs	r3, #3
 8001992:	2500      	movs	r5, #0
 8001994:	9302      	str	r3, [sp, #8]
 8001996:	e6db      	b.n	8001750 <__aeabi_dmul+0x4c>
 8001998:	4642      	mov	r2, r8
 800199a:	3301      	adds	r3, #1
 800199c:	431a      	orrs	r2, r3
 800199e:	002b      	movs	r3, r5
 80019a0:	4690      	mov	r8, r2
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	9201      	str	r2, [sp, #4]
 80019a6:	4642      	mov	r2, r8
 80019a8:	2400      	movs	r4, #0
 80019aa:	2000      	movs	r0, #0
 80019ac:	2601      	movs	r6, #1
 80019ae:	2a0a      	cmp	r2, #10
 80019b0:	dc00      	bgt.n	80019b4 <__aeabi_dmul+0x2b0>
 80019b2:	e6ea      	b.n	800178a <__aeabi_dmul+0x86>
 80019b4:	e72c      	b.n	8001810 <__aeabi_dmul+0x10c>
 80019b6:	2201      	movs	r2, #1
 80019b8:	1ad2      	subs	r2, r2, r3
 80019ba:	2a38      	cmp	r2, #56	@ 0x38
 80019bc:	dd00      	ble.n	80019c0 <__aeabi_dmul+0x2bc>
 80019be:	e6f4      	b.n	80017aa <__aeabi_dmul+0xa6>
 80019c0:	2a1f      	cmp	r2, #31
 80019c2:	dc00      	bgt.n	80019c6 <__aeabi_dmul+0x2c2>
 80019c4:	e12a      	b.n	8001c1c <__aeabi_dmul+0x518>
 80019c6:	211f      	movs	r1, #31
 80019c8:	4249      	negs	r1, r1
 80019ca:	1acb      	subs	r3, r1, r3
 80019cc:	0021      	movs	r1, r4
 80019ce:	40d9      	lsrs	r1, r3
 80019d0:	000b      	movs	r3, r1
 80019d2:	2a20      	cmp	r2, #32
 80019d4:	d005      	beq.n	80019e2 <__aeabi_dmul+0x2de>
 80019d6:	4a16      	ldr	r2, [pc, #88]	@ (8001a30 <__aeabi_dmul+0x32c>)
 80019d8:	9d01      	ldr	r5, [sp, #4]
 80019da:	4694      	mov	ip, r2
 80019dc:	4465      	add	r5, ip
 80019de:	40ac      	lsls	r4, r5
 80019e0:	4320      	orrs	r0, r4
 80019e2:	1e42      	subs	r2, r0, #1
 80019e4:	4190      	sbcs	r0, r2
 80019e6:	4318      	orrs	r0, r3
 80019e8:	2307      	movs	r3, #7
 80019ea:	0019      	movs	r1, r3
 80019ec:	2400      	movs	r4, #0
 80019ee:	4001      	ands	r1, r0
 80019f0:	4203      	tst	r3, r0
 80019f2:	d00c      	beq.n	8001a0e <__aeabi_dmul+0x30a>
 80019f4:	230f      	movs	r3, #15
 80019f6:	4003      	ands	r3, r0
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d100      	bne.n	80019fe <__aeabi_dmul+0x2fa>
 80019fc:	e140      	b.n	8001c80 <__aeabi_dmul+0x57c>
 80019fe:	1d03      	adds	r3, r0, #4
 8001a00:	4283      	cmp	r3, r0
 8001a02:	41a4      	sbcs	r4, r4
 8001a04:	0018      	movs	r0, r3
 8001a06:	4264      	negs	r4, r4
 8001a08:	0761      	lsls	r1, r4, #29
 8001a0a:	0264      	lsls	r4, r4, #9
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	08c2      	lsrs	r2, r0, #3
 8001a10:	2300      	movs	r3, #0
 8001a12:	430a      	orrs	r2, r1
 8001a14:	e6cc      	b.n	80017b0 <__aeabi_dmul+0xac>
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	000007ff 	.word	0x000007ff
 8001a1c:	fffffc01 	.word	0xfffffc01
 8001a20:	000003ff 	.word	0x000003ff
 8001a24:	feffffff 	.word	0xfeffffff
 8001a28:	000007fe 	.word	0x000007fe
 8001a2c:	fffffc0d 	.word	0xfffffc0d
 8001a30:	0000043e 	.word	0x0000043e
 8001a34:	4649      	mov	r1, r9
 8001a36:	464a      	mov	r2, r9
 8001a38:	0409      	lsls	r1, r1, #16
 8001a3a:	0c09      	lsrs	r1, r1, #16
 8001a3c:	000d      	movs	r5, r1
 8001a3e:	0c16      	lsrs	r6, r2, #16
 8001a40:	0c02      	lsrs	r2, r0, #16
 8001a42:	0400      	lsls	r0, r0, #16
 8001a44:	0c00      	lsrs	r0, r0, #16
 8001a46:	4345      	muls	r5, r0
 8001a48:	46ac      	mov	ip, r5
 8001a4a:	0005      	movs	r5, r0
 8001a4c:	4375      	muls	r5, r6
 8001a4e:	46a8      	mov	r8, r5
 8001a50:	0015      	movs	r5, r2
 8001a52:	000f      	movs	r7, r1
 8001a54:	4375      	muls	r5, r6
 8001a56:	9200      	str	r2, [sp, #0]
 8001a58:	9502      	str	r5, [sp, #8]
 8001a5a:	002a      	movs	r2, r5
 8001a5c:	9d00      	ldr	r5, [sp, #0]
 8001a5e:	436f      	muls	r7, r5
 8001a60:	4665      	mov	r5, ip
 8001a62:	0c2d      	lsrs	r5, r5, #16
 8001a64:	46a9      	mov	r9, r5
 8001a66:	4447      	add	r7, r8
 8001a68:	444f      	add	r7, r9
 8001a6a:	45b8      	cmp	r8, r7
 8001a6c:	d905      	bls.n	8001a7a <__aeabi_dmul+0x376>
 8001a6e:	0015      	movs	r5, r2
 8001a70:	2280      	movs	r2, #128	@ 0x80
 8001a72:	0252      	lsls	r2, r2, #9
 8001a74:	4690      	mov	r8, r2
 8001a76:	4445      	add	r5, r8
 8001a78:	9502      	str	r5, [sp, #8]
 8001a7a:	0c3d      	lsrs	r5, r7, #16
 8001a7c:	9503      	str	r5, [sp, #12]
 8001a7e:	4665      	mov	r5, ip
 8001a80:	042d      	lsls	r5, r5, #16
 8001a82:	043f      	lsls	r7, r7, #16
 8001a84:	0c2d      	lsrs	r5, r5, #16
 8001a86:	46ac      	mov	ip, r5
 8001a88:	003d      	movs	r5, r7
 8001a8a:	4465      	add	r5, ip
 8001a8c:	9504      	str	r5, [sp, #16]
 8001a8e:	0c25      	lsrs	r5, r4, #16
 8001a90:	0424      	lsls	r4, r4, #16
 8001a92:	0c24      	lsrs	r4, r4, #16
 8001a94:	46ac      	mov	ip, r5
 8001a96:	0025      	movs	r5, r4
 8001a98:	4375      	muls	r5, r6
 8001a9a:	46a8      	mov	r8, r5
 8001a9c:	4665      	mov	r5, ip
 8001a9e:	000f      	movs	r7, r1
 8001aa0:	4369      	muls	r1, r5
 8001aa2:	4441      	add	r1, r8
 8001aa4:	4689      	mov	r9, r1
 8001aa6:	4367      	muls	r7, r4
 8001aa8:	0c39      	lsrs	r1, r7, #16
 8001aaa:	4449      	add	r1, r9
 8001aac:	436e      	muls	r6, r5
 8001aae:	4588      	cmp	r8, r1
 8001ab0:	d903      	bls.n	8001aba <__aeabi_dmul+0x3b6>
 8001ab2:	2280      	movs	r2, #128	@ 0x80
 8001ab4:	0252      	lsls	r2, r2, #9
 8001ab6:	4690      	mov	r8, r2
 8001ab8:	4446      	add	r6, r8
 8001aba:	0c0d      	lsrs	r5, r1, #16
 8001abc:	46a8      	mov	r8, r5
 8001abe:	0035      	movs	r5, r6
 8001ac0:	4445      	add	r5, r8
 8001ac2:	9505      	str	r5, [sp, #20]
 8001ac4:	9d03      	ldr	r5, [sp, #12]
 8001ac6:	043f      	lsls	r7, r7, #16
 8001ac8:	46a8      	mov	r8, r5
 8001aca:	0c3f      	lsrs	r7, r7, #16
 8001acc:	0409      	lsls	r1, r1, #16
 8001ace:	19c9      	adds	r1, r1, r7
 8001ad0:	4488      	add	r8, r1
 8001ad2:	4645      	mov	r5, r8
 8001ad4:	9503      	str	r5, [sp, #12]
 8001ad6:	4655      	mov	r5, sl
 8001ad8:	042e      	lsls	r6, r5, #16
 8001ada:	0c36      	lsrs	r6, r6, #16
 8001adc:	0c2f      	lsrs	r7, r5, #16
 8001ade:	0035      	movs	r5, r6
 8001ae0:	4345      	muls	r5, r0
 8001ae2:	4378      	muls	r0, r7
 8001ae4:	4681      	mov	r9, r0
 8001ae6:	0038      	movs	r0, r7
 8001ae8:	46a8      	mov	r8, r5
 8001aea:	0c2d      	lsrs	r5, r5, #16
 8001aec:	46aa      	mov	sl, r5
 8001aee:	9a00      	ldr	r2, [sp, #0]
 8001af0:	4350      	muls	r0, r2
 8001af2:	4372      	muls	r2, r6
 8001af4:	444a      	add	r2, r9
 8001af6:	4452      	add	r2, sl
 8001af8:	4591      	cmp	r9, r2
 8001afa:	d903      	bls.n	8001b04 <__aeabi_dmul+0x400>
 8001afc:	2580      	movs	r5, #128	@ 0x80
 8001afe:	026d      	lsls	r5, r5, #9
 8001b00:	46a9      	mov	r9, r5
 8001b02:	4448      	add	r0, r9
 8001b04:	0c15      	lsrs	r5, r2, #16
 8001b06:	46a9      	mov	r9, r5
 8001b08:	4645      	mov	r5, r8
 8001b0a:	042d      	lsls	r5, r5, #16
 8001b0c:	0c2d      	lsrs	r5, r5, #16
 8001b0e:	46a8      	mov	r8, r5
 8001b10:	4665      	mov	r5, ip
 8001b12:	437d      	muls	r5, r7
 8001b14:	0412      	lsls	r2, r2, #16
 8001b16:	4448      	add	r0, r9
 8001b18:	4490      	add	r8, r2
 8001b1a:	46a9      	mov	r9, r5
 8001b1c:	0032      	movs	r2, r6
 8001b1e:	4665      	mov	r5, ip
 8001b20:	4362      	muls	r2, r4
 8001b22:	436e      	muls	r6, r5
 8001b24:	437c      	muls	r4, r7
 8001b26:	0c17      	lsrs	r7, r2, #16
 8001b28:	1936      	adds	r6, r6, r4
 8001b2a:	19bf      	adds	r7, r7, r6
 8001b2c:	42bc      	cmp	r4, r7
 8001b2e:	d903      	bls.n	8001b38 <__aeabi_dmul+0x434>
 8001b30:	2480      	movs	r4, #128	@ 0x80
 8001b32:	0264      	lsls	r4, r4, #9
 8001b34:	46a4      	mov	ip, r4
 8001b36:	44e1      	add	r9, ip
 8001b38:	9c02      	ldr	r4, [sp, #8]
 8001b3a:	9e03      	ldr	r6, [sp, #12]
 8001b3c:	46a4      	mov	ip, r4
 8001b3e:	9d05      	ldr	r5, [sp, #20]
 8001b40:	4466      	add	r6, ip
 8001b42:	428e      	cmp	r6, r1
 8001b44:	4189      	sbcs	r1, r1
 8001b46:	46ac      	mov	ip, r5
 8001b48:	0412      	lsls	r2, r2, #16
 8001b4a:	043c      	lsls	r4, r7, #16
 8001b4c:	0c12      	lsrs	r2, r2, #16
 8001b4e:	18a2      	adds	r2, r4, r2
 8001b50:	4462      	add	r2, ip
 8001b52:	4249      	negs	r1, r1
 8001b54:	1854      	adds	r4, r2, r1
 8001b56:	4446      	add	r6, r8
 8001b58:	46a4      	mov	ip, r4
 8001b5a:	4546      	cmp	r6, r8
 8001b5c:	41a4      	sbcs	r4, r4
 8001b5e:	4682      	mov	sl, r0
 8001b60:	4264      	negs	r4, r4
 8001b62:	46a0      	mov	r8, r4
 8001b64:	42aa      	cmp	r2, r5
 8001b66:	4192      	sbcs	r2, r2
 8001b68:	458c      	cmp	ip, r1
 8001b6a:	4189      	sbcs	r1, r1
 8001b6c:	44e2      	add	sl, ip
 8001b6e:	44d0      	add	r8, sl
 8001b70:	4249      	negs	r1, r1
 8001b72:	4252      	negs	r2, r2
 8001b74:	430a      	orrs	r2, r1
 8001b76:	45a0      	cmp	r8, r4
 8001b78:	41a4      	sbcs	r4, r4
 8001b7a:	4582      	cmp	sl, r0
 8001b7c:	4189      	sbcs	r1, r1
 8001b7e:	4264      	negs	r4, r4
 8001b80:	4249      	negs	r1, r1
 8001b82:	430c      	orrs	r4, r1
 8001b84:	4641      	mov	r1, r8
 8001b86:	0c3f      	lsrs	r7, r7, #16
 8001b88:	19d2      	adds	r2, r2, r7
 8001b8a:	1912      	adds	r2, r2, r4
 8001b8c:	0dcc      	lsrs	r4, r1, #23
 8001b8e:	9904      	ldr	r1, [sp, #16]
 8001b90:	0270      	lsls	r0, r6, #9
 8001b92:	4308      	orrs	r0, r1
 8001b94:	1e41      	subs	r1, r0, #1
 8001b96:	4188      	sbcs	r0, r1
 8001b98:	4641      	mov	r1, r8
 8001b9a:	444a      	add	r2, r9
 8001b9c:	0df6      	lsrs	r6, r6, #23
 8001b9e:	0252      	lsls	r2, r2, #9
 8001ba0:	4330      	orrs	r0, r6
 8001ba2:	0249      	lsls	r1, r1, #9
 8001ba4:	4314      	orrs	r4, r2
 8001ba6:	4308      	orrs	r0, r1
 8001ba8:	01d2      	lsls	r2, r2, #7
 8001baa:	d535      	bpl.n	8001c18 <__aeabi_dmul+0x514>
 8001bac:	2201      	movs	r2, #1
 8001bae:	0843      	lsrs	r3, r0, #1
 8001bb0:	4002      	ands	r2, r0
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	07e0      	lsls	r0, r4, #31
 8001bb6:	4318      	orrs	r0, r3
 8001bb8:	0864      	lsrs	r4, r4, #1
 8001bba:	e634      	b.n	8001826 <__aeabi_dmul+0x122>
 8001bbc:	9b00      	ldr	r3, [sp, #0]
 8001bbe:	46a2      	mov	sl, r4
 8001bc0:	469b      	mov	fp, r3
 8001bc2:	4681      	mov	r9, r0
 8001bc4:	2480      	movs	r4, #128	@ 0x80
 8001bc6:	4653      	mov	r3, sl
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	464a      	mov	r2, r9
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c8c <__aeabi_dmul+0x588>)
 8001bd2:	0b24      	lsrs	r4, r4, #12
 8001bd4:	e5ec      	b.n	80017b0 <__aeabi_dmul+0xac>
 8001bd6:	f000 fcf1 	bl	80025bc <__clzsi2>
 8001bda:	2315      	movs	r3, #21
 8001bdc:	469c      	mov	ip, r3
 8001bde:	4484      	add	ip, r0
 8001be0:	0002      	movs	r2, r0
 8001be2:	4663      	mov	r3, ip
 8001be4:	3220      	adds	r2, #32
 8001be6:	2b1c      	cmp	r3, #28
 8001be8:	dc00      	bgt.n	8001bec <__aeabi_dmul+0x4e8>
 8001bea:	e684      	b.n	80018f6 <__aeabi_dmul+0x1f2>
 8001bec:	2300      	movs	r3, #0
 8001bee:	4699      	mov	r9, r3
 8001bf0:	0023      	movs	r3, r4
 8001bf2:	3808      	subs	r0, #8
 8001bf4:	4083      	lsls	r3, r0
 8001bf6:	469a      	mov	sl, r3
 8001bf8:	e68e      	b.n	8001918 <__aeabi_dmul+0x214>
 8001bfa:	f000 fcdf 	bl	80025bc <__clzsi2>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	0003      	movs	r3, r0
 8001c02:	3215      	adds	r2, #21
 8001c04:	3320      	adds	r3, #32
 8001c06:	2a1c      	cmp	r2, #28
 8001c08:	dc00      	bgt.n	8001c0c <__aeabi_dmul+0x508>
 8001c0a:	e64e      	b.n	80018aa <__aeabi_dmul+0x1a6>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	0034      	movs	r4, r6
 8001c10:	3a08      	subs	r2, #8
 8001c12:	2000      	movs	r0, #0
 8001c14:	4094      	lsls	r4, r2
 8001c16:	e652      	b.n	80018be <__aeabi_dmul+0x1ba>
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	e604      	b.n	8001826 <__aeabi_dmul+0x122>
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c90 <__aeabi_dmul+0x58c>)
 8001c1e:	0021      	movs	r1, r4
 8001c20:	469c      	mov	ip, r3
 8001c22:	0003      	movs	r3, r0
 8001c24:	9d01      	ldr	r5, [sp, #4]
 8001c26:	40d3      	lsrs	r3, r2
 8001c28:	4465      	add	r5, ip
 8001c2a:	40a9      	lsls	r1, r5
 8001c2c:	4319      	orrs	r1, r3
 8001c2e:	0003      	movs	r3, r0
 8001c30:	40ab      	lsls	r3, r5
 8001c32:	1e58      	subs	r0, r3, #1
 8001c34:	4183      	sbcs	r3, r0
 8001c36:	4319      	orrs	r1, r3
 8001c38:	0008      	movs	r0, r1
 8001c3a:	40d4      	lsrs	r4, r2
 8001c3c:	074b      	lsls	r3, r1, #29
 8001c3e:	d009      	beq.n	8001c54 <__aeabi_dmul+0x550>
 8001c40:	230f      	movs	r3, #15
 8001c42:	400b      	ands	r3, r1
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d005      	beq.n	8001c54 <__aeabi_dmul+0x550>
 8001c48:	1d0b      	adds	r3, r1, #4
 8001c4a:	428b      	cmp	r3, r1
 8001c4c:	4180      	sbcs	r0, r0
 8001c4e:	4240      	negs	r0, r0
 8001c50:	1824      	adds	r4, r4, r0
 8001c52:	0018      	movs	r0, r3
 8001c54:	0223      	lsls	r3, r4, #8
 8001c56:	d400      	bmi.n	8001c5a <__aeabi_dmul+0x556>
 8001c58:	e6d6      	b.n	8001a08 <__aeabi_dmul+0x304>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	2400      	movs	r4, #0
 8001c5e:	2200      	movs	r2, #0
 8001c60:	e5a6      	b.n	80017b0 <__aeabi_dmul+0xac>
 8001c62:	290f      	cmp	r1, #15
 8001c64:	d1aa      	bne.n	8001bbc <__aeabi_dmul+0x4b8>
 8001c66:	2380      	movs	r3, #128	@ 0x80
 8001c68:	4652      	mov	r2, sl
 8001c6a:	031b      	lsls	r3, r3, #12
 8001c6c:	421a      	tst	r2, r3
 8001c6e:	d0a9      	beq.n	8001bc4 <__aeabi_dmul+0x4c0>
 8001c70:	421c      	tst	r4, r3
 8001c72:	d1a7      	bne.n	8001bc4 <__aeabi_dmul+0x4c0>
 8001c74:	431c      	orrs	r4, r3
 8001c76:	9b00      	ldr	r3, [sp, #0]
 8001c78:	0002      	movs	r2, r0
 8001c7a:	469b      	mov	fp, r3
 8001c7c:	4b03      	ldr	r3, [pc, #12]	@ (8001c8c <__aeabi_dmul+0x588>)
 8001c7e:	e597      	b.n	80017b0 <__aeabi_dmul+0xac>
 8001c80:	2400      	movs	r4, #0
 8001c82:	e6c1      	b.n	8001a08 <__aeabi_dmul+0x304>
 8001c84:	2400      	movs	r4, #0
 8001c86:	4b01      	ldr	r3, [pc, #4]	@ (8001c8c <__aeabi_dmul+0x588>)
 8001c88:	0022      	movs	r2, r4
 8001c8a:	e591      	b.n	80017b0 <__aeabi_dmul+0xac>
 8001c8c:	000007ff 	.word	0x000007ff
 8001c90:	0000041e 	.word	0x0000041e

08001c94 <__aeabi_dsub>:
 8001c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c96:	464e      	mov	r6, r9
 8001c98:	4645      	mov	r5, r8
 8001c9a:	46de      	mov	lr, fp
 8001c9c:	4657      	mov	r7, sl
 8001c9e:	b5e0      	push	{r5, r6, r7, lr}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	9000      	str	r0, [sp, #0]
 8001ca4:	9101      	str	r1, [sp, #4]
 8001ca6:	030c      	lsls	r4, r1, #12
 8001ca8:	004f      	lsls	r7, r1, #1
 8001caa:	0fce      	lsrs	r6, r1, #31
 8001cac:	0a61      	lsrs	r1, r4, #9
 8001cae:	9c00      	ldr	r4, [sp, #0]
 8001cb0:	46b0      	mov	r8, r6
 8001cb2:	0f64      	lsrs	r4, r4, #29
 8001cb4:	430c      	orrs	r4, r1
 8001cb6:	9900      	ldr	r1, [sp, #0]
 8001cb8:	0d7f      	lsrs	r7, r7, #21
 8001cba:	00c8      	lsls	r0, r1, #3
 8001cbc:	0011      	movs	r1, r2
 8001cbe:	001a      	movs	r2, r3
 8001cc0:	031b      	lsls	r3, r3, #12
 8001cc2:	469c      	mov	ip, r3
 8001cc4:	9100      	str	r1, [sp, #0]
 8001cc6:	9201      	str	r2, [sp, #4]
 8001cc8:	0051      	lsls	r1, r2, #1
 8001cca:	0d4b      	lsrs	r3, r1, #21
 8001ccc:	4699      	mov	r9, r3
 8001cce:	9b01      	ldr	r3, [sp, #4]
 8001cd0:	9d00      	ldr	r5, [sp, #0]
 8001cd2:	0fd9      	lsrs	r1, r3, #31
 8001cd4:	4663      	mov	r3, ip
 8001cd6:	0f6a      	lsrs	r2, r5, #29
 8001cd8:	0a5b      	lsrs	r3, r3, #9
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	00ea      	lsls	r2, r5, #3
 8001cde:	4694      	mov	ip, r2
 8001ce0:	4693      	mov	fp, r2
 8001ce2:	4ac1      	ldr	r2, [pc, #772]	@ (8001fe8 <__aeabi_dsub+0x354>)
 8001ce4:	9003      	str	r0, [sp, #12]
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	4591      	cmp	r9, r2
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x5a>
 8001cec:	e0cd      	b.n	8001e8a <__aeabi_dsub+0x1f6>
 8001cee:	2501      	movs	r5, #1
 8001cf0:	4069      	eors	r1, r5
 8001cf2:	464d      	mov	r5, r9
 8001cf4:	1b7d      	subs	r5, r7, r5
 8001cf6:	46aa      	mov	sl, r5
 8001cf8:	428e      	cmp	r6, r1
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0x6a>
 8001cfc:	e080      	b.n	8001e00 <__aeabi_dsub+0x16c>
 8001cfe:	2d00      	cmp	r5, #0
 8001d00:	dc00      	bgt.n	8001d04 <__aeabi_dsub+0x70>
 8001d02:	e335      	b.n	8002370 <__aeabi_dsub+0x6dc>
 8001d04:	4649      	mov	r1, r9
 8001d06:	2900      	cmp	r1, #0
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x78>
 8001d0a:	e0df      	b.n	8001ecc <__aeabi_dsub+0x238>
 8001d0c:	4297      	cmp	r7, r2
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x7e>
 8001d10:	e194      	b.n	800203c <__aeabi_dsub+0x3a8>
 8001d12:	4652      	mov	r2, sl
 8001d14:	2501      	movs	r5, #1
 8001d16:	2a38      	cmp	r2, #56	@ 0x38
 8001d18:	dc19      	bgt.n	8001d4e <__aeabi_dsub+0xba>
 8001d1a:	2280      	movs	r2, #128	@ 0x80
 8001d1c:	9b02      	ldr	r3, [sp, #8]
 8001d1e:	0412      	lsls	r2, r2, #16
 8001d20:	4313      	orrs	r3, r2
 8001d22:	9302      	str	r3, [sp, #8]
 8001d24:	4652      	mov	r2, sl
 8001d26:	2a1f      	cmp	r2, #31
 8001d28:	dd00      	ble.n	8001d2c <__aeabi_dsub+0x98>
 8001d2a:	e1e3      	b.n	80020f4 <__aeabi_dsub+0x460>
 8001d2c:	4653      	mov	r3, sl
 8001d2e:	2220      	movs	r2, #32
 8001d30:	4661      	mov	r1, ip
 8001d32:	9d02      	ldr	r5, [sp, #8]
 8001d34:	1ad2      	subs	r2, r2, r3
 8001d36:	4095      	lsls	r5, r2
 8001d38:	40d9      	lsrs	r1, r3
 8001d3a:	430d      	orrs	r5, r1
 8001d3c:	4661      	mov	r1, ip
 8001d3e:	4091      	lsls	r1, r2
 8001d40:	000a      	movs	r2, r1
 8001d42:	1e51      	subs	r1, r2, #1
 8001d44:	418a      	sbcs	r2, r1
 8001d46:	4315      	orrs	r5, r2
 8001d48:	9a02      	ldr	r2, [sp, #8]
 8001d4a:	40da      	lsrs	r2, r3
 8001d4c:	1aa4      	subs	r4, r4, r2
 8001d4e:	1b45      	subs	r5, r0, r5
 8001d50:	42a8      	cmp	r0, r5
 8001d52:	4180      	sbcs	r0, r0
 8001d54:	4240      	negs	r0, r0
 8001d56:	1a24      	subs	r4, r4, r0
 8001d58:	0223      	lsls	r3, r4, #8
 8001d5a:	d400      	bmi.n	8001d5e <__aeabi_dsub+0xca>
 8001d5c:	e13d      	b.n	8001fda <__aeabi_dsub+0x346>
 8001d5e:	0264      	lsls	r4, r4, #9
 8001d60:	0a64      	lsrs	r4, r4, #9
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0xd4>
 8001d66:	e147      	b.n	8001ff8 <__aeabi_dsub+0x364>
 8001d68:	0020      	movs	r0, r4
 8001d6a:	f000 fc27 	bl	80025bc <__clzsi2>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	3b08      	subs	r3, #8
 8001d72:	2120      	movs	r1, #32
 8001d74:	0028      	movs	r0, r5
 8001d76:	1aca      	subs	r2, r1, r3
 8001d78:	40d0      	lsrs	r0, r2
 8001d7a:	409c      	lsls	r4, r3
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	409d      	lsls	r5, r3
 8001d80:	4322      	orrs	r2, r4
 8001d82:	429f      	cmp	r7, r3
 8001d84:	dd00      	ble.n	8001d88 <__aeabi_dsub+0xf4>
 8001d86:	e177      	b.n	8002078 <__aeabi_dsub+0x3e4>
 8001d88:	1bd8      	subs	r0, r3, r7
 8001d8a:	3001      	adds	r0, #1
 8001d8c:	1a09      	subs	r1, r1, r0
 8001d8e:	002c      	movs	r4, r5
 8001d90:	408d      	lsls	r5, r1
 8001d92:	40c4      	lsrs	r4, r0
 8001d94:	1e6b      	subs	r3, r5, #1
 8001d96:	419d      	sbcs	r5, r3
 8001d98:	0013      	movs	r3, r2
 8001d9a:	40c2      	lsrs	r2, r0
 8001d9c:	408b      	lsls	r3, r1
 8001d9e:	4325      	orrs	r5, r4
 8001da0:	2700      	movs	r7, #0
 8001da2:	0014      	movs	r4, r2
 8001da4:	431d      	orrs	r5, r3
 8001da6:	076b      	lsls	r3, r5, #29
 8001da8:	d009      	beq.n	8001dbe <__aeabi_dsub+0x12a>
 8001daa:	230f      	movs	r3, #15
 8001dac:	402b      	ands	r3, r5
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d005      	beq.n	8001dbe <__aeabi_dsub+0x12a>
 8001db2:	1d2b      	adds	r3, r5, #4
 8001db4:	42ab      	cmp	r3, r5
 8001db6:	41ad      	sbcs	r5, r5
 8001db8:	426d      	negs	r5, r5
 8001dba:	1964      	adds	r4, r4, r5
 8001dbc:	001d      	movs	r5, r3
 8001dbe:	0223      	lsls	r3, r4, #8
 8001dc0:	d400      	bmi.n	8001dc4 <__aeabi_dsub+0x130>
 8001dc2:	e140      	b.n	8002046 <__aeabi_dsub+0x3b2>
 8001dc4:	4a88      	ldr	r2, [pc, #544]	@ (8001fe8 <__aeabi_dsub+0x354>)
 8001dc6:	3701      	adds	r7, #1
 8001dc8:	4297      	cmp	r7, r2
 8001dca:	d100      	bne.n	8001dce <__aeabi_dsub+0x13a>
 8001dcc:	e101      	b.n	8001fd2 <__aeabi_dsub+0x33e>
 8001dce:	2601      	movs	r6, #1
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	4986      	ldr	r1, [pc, #536]	@ (8001fec <__aeabi_dsub+0x358>)
 8001dd4:	08ed      	lsrs	r5, r5, #3
 8001dd6:	4021      	ands	r1, r4
 8001dd8:	074a      	lsls	r2, r1, #29
 8001dda:	432a      	orrs	r2, r5
 8001ddc:	057c      	lsls	r4, r7, #21
 8001dde:	024d      	lsls	r5, r1, #9
 8001de0:	0b2d      	lsrs	r5, r5, #12
 8001de2:	0d64      	lsrs	r4, r4, #21
 8001de4:	401e      	ands	r6, r3
 8001de6:	0524      	lsls	r4, r4, #20
 8001de8:	432c      	orrs	r4, r5
 8001dea:	07f6      	lsls	r6, r6, #31
 8001dec:	4334      	orrs	r4, r6
 8001dee:	0010      	movs	r0, r2
 8001df0:	0021      	movs	r1, r4
 8001df2:	b005      	add	sp, #20
 8001df4:	bcf0      	pop	{r4, r5, r6, r7}
 8001df6:	46bb      	mov	fp, r7
 8001df8:	46b2      	mov	sl, r6
 8001dfa:	46a9      	mov	r9, r5
 8001dfc:	46a0      	mov	r8, r4
 8001dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e00:	2d00      	cmp	r5, #0
 8001e02:	dc00      	bgt.n	8001e06 <__aeabi_dsub+0x172>
 8001e04:	e2d0      	b.n	80023a8 <__aeabi_dsub+0x714>
 8001e06:	4649      	mov	r1, r9
 8001e08:	2900      	cmp	r1, #0
 8001e0a:	d000      	beq.n	8001e0e <__aeabi_dsub+0x17a>
 8001e0c:	e0d4      	b.n	8001fb8 <__aeabi_dsub+0x324>
 8001e0e:	4661      	mov	r1, ip
 8001e10:	9b02      	ldr	r3, [sp, #8]
 8001e12:	4319      	orrs	r1, r3
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x184>
 8001e16:	e12b      	b.n	8002070 <__aeabi_dsub+0x3dc>
 8001e18:	1e69      	subs	r1, r5, #1
 8001e1a:	2d01      	cmp	r5, #1
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x18c>
 8001e1e:	e1d9      	b.n	80021d4 <__aeabi_dsub+0x540>
 8001e20:	4295      	cmp	r5, r2
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x192>
 8001e24:	e10a      	b.n	800203c <__aeabi_dsub+0x3a8>
 8001e26:	2501      	movs	r5, #1
 8001e28:	2938      	cmp	r1, #56	@ 0x38
 8001e2a:	dc17      	bgt.n	8001e5c <__aeabi_dsub+0x1c8>
 8001e2c:	468a      	mov	sl, r1
 8001e2e:	4653      	mov	r3, sl
 8001e30:	2b1f      	cmp	r3, #31
 8001e32:	dd00      	ble.n	8001e36 <__aeabi_dsub+0x1a2>
 8001e34:	e1e7      	b.n	8002206 <__aeabi_dsub+0x572>
 8001e36:	2220      	movs	r2, #32
 8001e38:	1ad2      	subs	r2, r2, r3
 8001e3a:	9b02      	ldr	r3, [sp, #8]
 8001e3c:	4661      	mov	r1, ip
 8001e3e:	4093      	lsls	r3, r2
 8001e40:	001d      	movs	r5, r3
 8001e42:	4653      	mov	r3, sl
 8001e44:	40d9      	lsrs	r1, r3
 8001e46:	4663      	mov	r3, ip
 8001e48:	4093      	lsls	r3, r2
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	430d      	orrs	r5, r1
 8001e4e:	1e51      	subs	r1, r2, #1
 8001e50:	418a      	sbcs	r2, r1
 8001e52:	4653      	mov	r3, sl
 8001e54:	4315      	orrs	r5, r2
 8001e56:	9a02      	ldr	r2, [sp, #8]
 8001e58:	40da      	lsrs	r2, r3
 8001e5a:	18a4      	adds	r4, r4, r2
 8001e5c:	182d      	adds	r5, r5, r0
 8001e5e:	4285      	cmp	r5, r0
 8001e60:	4180      	sbcs	r0, r0
 8001e62:	4240      	negs	r0, r0
 8001e64:	1824      	adds	r4, r4, r0
 8001e66:	0223      	lsls	r3, r4, #8
 8001e68:	d400      	bmi.n	8001e6c <__aeabi_dsub+0x1d8>
 8001e6a:	e0b6      	b.n	8001fda <__aeabi_dsub+0x346>
 8001e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe8 <__aeabi_dsub+0x354>)
 8001e6e:	3701      	adds	r7, #1
 8001e70:	429f      	cmp	r7, r3
 8001e72:	d100      	bne.n	8001e76 <__aeabi_dsub+0x1e2>
 8001e74:	e0ad      	b.n	8001fd2 <__aeabi_dsub+0x33e>
 8001e76:	2101      	movs	r1, #1
 8001e78:	4b5c      	ldr	r3, [pc, #368]	@ (8001fec <__aeabi_dsub+0x358>)
 8001e7a:	086a      	lsrs	r2, r5, #1
 8001e7c:	401c      	ands	r4, r3
 8001e7e:	4029      	ands	r1, r5
 8001e80:	430a      	orrs	r2, r1
 8001e82:	07e5      	lsls	r5, r4, #31
 8001e84:	4315      	orrs	r5, r2
 8001e86:	0864      	lsrs	r4, r4, #1
 8001e88:	e78d      	b.n	8001da6 <__aeabi_dsub+0x112>
 8001e8a:	4a59      	ldr	r2, [pc, #356]	@ (8001ff0 <__aeabi_dsub+0x35c>)
 8001e8c:	9b02      	ldr	r3, [sp, #8]
 8001e8e:	4692      	mov	sl, r2
 8001e90:	4662      	mov	r2, ip
 8001e92:	44ba      	add	sl, r7
 8001e94:	431a      	orrs	r2, r3
 8001e96:	d02c      	beq.n	8001ef2 <__aeabi_dsub+0x25e>
 8001e98:	428e      	cmp	r6, r1
 8001e9a:	d02e      	beq.n	8001efa <__aeabi_dsub+0x266>
 8001e9c:	4652      	mov	r2, sl
 8001e9e:	2a00      	cmp	r2, #0
 8001ea0:	d060      	beq.n	8001f64 <__aeabi_dsub+0x2d0>
 8001ea2:	2f00      	cmp	r7, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x214>
 8001ea6:	e0db      	b.n	8002060 <__aeabi_dsub+0x3cc>
 8001ea8:	4663      	mov	r3, ip
 8001eaa:	000e      	movs	r6, r1
 8001eac:	9c02      	ldr	r4, [sp, #8]
 8001eae:	08d8      	lsrs	r0, r3, #3
 8001eb0:	0762      	lsls	r2, r4, #29
 8001eb2:	4302      	orrs	r2, r0
 8001eb4:	08e4      	lsrs	r4, r4, #3
 8001eb6:	0013      	movs	r3, r2
 8001eb8:	4323      	orrs	r3, r4
 8001eba:	d100      	bne.n	8001ebe <__aeabi_dsub+0x22a>
 8001ebc:	e254      	b.n	8002368 <__aeabi_dsub+0x6d4>
 8001ebe:	2580      	movs	r5, #128	@ 0x80
 8001ec0:	032d      	lsls	r5, r5, #12
 8001ec2:	4325      	orrs	r5, r4
 8001ec4:	032d      	lsls	r5, r5, #12
 8001ec6:	4c48      	ldr	r4, [pc, #288]	@ (8001fe8 <__aeabi_dsub+0x354>)
 8001ec8:	0b2d      	lsrs	r5, r5, #12
 8001eca:	e78c      	b.n	8001de6 <__aeabi_dsub+0x152>
 8001ecc:	4661      	mov	r1, ip
 8001ece:	9b02      	ldr	r3, [sp, #8]
 8001ed0:	4319      	orrs	r1, r3
 8001ed2:	d100      	bne.n	8001ed6 <__aeabi_dsub+0x242>
 8001ed4:	e0cc      	b.n	8002070 <__aeabi_dsub+0x3dc>
 8001ed6:	0029      	movs	r1, r5
 8001ed8:	3901      	subs	r1, #1
 8001eda:	2d01      	cmp	r5, #1
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_dsub+0x24c>
 8001ede:	e188      	b.n	80021f2 <__aeabi_dsub+0x55e>
 8001ee0:	4295      	cmp	r5, r2
 8001ee2:	d100      	bne.n	8001ee6 <__aeabi_dsub+0x252>
 8001ee4:	e0aa      	b.n	800203c <__aeabi_dsub+0x3a8>
 8001ee6:	2501      	movs	r5, #1
 8001ee8:	2938      	cmp	r1, #56	@ 0x38
 8001eea:	dd00      	ble.n	8001eee <__aeabi_dsub+0x25a>
 8001eec:	e72f      	b.n	8001d4e <__aeabi_dsub+0xba>
 8001eee:	468a      	mov	sl, r1
 8001ef0:	e718      	b.n	8001d24 <__aeabi_dsub+0x90>
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4051      	eors	r1, r2
 8001ef6:	428e      	cmp	r6, r1
 8001ef8:	d1d0      	bne.n	8001e9c <__aeabi_dsub+0x208>
 8001efa:	4653      	mov	r3, sl
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d100      	bne.n	8001f02 <__aeabi_dsub+0x26e>
 8001f00:	e0be      	b.n	8002080 <__aeabi_dsub+0x3ec>
 8001f02:	2f00      	cmp	r7, #0
 8001f04:	d000      	beq.n	8001f08 <__aeabi_dsub+0x274>
 8001f06:	e138      	b.n	800217a <__aeabi_dsub+0x4e6>
 8001f08:	46ca      	mov	sl, r9
 8001f0a:	0022      	movs	r2, r4
 8001f0c:	4302      	orrs	r2, r0
 8001f0e:	d100      	bne.n	8001f12 <__aeabi_dsub+0x27e>
 8001f10:	e1e2      	b.n	80022d8 <__aeabi_dsub+0x644>
 8001f12:	4653      	mov	r3, sl
 8001f14:	1e59      	subs	r1, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d100      	bne.n	8001f1c <__aeabi_dsub+0x288>
 8001f1a:	e20d      	b.n	8002338 <__aeabi_dsub+0x6a4>
 8001f1c:	4a32      	ldr	r2, [pc, #200]	@ (8001fe8 <__aeabi_dsub+0x354>)
 8001f1e:	4592      	cmp	sl, r2
 8001f20:	d100      	bne.n	8001f24 <__aeabi_dsub+0x290>
 8001f22:	e1d2      	b.n	80022ca <__aeabi_dsub+0x636>
 8001f24:	2701      	movs	r7, #1
 8001f26:	2938      	cmp	r1, #56	@ 0x38
 8001f28:	dc13      	bgt.n	8001f52 <__aeabi_dsub+0x2be>
 8001f2a:	291f      	cmp	r1, #31
 8001f2c:	dd00      	ble.n	8001f30 <__aeabi_dsub+0x29c>
 8001f2e:	e1ee      	b.n	800230e <__aeabi_dsub+0x67a>
 8001f30:	2220      	movs	r2, #32
 8001f32:	9b02      	ldr	r3, [sp, #8]
 8001f34:	1a52      	subs	r2, r2, r1
 8001f36:	0025      	movs	r5, r4
 8001f38:	0007      	movs	r7, r0
 8001f3a:	469a      	mov	sl, r3
 8001f3c:	40cc      	lsrs	r4, r1
 8001f3e:	4090      	lsls	r0, r2
 8001f40:	4095      	lsls	r5, r2
 8001f42:	40cf      	lsrs	r7, r1
 8001f44:	44a2      	add	sl, r4
 8001f46:	1e42      	subs	r2, r0, #1
 8001f48:	4190      	sbcs	r0, r2
 8001f4a:	4653      	mov	r3, sl
 8001f4c:	432f      	orrs	r7, r5
 8001f4e:	4307      	orrs	r7, r0
 8001f50:	9302      	str	r3, [sp, #8]
 8001f52:	003d      	movs	r5, r7
 8001f54:	4465      	add	r5, ip
 8001f56:	4565      	cmp	r5, ip
 8001f58:	4192      	sbcs	r2, r2
 8001f5a:	9b02      	ldr	r3, [sp, #8]
 8001f5c:	4252      	negs	r2, r2
 8001f5e:	464f      	mov	r7, r9
 8001f60:	18d4      	adds	r4, r2, r3
 8001f62:	e780      	b.n	8001e66 <__aeabi_dsub+0x1d2>
 8001f64:	4a23      	ldr	r2, [pc, #140]	@ (8001ff4 <__aeabi_dsub+0x360>)
 8001f66:	1c7d      	adds	r5, r7, #1
 8001f68:	4215      	tst	r5, r2
 8001f6a:	d000      	beq.n	8001f6e <__aeabi_dsub+0x2da>
 8001f6c:	e0aa      	b.n	80020c4 <__aeabi_dsub+0x430>
 8001f6e:	4662      	mov	r2, ip
 8001f70:	0025      	movs	r5, r4
 8001f72:	9b02      	ldr	r3, [sp, #8]
 8001f74:	4305      	orrs	r5, r0
 8001f76:	431a      	orrs	r2, r3
 8001f78:	2f00      	cmp	r7, #0
 8001f7a:	d000      	beq.n	8001f7e <__aeabi_dsub+0x2ea>
 8001f7c:	e0f5      	b.n	800216a <__aeabi_dsub+0x4d6>
 8001f7e:	2d00      	cmp	r5, #0
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x2f0>
 8001f82:	e16b      	b.n	800225c <__aeabi_dsub+0x5c8>
 8001f84:	2a00      	cmp	r2, #0
 8001f86:	d100      	bne.n	8001f8a <__aeabi_dsub+0x2f6>
 8001f88:	e152      	b.n	8002230 <__aeabi_dsub+0x59c>
 8001f8a:	4663      	mov	r3, ip
 8001f8c:	1ac5      	subs	r5, r0, r3
 8001f8e:	9b02      	ldr	r3, [sp, #8]
 8001f90:	1ae2      	subs	r2, r4, r3
 8001f92:	42a8      	cmp	r0, r5
 8001f94:	419b      	sbcs	r3, r3
 8001f96:	425b      	negs	r3, r3
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	021a      	lsls	r2, r3, #8
 8001f9c:	d400      	bmi.n	8001fa0 <__aeabi_dsub+0x30c>
 8001f9e:	e1d5      	b.n	800234c <__aeabi_dsub+0x6b8>
 8001fa0:	4663      	mov	r3, ip
 8001fa2:	1a1d      	subs	r5, r3, r0
 8001fa4:	45ac      	cmp	ip, r5
 8001fa6:	4192      	sbcs	r2, r2
 8001fa8:	2601      	movs	r6, #1
 8001faa:	9b02      	ldr	r3, [sp, #8]
 8001fac:	4252      	negs	r2, r2
 8001fae:	1b1c      	subs	r4, r3, r4
 8001fb0:	4688      	mov	r8, r1
 8001fb2:	1aa4      	subs	r4, r4, r2
 8001fb4:	400e      	ands	r6, r1
 8001fb6:	e6f6      	b.n	8001da6 <__aeabi_dsub+0x112>
 8001fb8:	4297      	cmp	r7, r2
 8001fba:	d03f      	beq.n	800203c <__aeabi_dsub+0x3a8>
 8001fbc:	4652      	mov	r2, sl
 8001fbe:	2501      	movs	r5, #1
 8001fc0:	2a38      	cmp	r2, #56	@ 0x38
 8001fc2:	dd00      	ble.n	8001fc6 <__aeabi_dsub+0x332>
 8001fc4:	e74a      	b.n	8001e5c <__aeabi_dsub+0x1c8>
 8001fc6:	2280      	movs	r2, #128	@ 0x80
 8001fc8:	9b02      	ldr	r3, [sp, #8]
 8001fca:	0412      	lsls	r2, r2, #16
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	9302      	str	r3, [sp, #8]
 8001fd0:	e72d      	b.n	8001e2e <__aeabi_dsub+0x19a>
 8001fd2:	003c      	movs	r4, r7
 8001fd4:	2500      	movs	r5, #0
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	e705      	b.n	8001de6 <__aeabi_dsub+0x152>
 8001fda:	2307      	movs	r3, #7
 8001fdc:	402b      	ands	r3, r5
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d000      	beq.n	8001fe4 <__aeabi_dsub+0x350>
 8001fe2:	e6e2      	b.n	8001daa <__aeabi_dsub+0x116>
 8001fe4:	e06b      	b.n	80020be <__aeabi_dsub+0x42a>
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	000007ff 	.word	0x000007ff
 8001fec:	ff7fffff 	.word	0xff7fffff
 8001ff0:	fffff801 	.word	0xfffff801
 8001ff4:	000007fe 	.word	0x000007fe
 8001ff8:	0028      	movs	r0, r5
 8001ffa:	f000 fadf 	bl	80025bc <__clzsi2>
 8001ffe:	0003      	movs	r3, r0
 8002000:	3318      	adds	r3, #24
 8002002:	2b1f      	cmp	r3, #31
 8002004:	dc00      	bgt.n	8002008 <__aeabi_dsub+0x374>
 8002006:	e6b4      	b.n	8001d72 <__aeabi_dsub+0xde>
 8002008:	002a      	movs	r2, r5
 800200a:	3808      	subs	r0, #8
 800200c:	4082      	lsls	r2, r0
 800200e:	429f      	cmp	r7, r3
 8002010:	dd00      	ble.n	8002014 <__aeabi_dsub+0x380>
 8002012:	e0b9      	b.n	8002188 <__aeabi_dsub+0x4f4>
 8002014:	1bdb      	subs	r3, r3, r7
 8002016:	1c58      	adds	r0, r3, #1
 8002018:	281f      	cmp	r0, #31
 800201a:	dc00      	bgt.n	800201e <__aeabi_dsub+0x38a>
 800201c:	e1a0      	b.n	8002360 <__aeabi_dsub+0x6cc>
 800201e:	0015      	movs	r5, r2
 8002020:	3b1f      	subs	r3, #31
 8002022:	40dd      	lsrs	r5, r3
 8002024:	2820      	cmp	r0, #32
 8002026:	d005      	beq.n	8002034 <__aeabi_dsub+0x3a0>
 8002028:	2340      	movs	r3, #64	@ 0x40
 800202a:	1a1b      	subs	r3, r3, r0
 800202c:	409a      	lsls	r2, r3
 800202e:	1e53      	subs	r3, r2, #1
 8002030:	419a      	sbcs	r2, r3
 8002032:	4315      	orrs	r5, r2
 8002034:	2307      	movs	r3, #7
 8002036:	2700      	movs	r7, #0
 8002038:	402b      	ands	r3, r5
 800203a:	e7d0      	b.n	8001fde <__aeabi_dsub+0x34a>
 800203c:	08c0      	lsrs	r0, r0, #3
 800203e:	0762      	lsls	r2, r4, #29
 8002040:	4302      	orrs	r2, r0
 8002042:	08e4      	lsrs	r4, r4, #3
 8002044:	e737      	b.n	8001eb6 <__aeabi_dsub+0x222>
 8002046:	08ea      	lsrs	r2, r5, #3
 8002048:	0763      	lsls	r3, r4, #29
 800204a:	431a      	orrs	r2, r3
 800204c:	4bd3      	ldr	r3, [pc, #844]	@ (800239c <__aeabi_dsub+0x708>)
 800204e:	08e4      	lsrs	r4, r4, #3
 8002050:	429f      	cmp	r7, r3
 8002052:	d100      	bne.n	8002056 <__aeabi_dsub+0x3c2>
 8002054:	e72f      	b.n	8001eb6 <__aeabi_dsub+0x222>
 8002056:	0324      	lsls	r4, r4, #12
 8002058:	0b25      	lsrs	r5, r4, #12
 800205a:	057c      	lsls	r4, r7, #21
 800205c:	0d64      	lsrs	r4, r4, #21
 800205e:	e6c2      	b.n	8001de6 <__aeabi_dsub+0x152>
 8002060:	46ca      	mov	sl, r9
 8002062:	0022      	movs	r2, r4
 8002064:	4302      	orrs	r2, r0
 8002066:	d158      	bne.n	800211a <__aeabi_dsub+0x486>
 8002068:	4663      	mov	r3, ip
 800206a:	000e      	movs	r6, r1
 800206c:	9c02      	ldr	r4, [sp, #8]
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	9b03      	ldr	r3, [sp, #12]
 8002072:	4657      	mov	r7, sl
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	e7e7      	b.n	8002048 <__aeabi_dsub+0x3b4>
 8002078:	4cc9      	ldr	r4, [pc, #804]	@ (80023a0 <__aeabi_dsub+0x70c>)
 800207a:	1aff      	subs	r7, r7, r3
 800207c:	4014      	ands	r4, r2
 800207e:	e692      	b.n	8001da6 <__aeabi_dsub+0x112>
 8002080:	4dc8      	ldr	r5, [pc, #800]	@ (80023a4 <__aeabi_dsub+0x710>)
 8002082:	1c7a      	adds	r2, r7, #1
 8002084:	422a      	tst	r2, r5
 8002086:	d000      	beq.n	800208a <__aeabi_dsub+0x3f6>
 8002088:	e084      	b.n	8002194 <__aeabi_dsub+0x500>
 800208a:	0022      	movs	r2, r4
 800208c:	4302      	orrs	r2, r0
 800208e:	2f00      	cmp	r7, #0
 8002090:	d000      	beq.n	8002094 <__aeabi_dsub+0x400>
 8002092:	e0ef      	b.n	8002274 <__aeabi_dsub+0x5e0>
 8002094:	2a00      	cmp	r2, #0
 8002096:	d100      	bne.n	800209a <__aeabi_dsub+0x406>
 8002098:	e0e5      	b.n	8002266 <__aeabi_dsub+0x5d2>
 800209a:	4662      	mov	r2, ip
 800209c:	9902      	ldr	r1, [sp, #8]
 800209e:	430a      	orrs	r2, r1
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dsub+0x410>
 80020a2:	e0c5      	b.n	8002230 <__aeabi_dsub+0x59c>
 80020a4:	4663      	mov	r3, ip
 80020a6:	18c5      	adds	r5, r0, r3
 80020a8:	468c      	mov	ip, r1
 80020aa:	4285      	cmp	r5, r0
 80020ac:	4180      	sbcs	r0, r0
 80020ae:	4464      	add	r4, ip
 80020b0:	4240      	negs	r0, r0
 80020b2:	1824      	adds	r4, r4, r0
 80020b4:	0223      	lsls	r3, r4, #8
 80020b6:	d502      	bpl.n	80020be <__aeabi_dsub+0x42a>
 80020b8:	4bb9      	ldr	r3, [pc, #740]	@ (80023a0 <__aeabi_dsub+0x70c>)
 80020ba:	3701      	adds	r7, #1
 80020bc:	401c      	ands	r4, r3
 80020be:	46ba      	mov	sl, r7
 80020c0:	9503      	str	r5, [sp, #12]
 80020c2:	e7d5      	b.n	8002070 <__aeabi_dsub+0x3dc>
 80020c4:	4662      	mov	r2, ip
 80020c6:	1a85      	subs	r5, r0, r2
 80020c8:	42a8      	cmp	r0, r5
 80020ca:	4192      	sbcs	r2, r2
 80020cc:	4252      	negs	r2, r2
 80020ce:	4691      	mov	r9, r2
 80020d0:	9b02      	ldr	r3, [sp, #8]
 80020d2:	1ae3      	subs	r3, r4, r3
 80020d4:	001a      	movs	r2, r3
 80020d6:	464b      	mov	r3, r9
 80020d8:	1ad2      	subs	r2, r2, r3
 80020da:	0013      	movs	r3, r2
 80020dc:	4691      	mov	r9, r2
 80020de:	021a      	lsls	r2, r3, #8
 80020e0:	d46c      	bmi.n	80021bc <__aeabi_dsub+0x528>
 80020e2:	464a      	mov	r2, r9
 80020e4:	464c      	mov	r4, r9
 80020e6:	432a      	orrs	r2, r5
 80020e8:	d000      	beq.n	80020ec <__aeabi_dsub+0x458>
 80020ea:	e63a      	b.n	8001d62 <__aeabi_dsub+0xce>
 80020ec:	2600      	movs	r6, #0
 80020ee:	2400      	movs	r4, #0
 80020f0:	2500      	movs	r5, #0
 80020f2:	e678      	b.n	8001de6 <__aeabi_dsub+0x152>
 80020f4:	9902      	ldr	r1, [sp, #8]
 80020f6:	4653      	mov	r3, sl
 80020f8:	000d      	movs	r5, r1
 80020fa:	3a20      	subs	r2, #32
 80020fc:	40d5      	lsrs	r5, r2
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d006      	beq.n	8002110 <__aeabi_dsub+0x47c>
 8002102:	2240      	movs	r2, #64	@ 0x40
 8002104:	1ad2      	subs	r2, r2, r3
 8002106:	000b      	movs	r3, r1
 8002108:	4093      	lsls	r3, r2
 800210a:	4662      	mov	r2, ip
 800210c:	431a      	orrs	r2, r3
 800210e:	4693      	mov	fp, r2
 8002110:	465b      	mov	r3, fp
 8002112:	1e5a      	subs	r2, r3, #1
 8002114:	4193      	sbcs	r3, r2
 8002116:	431d      	orrs	r5, r3
 8002118:	e619      	b.n	8001d4e <__aeabi_dsub+0xba>
 800211a:	4653      	mov	r3, sl
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x490>
 8002122:	e0c6      	b.n	80022b2 <__aeabi_dsub+0x61e>
 8002124:	4e9d      	ldr	r6, [pc, #628]	@ (800239c <__aeabi_dsub+0x708>)
 8002126:	45b2      	cmp	sl, r6
 8002128:	d100      	bne.n	800212c <__aeabi_dsub+0x498>
 800212a:	e6bd      	b.n	8001ea8 <__aeabi_dsub+0x214>
 800212c:	4688      	mov	r8, r1
 800212e:	000e      	movs	r6, r1
 8002130:	2501      	movs	r5, #1
 8002132:	2a38      	cmp	r2, #56	@ 0x38
 8002134:	dc10      	bgt.n	8002158 <__aeabi_dsub+0x4c4>
 8002136:	2a1f      	cmp	r2, #31
 8002138:	dc7f      	bgt.n	800223a <__aeabi_dsub+0x5a6>
 800213a:	2120      	movs	r1, #32
 800213c:	0025      	movs	r5, r4
 800213e:	1a89      	subs	r1, r1, r2
 8002140:	0007      	movs	r7, r0
 8002142:	4088      	lsls	r0, r1
 8002144:	408d      	lsls	r5, r1
 8002146:	40d7      	lsrs	r7, r2
 8002148:	40d4      	lsrs	r4, r2
 800214a:	1e41      	subs	r1, r0, #1
 800214c:	4188      	sbcs	r0, r1
 800214e:	9b02      	ldr	r3, [sp, #8]
 8002150:	433d      	orrs	r5, r7
 8002152:	1b1b      	subs	r3, r3, r4
 8002154:	4305      	orrs	r5, r0
 8002156:	9302      	str	r3, [sp, #8]
 8002158:	4662      	mov	r2, ip
 800215a:	1b55      	subs	r5, r2, r5
 800215c:	45ac      	cmp	ip, r5
 800215e:	4192      	sbcs	r2, r2
 8002160:	9b02      	ldr	r3, [sp, #8]
 8002162:	4252      	negs	r2, r2
 8002164:	464f      	mov	r7, r9
 8002166:	1a9c      	subs	r4, r3, r2
 8002168:	e5f6      	b.n	8001d58 <__aeabi_dsub+0xc4>
 800216a:	2d00      	cmp	r5, #0
 800216c:	d000      	beq.n	8002170 <__aeabi_dsub+0x4dc>
 800216e:	e0b7      	b.n	80022e0 <__aeabi_dsub+0x64c>
 8002170:	2a00      	cmp	r2, #0
 8002172:	d100      	bne.n	8002176 <__aeabi_dsub+0x4e2>
 8002174:	e0f0      	b.n	8002358 <__aeabi_dsub+0x6c4>
 8002176:	2601      	movs	r6, #1
 8002178:	400e      	ands	r6, r1
 800217a:	4663      	mov	r3, ip
 800217c:	9802      	ldr	r0, [sp, #8]
 800217e:	08d9      	lsrs	r1, r3, #3
 8002180:	0742      	lsls	r2, r0, #29
 8002182:	430a      	orrs	r2, r1
 8002184:	08c4      	lsrs	r4, r0, #3
 8002186:	e696      	b.n	8001eb6 <__aeabi_dsub+0x222>
 8002188:	4c85      	ldr	r4, [pc, #532]	@ (80023a0 <__aeabi_dsub+0x70c>)
 800218a:	1aff      	subs	r7, r7, r3
 800218c:	4014      	ands	r4, r2
 800218e:	0762      	lsls	r2, r4, #29
 8002190:	08e4      	lsrs	r4, r4, #3
 8002192:	e760      	b.n	8002056 <__aeabi_dsub+0x3c2>
 8002194:	4981      	ldr	r1, [pc, #516]	@ (800239c <__aeabi_dsub+0x708>)
 8002196:	428a      	cmp	r2, r1
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x508>
 800219a:	e0c9      	b.n	8002330 <__aeabi_dsub+0x69c>
 800219c:	4663      	mov	r3, ip
 800219e:	18c1      	adds	r1, r0, r3
 80021a0:	4281      	cmp	r1, r0
 80021a2:	4180      	sbcs	r0, r0
 80021a4:	9b02      	ldr	r3, [sp, #8]
 80021a6:	4240      	negs	r0, r0
 80021a8:	18e3      	adds	r3, r4, r3
 80021aa:	181b      	adds	r3, r3, r0
 80021ac:	07dd      	lsls	r5, r3, #31
 80021ae:	085c      	lsrs	r4, r3, #1
 80021b0:	2307      	movs	r3, #7
 80021b2:	0849      	lsrs	r1, r1, #1
 80021b4:	430d      	orrs	r5, r1
 80021b6:	0017      	movs	r7, r2
 80021b8:	402b      	ands	r3, r5
 80021ba:	e710      	b.n	8001fde <__aeabi_dsub+0x34a>
 80021bc:	4663      	mov	r3, ip
 80021be:	1a1d      	subs	r5, r3, r0
 80021c0:	45ac      	cmp	ip, r5
 80021c2:	4192      	sbcs	r2, r2
 80021c4:	2601      	movs	r6, #1
 80021c6:	9b02      	ldr	r3, [sp, #8]
 80021c8:	4252      	negs	r2, r2
 80021ca:	1b1c      	subs	r4, r3, r4
 80021cc:	4688      	mov	r8, r1
 80021ce:	1aa4      	subs	r4, r4, r2
 80021d0:	400e      	ands	r6, r1
 80021d2:	e5c6      	b.n	8001d62 <__aeabi_dsub+0xce>
 80021d4:	4663      	mov	r3, ip
 80021d6:	18c5      	adds	r5, r0, r3
 80021d8:	9b02      	ldr	r3, [sp, #8]
 80021da:	4285      	cmp	r5, r0
 80021dc:	4180      	sbcs	r0, r0
 80021de:	469c      	mov	ip, r3
 80021e0:	4240      	negs	r0, r0
 80021e2:	4464      	add	r4, ip
 80021e4:	1824      	adds	r4, r4, r0
 80021e6:	2701      	movs	r7, #1
 80021e8:	0223      	lsls	r3, r4, #8
 80021ea:	d400      	bmi.n	80021ee <__aeabi_dsub+0x55a>
 80021ec:	e6f5      	b.n	8001fda <__aeabi_dsub+0x346>
 80021ee:	2702      	movs	r7, #2
 80021f0:	e641      	b.n	8001e76 <__aeabi_dsub+0x1e2>
 80021f2:	4663      	mov	r3, ip
 80021f4:	1ac5      	subs	r5, r0, r3
 80021f6:	42a8      	cmp	r0, r5
 80021f8:	4180      	sbcs	r0, r0
 80021fa:	9b02      	ldr	r3, [sp, #8]
 80021fc:	4240      	negs	r0, r0
 80021fe:	1ae4      	subs	r4, r4, r3
 8002200:	2701      	movs	r7, #1
 8002202:	1a24      	subs	r4, r4, r0
 8002204:	e5a8      	b.n	8001d58 <__aeabi_dsub+0xc4>
 8002206:	9d02      	ldr	r5, [sp, #8]
 8002208:	4652      	mov	r2, sl
 800220a:	002b      	movs	r3, r5
 800220c:	3a20      	subs	r2, #32
 800220e:	40d3      	lsrs	r3, r2
 8002210:	0019      	movs	r1, r3
 8002212:	4653      	mov	r3, sl
 8002214:	2b20      	cmp	r3, #32
 8002216:	d006      	beq.n	8002226 <__aeabi_dsub+0x592>
 8002218:	2240      	movs	r2, #64	@ 0x40
 800221a:	1ad2      	subs	r2, r2, r3
 800221c:	002b      	movs	r3, r5
 800221e:	4093      	lsls	r3, r2
 8002220:	4662      	mov	r2, ip
 8002222:	431a      	orrs	r2, r3
 8002224:	4693      	mov	fp, r2
 8002226:	465d      	mov	r5, fp
 8002228:	1e6b      	subs	r3, r5, #1
 800222a:	419d      	sbcs	r5, r3
 800222c:	430d      	orrs	r5, r1
 800222e:	e615      	b.n	8001e5c <__aeabi_dsub+0x1c8>
 8002230:	0762      	lsls	r2, r4, #29
 8002232:	08c0      	lsrs	r0, r0, #3
 8002234:	4302      	orrs	r2, r0
 8002236:	08e4      	lsrs	r4, r4, #3
 8002238:	e70d      	b.n	8002056 <__aeabi_dsub+0x3c2>
 800223a:	0011      	movs	r1, r2
 800223c:	0027      	movs	r7, r4
 800223e:	3920      	subs	r1, #32
 8002240:	40cf      	lsrs	r7, r1
 8002242:	2a20      	cmp	r2, #32
 8002244:	d005      	beq.n	8002252 <__aeabi_dsub+0x5be>
 8002246:	2140      	movs	r1, #64	@ 0x40
 8002248:	1a8a      	subs	r2, r1, r2
 800224a:	4094      	lsls	r4, r2
 800224c:	0025      	movs	r5, r4
 800224e:	4305      	orrs	r5, r0
 8002250:	9503      	str	r5, [sp, #12]
 8002252:	9d03      	ldr	r5, [sp, #12]
 8002254:	1e6a      	subs	r2, r5, #1
 8002256:	4195      	sbcs	r5, r2
 8002258:	433d      	orrs	r5, r7
 800225a:	e77d      	b.n	8002158 <__aeabi_dsub+0x4c4>
 800225c:	2a00      	cmp	r2, #0
 800225e:	d100      	bne.n	8002262 <__aeabi_dsub+0x5ce>
 8002260:	e744      	b.n	80020ec <__aeabi_dsub+0x458>
 8002262:	2601      	movs	r6, #1
 8002264:	400e      	ands	r6, r1
 8002266:	4663      	mov	r3, ip
 8002268:	08d9      	lsrs	r1, r3, #3
 800226a:	9b02      	ldr	r3, [sp, #8]
 800226c:	075a      	lsls	r2, r3, #29
 800226e:	430a      	orrs	r2, r1
 8002270:	08dc      	lsrs	r4, r3, #3
 8002272:	e6f0      	b.n	8002056 <__aeabi_dsub+0x3c2>
 8002274:	2a00      	cmp	r2, #0
 8002276:	d028      	beq.n	80022ca <__aeabi_dsub+0x636>
 8002278:	4662      	mov	r2, ip
 800227a:	9f02      	ldr	r7, [sp, #8]
 800227c:	08c0      	lsrs	r0, r0, #3
 800227e:	433a      	orrs	r2, r7
 8002280:	d100      	bne.n	8002284 <__aeabi_dsub+0x5f0>
 8002282:	e6dc      	b.n	800203e <__aeabi_dsub+0x3aa>
 8002284:	0762      	lsls	r2, r4, #29
 8002286:	4310      	orrs	r0, r2
 8002288:	2280      	movs	r2, #128	@ 0x80
 800228a:	08e4      	lsrs	r4, r4, #3
 800228c:	0312      	lsls	r2, r2, #12
 800228e:	4214      	tst	r4, r2
 8002290:	d009      	beq.n	80022a6 <__aeabi_dsub+0x612>
 8002292:	08fd      	lsrs	r5, r7, #3
 8002294:	4215      	tst	r5, r2
 8002296:	d106      	bne.n	80022a6 <__aeabi_dsub+0x612>
 8002298:	4663      	mov	r3, ip
 800229a:	2601      	movs	r6, #1
 800229c:	002c      	movs	r4, r5
 800229e:	08d8      	lsrs	r0, r3, #3
 80022a0:	077b      	lsls	r3, r7, #29
 80022a2:	4318      	orrs	r0, r3
 80022a4:	400e      	ands	r6, r1
 80022a6:	0f42      	lsrs	r2, r0, #29
 80022a8:	00c0      	lsls	r0, r0, #3
 80022aa:	08c0      	lsrs	r0, r0, #3
 80022ac:	0752      	lsls	r2, r2, #29
 80022ae:	4302      	orrs	r2, r0
 80022b0:	e601      	b.n	8001eb6 <__aeabi_dsub+0x222>
 80022b2:	4663      	mov	r3, ip
 80022b4:	1a1d      	subs	r5, r3, r0
 80022b6:	45ac      	cmp	ip, r5
 80022b8:	4192      	sbcs	r2, r2
 80022ba:	9b02      	ldr	r3, [sp, #8]
 80022bc:	4252      	negs	r2, r2
 80022be:	1b1c      	subs	r4, r3, r4
 80022c0:	000e      	movs	r6, r1
 80022c2:	4688      	mov	r8, r1
 80022c4:	2701      	movs	r7, #1
 80022c6:	1aa4      	subs	r4, r4, r2
 80022c8:	e546      	b.n	8001d58 <__aeabi_dsub+0xc4>
 80022ca:	4663      	mov	r3, ip
 80022cc:	08d9      	lsrs	r1, r3, #3
 80022ce:	9b02      	ldr	r3, [sp, #8]
 80022d0:	075a      	lsls	r2, r3, #29
 80022d2:	430a      	orrs	r2, r1
 80022d4:	08dc      	lsrs	r4, r3, #3
 80022d6:	e5ee      	b.n	8001eb6 <__aeabi_dsub+0x222>
 80022d8:	4663      	mov	r3, ip
 80022da:	9c02      	ldr	r4, [sp, #8]
 80022dc:	9303      	str	r3, [sp, #12]
 80022de:	e6c7      	b.n	8002070 <__aeabi_dsub+0x3dc>
 80022e0:	08c0      	lsrs	r0, r0, #3
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d100      	bne.n	80022e8 <__aeabi_dsub+0x654>
 80022e6:	e6aa      	b.n	800203e <__aeabi_dsub+0x3aa>
 80022e8:	0762      	lsls	r2, r4, #29
 80022ea:	4310      	orrs	r0, r2
 80022ec:	2280      	movs	r2, #128	@ 0x80
 80022ee:	08e4      	lsrs	r4, r4, #3
 80022f0:	0312      	lsls	r2, r2, #12
 80022f2:	4214      	tst	r4, r2
 80022f4:	d0d7      	beq.n	80022a6 <__aeabi_dsub+0x612>
 80022f6:	9f02      	ldr	r7, [sp, #8]
 80022f8:	08fd      	lsrs	r5, r7, #3
 80022fa:	4215      	tst	r5, r2
 80022fc:	d1d3      	bne.n	80022a6 <__aeabi_dsub+0x612>
 80022fe:	4663      	mov	r3, ip
 8002300:	2601      	movs	r6, #1
 8002302:	08d8      	lsrs	r0, r3, #3
 8002304:	077b      	lsls	r3, r7, #29
 8002306:	002c      	movs	r4, r5
 8002308:	4318      	orrs	r0, r3
 800230a:	400e      	ands	r6, r1
 800230c:	e7cb      	b.n	80022a6 <__aeabi_dsub+0x612>
 800230e:	000a      	movs	r2, r1
 8002310:	0027      	movs	r7, r4
 8002312:	3a20      	subs	r2, #32
 8002314:	40d7      	lsrs	r7, r2
 8002316:	2920      	cmp	r1, #32
 8002318:	d005      	beq.n	8002326 <__aeabi_dsub+0x692>
 800231a:	2240      	movs	r2, #64	@ 0x40
 800231c:	1a52      	subs	r2, r2, r1
 800231e:	4094      	lsls	r4, r2
 8002320:	0025      	movs	r5, r4
 8002322:	4305      	orrs	r5, r0
 8002324:	9503      	str	r5, [sp, #12]
 8002326:	9d03      	ldr	r5, [sp, #12]
 8002328:	1e6a      	subs	r2, r5, #1
 800232a:	4195      	sbcs	r5, r2
 800232c:	432f      	orrs	r7, r5
 800232e:	e610      	b.n	8001f52 <__aeabi_dsub+0x2be>
 8002330:	0014      	movs	r4, r2
 8002332:	2500      	movs	r5, #0
 8002334:	2200      	movs	r2, #0
 8002336:	e556      	b.n	8001de6 <__aeabi_dsub+0x152>
 8002338:	9b02      	ldr	r3, [sp, #8]
 800233a:	4460      	add	r0, ip
 800233c:	4699      	mov	r9, r3
 800233e:	4560      	cmp	r0, ip
 8002340:	4192      	sbcs	r2, r2
 8002342:	444c      	add	r4, r9
 8002344:	4252      	negs	r2, r2
 8002346:	0005      	movs	r5, r0
 8002348:	18a4      	adds	r4, r4, r2
 800234a:	e74c      	b.n	80021e6 <__aeabi_dsub+0x552>
 800234c:	001a      	movs	r2, r3
 800234e:	001c      	movs	r4, r3
 8002350:	432a      	orrs	r2, r5
 8002352:	d000      	beq.n	8002356 <__aeabi_dsub+0x6c2>
 8002354:	e6b3      	b.n	80020be <__aeabi_dsub+0x42a>
 8002356:	e6c9      	b.n	80020ec <__aeabi_dsub+0x458>
 8002358:	2480      	movs	r4, #128	@ 0x80
 800235a:	2600      	movs	r6, #0
 800235c:	0324      	lsls	r4, r4, #12
 800235e:	e5ae      	b.n	8001ebe <__aeabi_dsub+0x22a>
 8002360:	2120      	movs	r1, #32
 8002362:	2500      	movs	r5, #0
 8002364:	1a09      	subs	r1, r1, r0
 8002366:	e517      	b.n	8001d98 <__aeabi_dsub+0x104>
 8002368:	2200      	movs	r2, #0
 800236a:	2500      	movs	r5, #0
 800236c:	4c0b      	ldr	r4, [pc, #44]	@ (800239c <__aeabi_dsub+0x708>)
 800236e:	e53a      	b.n	8001de6 <__aeabi_dsub+0x152>
 8002370:	2d00      	cmp	r5, #0
 8002372:	d100      	bne.n	8002376 <__aeabi_dsub+0x6e2>
 8002374:	e5f6      	b.n	8001f64 <__aeabi_dsub+0x2d0>
 8002376:	464b      	mov	r3, r9
 8002378:	1bda      	subs	r2, r3, r7
 800237a:	4692      	mov	sl, r2
 800237c:	2f00      	cmp	r7, #0
 800237e:	d100      	bne.n	8002382 <__aeabi_dsub+0x6ee>
 8002380:	e66f      	b.n	8002062 <__aeabi_dsub+0x3ce>
 8002382:	2a38      	cmp	r2, #56	@ 0x38
 8002384:	dc05      	bgt.n	8002392 <__aeabi_dsub+0x6fe>
 8002386:	2680      	movs	r6, #128	@ 0x80
 8002388:	0436      	lsls	r6, r6, #16
 800238a:	4334      	orrs	r4, r6
 800238c:	4688      	mov	r8, r1
 800238e:	000e      	movs	r6, r1
 8002390:	e6d1      	b.n	8002136 <__aeabi_dsub+0x4a2>
 8002392:	4688      	mov	r8, r1
 8002394:	000e      	movs	r6, r1
 8002396:	2501      	movs	r5, #1
 8002398:	e6de      	b.n	8002158 <__aeabi_dsub+0x4c4>
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	000007ff 	.word	0x000007ff
 80023a0:	ff7fffff 	.word	0xff7fffff
 80023a4:	000007fe 	.word	0x000007fe
 80023a8:	2d00      	cmp	r5, #0
 80023aa:	d100      	bne.n	80023ae <__aeabi_dsub+0x71a>
 80023ac:	e668      	b.n	8002080 <__aeabi_dsub+0x3ec>
 80023ae:	464b      	mov	r3, r9
 80023b0:	1bd9      	subs	r1, r3, r7
 80023b2:	2f00      	cmp	r7, #0
 80023b4:	d101      	bne.n	80023ba <__aeabi_dsub+0x726>
 80023b6:	468a      	mov	sl, r1
 80023b8:	e5a7      	b.n	8001f0a <__aeabi_dsub+0x276>
 80023ba:	2701      	movs	r7, #1
 80023bc:	2938      	cmp	r1, #56	@ 0x38
 80023be:	dd00      	ble.n	80023c2 <__aeabi_dsub+0x72e>
 80023c0:	e5c7      	b.n	8001f52 <__aeabi_dsub+0x2be>
 80023c2:	2280      	movs	r2, #128	@ 0x80
 80023c4:	0412      	lsls	r2, r2, #16
 80023c6:	4314      	orrs	r4, r2
 80023c8:	e5af      	b.n	8001f2a <__aeabi_dsub+0x296>
 80023ca:	46c0      	nop			@ (mov r8, r8)

080023cc <__aeabi_dcmpun>:
 80023cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ce:	46c6      	mov	lr, r8
 80023d0:	031e      	lsls	r6, r3, #12
 80023d2:	0b36      	lsrs	r6, r6, #12
 80023d4:	46b0      	mov	r8, r6
 80023d6:	4e0d      	ldr	r6, [pc, #52]	@ (800240c <__aeabi_dcmpun+0x40>)
 80023d8:	030c      	lsls	r4, r1, #12
 80023da:	004d      	lsls	r5, r1, #1
 80023dc:	005f      	lsls	r7, r3, #1
 80023de:	b500      	push	{lr}
 80023e0:	0b24      	lsrs	r4, r4, #12
 80023e2:	0d6d      	lsrs	r5, r5, #21
 80023e4:	0d7f      	lsrs	r7, r7, #21
 80023e6:	42b5      	cmp	r5, r6
 80023e8:	d00b      	beq.n	8002402 <__aeabi_dcmpun+0x36>
 80023ea:	4908      	ldr	r1, [pc, #32]	@ (800240c <__aeabi_dcmpun+0x40>)
 80023ec:	2000      	movs	r0, #0
 80023ee:	428f      	cmp	r7, r1
 80023f0:	d104      	bne.n	80023fc <__aeabi_dcmpun+0x30>
 80023f2:	4646      	mov	r6, r8
 80023f4:	4316      	orrs	r6, r2
 80023f6:	0030      	movs	r0, r6
 80023f8:	1e43      	subs	r3, r0, #1
 80023fa:	4198      	sbcs	r0, r3
 80023fc:	bc80      	pop	{r7}
 80023fe:	46b8      	mov	r8, r7
 8002400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002402:	4304      	orrs	r4, r0
 8002404:	2001      	movs	r0, #1
 8002406:	2c00      	cmp	r4, #0
 8002408:	d1f8      	bne.n	80023fc <__aeabi_dcmpun+0x30>
 800240a:	e7ee      	b.n	80023ea <__aeabi_dcmpun+0x1e>
 800240c:	000007ff 	.word	0x000007ff

08002410 <__aeabi_d2iz>:
 8002410:	000b      	movs	r3, r1
 8002412:	0002      	movs	r2, r0
 8002414:	b570      	push	{r4, r5, r6, lr}
 8002416:	4d16      	ldr	r5, [pc, #88]	@ (8002470 <__aeabi_d2iz+0x60>)
 8002418:	030c      	lsls	r4, r1, #12
 800241a:	b082      	sub	sp, #8
 800241c:	0049      	lsls	r1, r1, #1
 800241e:	2000      	movs	r0, #0
 8002420:	9200      	str	r2, [sp, #0]
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	0b24      	lsrs	r4, r4, #12
 8002426:	0d49      	lsrs	r1, r1, #21
 8002428:	0fde      	lsrs	r6, r3, #31
 800242a:	42a9      	cmp	r1, r5
 800242c:	dd04      	ble.n	8002438 <__aeabi_d2iz+0x28>
 800242e:	4811      	ldr	r0, [pc, #68]	@ (8002474 <__aeabi_d2iz+0x64>)
 8002430:	4281      	cmp	r1, r0
 8002432:	dd03      	ble.n	800243c <__aeabi_d2iz+0x2c>
 8002434:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <__aeabi_d2iz+0x68>)
 8002436:	18f0      	adds	r0, r6, r3
 8002438:	b002      	add	sp, #8
 800243a:	bd70      	pop	{r4, r5, r6, pc}
 800243c:	2080      	movs	r0, #128	@ 0x80
 800243e:	0340      	lsls	r0, r0, #13
 8002440:	4320      	orrs	r0, r4
 8002442:	4c0e      	ldr	r4, [pc, #56]	@ (800247c <__aeabi_d2iz+0x6c>)
 8002444:	1a64      	subs	r4, r4, r1
 8002446:	2c1f      	cmp	r4, #31
 8002448:	dd08      	ble.n	800245c <__aeabi_d2iz+0x4c>
 800244a:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <__aeabi_d2iz+0x70>)
 800244c:	1a5b      	subs	r3, r3, r1
 800244e:	40d8      	lsrs	r0, r3
 8002450:	0003      	movs	r3, r0
 8002452:	4258      	negs	r0, r3
 8002454:	2e00      	cmp	r6, #0
 8002456:	d1ef      	bne.n	8002438 <__aeabi_d2iz+0x28>
 8002458:	0018      	movs	r0, r3
 800245a:	e7ed      	b.n	8002438 <__aeabi_d2iz+0x28>
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <__aeabi_d2iz+0x74>)
 800245e:	9a00      	ldr	r2, [sp, #0]
 8002460:	469c      	mov	ip, r3
 8002462:	0003      	movs	r3, r0
 8002464:	4461      	add	r1, ip
 8002466:	408b      	lsls	r3, r1
 8002468:	40e2      	lsrs	r2, r4
 800246a:	4313      	orrs	r3, r2
 800246c:	e7f1      	b.n	8002452 <__aeabi_d2iz+0x42>
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	000003fe 	.word	0x000003fe
 8002474:	0000041d 	.word	0x0000041d
 8002478:	7fffffff 	.word	0x7fffffff
 800247c:	00000433 	.word	0x00000433
 8002480:	00000413 	.word	0x00000413
 8002484:	fffffbed 	.word	0xfffffbed

08002488 <__aeabi_i2d>:
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	2800      	cmp	r0, #0
 800248c:	d016      	beq.n	80024bc <__aeabi_i2d+0x34>
 800248e:	17c3      	asrs	r3, r0, #31
 8002490:	18c5      	adds	r5, r0, r3
 8002492:	405d      	eors	r5, r3
 8002494:	0fc4      	lsrs	r4, r0, #31
 8002496:	0028      	movs	r0, r5
 8002498:	f000 f890 	bl	80025bc <__clzsi2>
 800249c:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <__aeabi_i2d+0x58>)
 800249e:	1a1b      	subs	r3, r3, r0
 80024a0:	055b      	lsls	r3, r3, #21
 80024a2:	0d5b      	lsrs	r3, r3, #21
 80024a4:	280a      	cmp	r0, #10
 80024a6:	dc14      	bgt.n	80024d2 <__aeabi_i2d+0x4a>
 80024a8:	0002      	movs	r2, r0
 80024aa:	002e      	movs	r6, r5
 80024ac:	3215      	adds	r2, #21
 80024ae:	4096      	lsls	r6, r2
 80024b0:	220b      	movs	r2, #11
 80024b2:	1a12      	subs	r2, r2, r0
 80024b4:	40d5      	lsrs	r5, r2
 80024b6:	032d      	lsls	r5, r5, #12
 80024b8:	0b2d      	lsrs	r5, r5, #12
 80024ba:	e003      	b.n	80024c4 <__aeabi_i2d+0x3c>
 80024bc:	2400      	movs	r4, #0
 80024be:	2300      	movs	r3, #0
 80024c0:	2500      	movs	r5, #0
 80024c2:	2600      	movs	r6, #0
 80024c4:	051b      	lsls	r3, r3, #20
 80024c6:	432b      	orrs	r3, r5
 80024c8:	07e4      	lsls	r4, r4, #31
 80024ca:	4323      	orrs	r3, r4
 80024cc:	0030      	movs	r0, r6
 80024ce:	0019      	movs	r1, r3
 80024d0:	bd70      	pop	{r4, r5, r6, pc}
 80024d2:	380b      	subs	r0, #11
 80024d4:	4085      	lsls	r5, r0
 80024d6:	032d      	lsls	r5, r5, #12
 80024d8:	2600      	movs	r6, #0
 80024da:	0b2d      	lsrs	r5, r5, #12
 80024dc:	e7f2      	b.n	80024c4 <__aeabi_i2d+0x3c>
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	0000041e 	.word	0x0000041e

080024e4 <__aeabi_ui2d>:
 80024e4:	b510      	push	{r4, lr}
 80024e6:	1e04      	subs	r4, r0, #0
 80024e8:	d010      	beq.n	800250c <__aeabi_ui2d+0x28>
 80024ea:	f000 f867 	bl	80025bc <__clzsi2>
 80024ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <__aeabi_ui2d+0x44>)
 80024f0:	1a1b      	subs	r3, r3, r0
 80024f2:	055b      	lsls	r3, r3, #21
 80024f4:	0d5b      	lsrs	r3, r3, #21
 80024f6:	280a      	cmp	r0, #10
 80024f8:	dc0f      	bgt.n	800251a <__aeabi_ui2d+0x36>
 80024fa:	220b      	movs	r2, #11
 80024fc:	0021      	movs	r1, r4
 80024fe:	1a12      	subs	r2, r2, r0
 8002500:	40d1      	lsrs	r1, r2
 8002502:	3015      	adds	r0, #21
 8002504:	030a      	lsls	r2, r1, #12
 8002506:	4084      	lsls	r4, r0
 8002508:	0b12      	lsrs	r2, r2, #12
 800250a:	e001      	b.n	8002510 <__aeabi_ui2d+0x2c>
 800250c:	2300      	movs	r3, #0
 800250e:	2200      	movs	r2, #0
 8002510:	051b      	lsls	r3, r3, #20
 8002512:	4313      	orrs	r3, r2
 8002514:	0020      	movs	r0, r4
 8002516:	0019      	movs	r1, r3
 8002518:	bd10      	pop	{r4, pc}
 800251a:	0022      	movs	r2, r4
 800251c:	380b      	subs	r0, #11
 800251e:	4082      	lsls	r2, r0
 8002520:	0312      	lsls	r2, r2, #12
 8002522:	2400      	movs	r4, #0
 8002524:	0b12      	lsrs	r2, r2, #12
 8002526:	e7f3      	b.n	8002510 <__aeabi_ui2d+0x2c>
 8002528:	0000041e 	.word	0x0000041e

0800252c <__aeabi_f2d>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	0242      	lsls	r2, r0, #9
 8002530:	0043      	lsls	r3, r0, #1
 8002532:	0fc4      	lsrs	r4, r0, #31
 8002534:	20fe      	movs	r0, #254	@ 0xfe
 8002536:	0e1b      	lsrs	r3, r3, #24
 8002538:	1c59      	adds	r1, r3, #1
 800253a:	0a55      	lsrs	r5, r2, #9
 800253c:	4208      	tst	r0, r1
 800253e:	d00c      	beq.n	800255a <__aeabi_f2d+0x2e>
 8002540:	21e0      	movs	r1, #224	@ 0xe0
 8002542:	0089      	lsls	r1, r1, #2
 8002544:	468c      	mov	ip, r1
 8002546:	076d      	lsls	r5, r5, #29
 8002548:	0b12      	lsrs	r2, r2, #12
 800254a:	4463      	add	r3, ip
 800254c:	051b      	lsls	r3, r3, #20
 800254e:	4313      	orrs	r3, r2
 8002550:	07e4      	lsls	r4, r4, #31
 8002552:	4323      	orrs	r3, r4
 8002554:	0028      	movs	r0, r5
 8002556:	0019      	movs	r1, r3
 8002558:	bd70      	pop	{r4, r5, r6, pc}
 800255a:	2b00      	cmp	r3, #0
 800255c:	d114      	bne.n	8002588 <__aeabi_f2d+0x5c>
 800255e:	2d00      	cmp	r5, #0
 8002560:	d01b      	beq.n	800259a <__aeabi_f2d+0x6e>
 8002562:	0028      	movs	r0, r5
 8002564:	f000 f82a 	bl	80025bc <__clzsi2>
 8002568:	280a      	cmp	r0, #10
 800256a:	dc1c      	bgt.n	80025a6 <__aeabi_f2d+0x7a>
 800256c:	230b      	movs	r3, #11
 800256e:	002a      	movs	r2, r5
 8002570:	1a1b      	subs	r3, r3, r0
 8002572:	40da      	lsrs	r2, r3
 8002574:	0003      	movs	r3, r0
 8002576:	3315      	adds	r3, #21
 8002578:	409d      	lsls	r5, r3
 800257a:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <__aeabi_f2d+0x88>)
 800257c:	0312      	lsls	r2, r2, #12
 800257e:	1a1b      	subs	r3, r3, r0
 8002580:	055b      	lsls	r3, r3, #21
 8002582:	0b12      	lsrs	r2, r2, #12
 8002584:	0d5b      	lsrs	r3, r3, #21
 8002586:	e7e1      	b.n	800254c <__aeabi_f2d+0x20>
 8002588:	2d00      	cmp	r5, #0
 800258a:	d009      	beq.n	80025a0 <__aeabi_f2d+0x74>
 800258c:	0b13      	lsrs	r3, r2, #12
 800258e:	2280      	movs	r2, #128	@ 0x80
 8002590:	0312      	lsls	r2, r2, #12
 8002592:	431a      	orrs	r2, r3
 8002594:	076d      	lsls	r5, r5, #29
 8002596:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <__aeabi_f2d+0x8c>)
 8002598:	e7d8      	b.n	800254c <__aeabi_f2d+0x20>
 800259a:	2300      	movs	r3, #0
 800259c:	2200      	movs	r2, #0
 800259e:	e7d5      	b.n	800254c <__aeabi_f2d+0x20>
 80025a0:	2200      	movs	r2, #0
 80025a2:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <__aeabi_f2d+0x8c>)
 80025a4:	e7d2      	b.n	800254c <__aeabi_f2d+0x20>
 80025a6:	0003      	movs	r3, r0
 80025a8:	002a      	movs	r2, r5
 80025aa:	3b0b      	subs	r3, #11
 80025ac:	409a      	lsls	r2, r3
 80025ae:	2500      	movs	r5, #0
 80025b0:	e7e3      	b.n	800257a <__aeabi_f2d+0x4e>
 80025b2:	46c0      	nop			@ (mov r8, r8)
 80025b4:	00000389 	.word	0x00000389
 80025b8:	000007ff 	.word	0x000007ff

080025bc <__clzsi2>:
 80025bc:	211c      	movs	r1, #28
 80025be:	2301      	movs	r3, #1
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	4298      	cmp	r0, r3
 80025c4:	d301      	bcc.n	80025ca <__clzsi2+0xe>
 80025c6:	0c00      	lsrs	r0, r0, #16
 80025c8:	3910      	subs	r1, #16
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	4298      	cmp	r0, r3
 80025ce:	d301      	bcc.n	80025d4 <__clzsi2+0x18>
 80025d0:	0a00      	lsrs	r0, r0, #8
 80025d2:	3908      	subs	r1, #8
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	4298      	cmp	r0, r3
 80025d8:	d301      	bcc.n	80025de <__clzsi2+0x22>
 80025da:	0900      	lsrs	r0, r0, #4
 80025dc:	3904      	subs	r1, #4
 80025de:	a202      	add	r2, pc, #8	@ (adr r2, 80025e8 <__clzsi2+0x2c>)
 80025e0:	5c10      	ldrb	r0, [r2, r0]
 80025e2:	1840      	adds	r0, r0, r1
 80025e4:	4770      	bx	lr
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	02020304 	.word	0x02020304
 80025ec:	01010101 	.word	0x01010101
	...

080025f8 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	0002      	movs	r2, r0
 8002600:	1dbb      	adds	r3, r7, #6
 8002602:	801a      	strh	r2, [r3, #0]
	_DS18B20_TIMER.Instance->CNT = 0;
 8002604:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <OneWire_Delay+0x30>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2200      	movs	r2, #0
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 800260c:	46c0      	nop			@ (mov r8, r8)
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <OneWire_Delay+0x30>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002614:	1dbb      	adds	r3, r7, #6
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d9f8      	bls.n	800260e <OneWire_Delay+0x16>
}
 800261c:	46c0      	nop			@ (mov r8, r8)
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	46bd      	mov	sp, r7
 8002622:	b002      	add	sp, #8
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	20000248 	.word	0x20000248

0800262c <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8002634:	210c      	movs	r1, #12
 8002636:	187b      	adds	r3, r7, r1
 8002638:	2200      	movs	r2, #0
 800263a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 800263c:	187b      	adds	r3, r7, r1
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002642:	187b      	adds	r3, r7, r1
 8002644:	2201      	movs	r2, #1
 8002646:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	889b      	ldrh	r3, [r3, #4]
 800264c:	001a      	movs	r2, r3
 800264e:	187b      	adds	r3, r7, r1
 8002650:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	187a      	adds	r2, r7, r1
 8002658:	0011      	movs	r1, r2
 800265a:	0018      	movs	r0, r3
 800265c:	f001 fb50 	bl	8003d00 <HAL_GPIO_Init>
}
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b008      	add	sp, #32
 8002666:	bd80      	pop	{r7, pc}

08002668 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8002670:	210c      	movs	r1, #12
 8002672:	187b      	adds	r3, r7, r1
 8002674:	2211      	movs	r2, #17
 8002676:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002678:	187b      	adds	r3, r7, r1
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 800267e:	187b      	adds	r3, r7, r1
 8002680:	2201      	movs	r2, #1
 8002682:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	889b      	ldrh	r3, [r3, #4]
 8002688:	001a      	movs	r2, r3
 800268a:	187b      	adds	r3, r7, r1
 800268c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	187a      	adds	r2, r7, r1
 8002694:	0011      	movs	r1, r2
 8002696:	0018      	movs	r0, r3
 8002698:	f001 fb32 	bl	8003d00 <HAL_GPIO_Init>
}
 800269c:	46c0      	nop			@ (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b008      	add	sp, #32
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	889b      	ldrh	r3, [r3, #4]
 80026b0:	001a      	movs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	0412      	lsls	r2, r2, #16
 80026b8:	619a      	str	r2, [r3, #24]
}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	b002      	add	sp, #8
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	889a      	ldrh	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	619a      	str	r2, [r3, #24]
}
 80026d4:	46c0      	nop			@ (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b002      	add	sp, #8
 80026da:	bd80      	pop	{r7, pc}

080026dc <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 80026dc:	b5b0      	push	{r4, r5, r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	0018      	movs	r0, r3
 80026e8:	f7ff ffdc 	bl	80026a4 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	0018      	movs	r0, r3
 80026f0:	f7ff ffba 	bl	8002668 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 80026f4:	23f0      	movs	r3, #240	@ 0xf0
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7ff ff7d 	bl	80025f8 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff ff93 	bl	800262c <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8002706:	2046      	movs	r0, #70	@ 0x46
 8002708:	f7ff ff76 	bl	80025f8 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	889b      	ldrh	r3, [r3, #4]
 8002714:	250f      	movs	r5, #15
 8002716:	197c      	adds	r4, r7, r5
 8002718:	0019      	movs	r1, r3
 800271a:	0010      	movs	r0, r2
 800271c:	f001 fc54 	bl	8003fc8 <HAL_GPIO_ReadPin>
 8002720:	0003      	movs	r3, r0
 8002722:	7023      	strb	r3, [r4, #0]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8002724:	23cd      	movs	r3, #205	@ 0xcd
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	0018      	movs	r0, r3
 800272a:	f7ff ff65 	bl	80025f8 <OneWire_Delay>

	return i;
 800272e:	197b      	adds	r3, r7, r5
 8002730:	781b      	ldrb	r3, [r3, #0]
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b004      	add	sp, #16
 8002738:	bdb0      	pop	{r4, r5, r7, pc}

0800273a <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	000a      	movs	r2, r1
 8002744:	1cfb      	adds	r3, r7, #3
 8002746:	701a      	strb	r2, [r3, #0]
	if (bit) // Send '1',
 8002748:	1cfb      	adds	r3, r7, #3
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <OneWire_WriteBit+0x3c>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	0018      	movs	r0, r3
 8002754:	f7ff ffa6 	bl	80026a4 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	0018      	movs	r0, r3
 800275c:	f7ff ff84 	bl	8002668 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8002760:	2006      	movs	r0, #6
 8002762:	f7ff ff49 	bl	80025f8 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f7ff ff5f 	bl	800262c <OneWire_BusInputDirection>
		OneWire_Delay(64);
 800276e:	2040      	movs	r0, #64	@ 0x40
 8002770:	f7ff ff42 	bl	80025f8 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8002774:	e011      	b.n	800279a <OneWire_WriteBit+0x60>
		OneWire_OutputLow(onewire); // Set the bus low
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f7ff ff93 	bl	80026a4 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff ff71 	bl	8002668 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8002786:	203c      	movs	r0, #60	@ 0x3c
 8002788:	f7ff ff36 	bl	80025f8 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0018      	movs	r0, r3
 8002790:	f7ff ff4c 	bl	800262c <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8002794:	200a      	movs	r0, #10
 8002796:	f7ff ff2f 	bl	80025f8 <OneWire_Delay>
}
 800279a:	46c0      	nop			@ (mov r8, r8)
 800279c:	46bd      	mov	sp, r7
 800279e:	b002      	add	sp, #8
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 80027a2:	b590      	push	{r4, r7, lr}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 80027aa:	240f      	movs	r4, #15
 80027ac:	193b      	adds	r3, r7, r4
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f7ff ff75 	bl	80026a4 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff ff53 	bl	8002668 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 80027c2:	2002      	movs	r0, #2
 80027c4:	f7ff ff18 	bl	80025f8 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	0018      	movs	r0, r3
 80027cc:	f7ff ff2e 	bl	800262c <OneWire_BusInputDirection>
	OneWire_Delay(10);
 80027d0:	200a      	movs	r0, #10
 80027d2:	f7ff ff11 	bl	80025f8 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	889b      	ldrh	r3, [r3, #4]
 80027de:	0019      	movs	r1, r3
 80027e0:	0010      	movs	r0, r2
 80027e2:	f001 fbf1 	bl	8003fc8 <HAL_GPIO_ReadPin>
 80027e6:	1e03      	subs	r3, r0, #0
 80027e8:	d002      	beq.n	80027f0 <OneWire_ReadBit+0x4e>
		bit = 1;
 80027ea:	193b      	adds	r3, r7, r4
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]

	OneWire_Delay(50); // Wait for end of read cycle
 80027f0:	2032      	movs	r0, #50	@ 0x32
 80027f2:	f7ff ff01 	bl	80025f8 <OneWire_Delay>

	return bit;
 80027f6:	230f      	movs	r3, #15
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	781b      	ldrb	r3, [r3, #0]
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	b005      	add	sp, #20
 8002802:	bd90      	pop	{r4, r7, pc}

08002804 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	000a      	movs	r2, r1
 800280e:	1cfb      	adds	r3, r7, #3
 8002810:	701a      	strb	r2, [r3, #0]
	uint8_t i = 8;
 8002812:	230f      	movs	r3, #15
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	2208      	movs	r2, #8
 8002818:	701a      	strb	r2, [r3, #0]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 800281a:	1cfb      	adds	r3, r7, #3
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2201      	movs	r2, #1
 8002820:	4013      	ands	r3, r2
 8002822:	b2da      	uxtb	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	0011      	movs	r1, r2
 8002828:	0018      	movs	r0, r3
 800282a:	f7ff ff86 	bl	800273a <OneWire_WriteBit>
		byte >>= 1;
 800282e:	1cfb      	adds	r3, r7, #3
 8002830:	1cfa      	adds	r2, r7, #3
 8002832:	7812      	ldrb	r2, [r2, #0]
 8002834:	0852      	lsrs	r2, r2, #1
 8002836:	701a      	strb	r2, [r3, #0]
	} while(--i);
 8002838:	210f      	movs	r1, #15
 800283a:	187b      	adds	r3, r7, r1
 800283c:	187a      	adds	r2, r7, r1
 800283e:	7812      	ldrb	r2, [r2, #0]
 8002840:	3a01      	subs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	187b      	adds	r3, r7, r1
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e6      	bne.n	800281a <OneWire_WriteByte+0x16>
}
 800284c:	46c0      	nop			@ (mov r8, r8)
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b004      	add	sp, #16
 8002854:	bd80      	pop	{r7, pc}

08002856 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8002856:	b590      	push	{r4, r7, lr}
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 800285e:	230f      	movs	r3, #15
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	2208      	movs	r2, #8
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	230e      	movs	r3, #14
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]

	do{
		byte >>= 1;
 800286e:	240e      	movs	r4, #14
 8002870:	193b      	adds	r3, r7, r4
 8002872:	193a      	adds	r2, r7, r4
 8002874:	7812      	ldrb	r2, [r2, #0]
 8002876:	0852      	lsrs	r2, r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	0018      	movs	r0, r3
 800287e:	f7ff ff90 	bl	80027a2 <OneWire_ReadBit>
 8002882:	0003      	movs	r3, r0
 8002884:	01db      	lsls	r3, r3, #7
 8002886:	b25a      	sxtb	r2, r3
 8002888:	0021      	movs	r1, r4
 800288a:	187b      	adds	r3, r7, r1
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	b25b      	sxtb	r3, r3
 8002890:	4313      	orrs	r3, r2
 8002892:	b25a      	sxtb	r2, r3
 8002894:	187b      	adds	r3, r7, r1
 8002896:	701a      	strb	r2, [r3, #0]
	} while(--i);
 8002898:	200f      	movs	r0, #15
 800289a:	183b      	adds	r3, r7, r0
 800289c:	183a      	adds	r2, r7, r0
 800289e:	7812      	ldrb	r2, [r2, #0]
 80028a0:	3a01      	subs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
 80028a4:	183b      	adds	r3, r7, r0
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e0      	bne.n	800286e <OneWire_ReadByte+0x18>

	return byte;
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	781b      	ldrb	r3, [r3, #0]
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b005      	add	sp, #20
 80028b6:	bd90      	pop	{r4, r7, pc}

080028b8 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	71da      	strb	r2, [r3, #7]
}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b002      	add	sp, #8
 80028d8:	bd80      	pop	{r7, pc}

080028da <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 80028da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	000a      	movs	r2, r1
 80028e4:	1cfb      	adds	r3, r7, #3
 80028e6:	701a      	strb	r2, [r3, #0]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 80028e8:	230f      	movs	r3, #15
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
	last_zero = 0;
 80028f0:	230e      	movs	r3, #14
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
	rom_byte_number = 0;
 80028f8:	230d      	movs	r3, #13
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
	rom_byte_mask = 1;
 8002900:	230b      	movs	r3, #11
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
	search_result = 0;
 8002908:	230c      	movs	r3, #12
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7a1b      	ldrb	r3, [r3, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d000      	beq.n	800291a <OneWire_Search+0x40>
 8002918:	e0e0      	b.n	8002adc <OneWire_Search+0x202>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff fedd 	bl	80026dc <OneWire_Reset>
 8002922:	1e03      	subs	r3, r0, #0
 8002924:	d00a      	beq.n	800293c <OneWire_Search+0x62>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	71da      	strb	r2, [r3, #7]
			return 0;
 8002938:	2300      	movs	r3, #0
 800293a:	e0e8      	b.n	8002b0e <OneWire_Search+0x234>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 800293c:	1cfb      	adds	r3, r7, #3
 800293e:	781a      	ldrb	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0011      	movs	r1, r2
 8002944:	0018      	movs	r0, r3
 8002946:	f7ff ff5d 	bl	8002804 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 800294a:	2509      	movs	r5, #9
 800294c:	197c      	adds	r4, r7, r5
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	0018      	movs	r0, r3
 8002952:	f7ff ff26 	bl	80027a2 <OneWire_ReadBit>
 8002956:	0003      	movs	r3, r0
 8002958:	7023      	strb	r3, [r4, #0]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 800295a:	2608      	movs	r6, #8
 800295c:	19bc      	adds	r4, r7, r6
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	0018      	movs	r0, r3
 8002962:	f7ff ff1e 	bl	80027a2 <OneWire_ReadBit>
 8002966:	0003      	movs	r3, r0
 8002968:	7023      	strb	r3, [r4, #0]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 800296a:	197b      	adds	r3, r7, r5
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d104      	bne.n	800297c <OneWire_Search+0xa2>
 8002972:	19bb      	adds	r3, r7, r6
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d100      	bne.n	800297c <OneWire_Search+0xa2>
 800297a:	e09a      	b.n	8002ab2 <OneWire_Search+0x1d8>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 800297c:	2109      	movs	r1, #9
 800297e:	187a      	adds	r2, r7, r1
 8002980:	2308      	movs	r3, #8
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	7812      	ldrb	r2, [r2, #0]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d005      	beq.n	8002998 <OneWire_Search+0xbe>
				{
					search_direction = id_bit;  // Bit write value for search
 800298c:	230a      	movs	r3, #10
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	187a      	adds	r2, r7, r1
 8002992:	7812      	ldrb	r2, [r2, #0]
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	e038      	b.n	8002a0a <OneWire_Search+0x130>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	799b      	ldrb	r3, [r3, #6]
 800299c:	220f      	movs	r2, #15
 800299e:	18ba      	adds	r2, r7, r2
 80029a0:	7812      	ldrb	r2, [r2, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d211      	bcs.n	80029ca <OneWire_Search+0xf0>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80029a6:	230d      	movs	r3, #13
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	18d3      	adds	r3, r2, r3
 80029b0:	7a5b      	ldrb	r3, [r3, #9]
 80029b2:	220b      	movs	r2, #11
 80029b4:	18ba      	adds	r2, r7, r2
 80029b6:	7812      	ldrb	r2, [r2, #0]
 80029b8:	4013      	ands	r3, r2
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	1e5a      	subs	r2, r3, #1
 80029be:	4193      	sbcs	r3, r2
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	230a      	movs	r3, #10
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e00b      	b.n	80029e2 <OneWire_Search+0x108>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	799b      	ldrb	r3, [r3, #6]
 80029ce:	220f      	movs	r2, #15
 80029d0:	18ba      	adds	r2, r7, r2
 80029d2:	7812      	ldrb	r2, [r2, #0]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	425a      	negs	r2, r3
 80029d8:	4153      	adcs	r3, r2
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	230a      	movs	r3, #10
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	701a      	strb	r2, [r3, #0]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 80029e2:	230a      	movs	r3, #10
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10e      	bne.n	8002a0a <OneWire_Search+0x130>
					{
						last_zero = id_bit_number;
 80029ec:	210e      	movs	r1, #14
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	220f      	movs	r2, #15
 80029f2:	18ba      	adds	r2, r7, r2
 80029f4:	7812      	ldrb	r2, [r2, #0]
 80029f6:	701a      	strb	r2, [r3, #0]

						if (last_zero < 9) // Check for last discrepancy in family
 80029f8:	000a      	movs	r2, r1
 80029fa:	18bb      	adds	r3, r7, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d803      	bhi.n	8002a0a <OneWire_Search+0x130>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	18ba      	adds	r2, r7, r2
 8002a06:	7812      	ldrb	r2, [r2, #0]
 8002a08:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8002a0a:	230a      	movs	r3, #10
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d111      	bne.n	8002a38 <OneWire_Search+0x15e>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8002a14:	200d      	movs	r0, #13
 8002a16:	183b      	adds	r3, r7, r0
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	18d3      	adds	r3, r2, r3
 8002a1e:	7a59      	ldrb	r1, [r3, #9]
 8002a20:	183b      	adds	r3, r7, r0
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	220b      	movs	r2, #11
 8002a26:	18ba      	adds	r2, r7, r2
 8002a28:	7812      	ldrb	r2, [r2, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	b2d1      	uxtb	r1, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	18d3      	adds	r3, r2, r3
 8002a32:	1c0a      	adds	r2, r1, #0
 8002a34:	725a      	strb	r2, [r3, #9]
 8002a36:	e015      	b.n	8002a64 <OneWire_Search+0x18a>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8002a38:	210d      	movs	r1, #13
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	18d3      	adds	r3, r2, r3
 8002a42:	7a5b      	ldrb	r3, [r3, #9]
 8002a44:	b25b      	sxtb	r3, r3
 8002a46:	220b      	movs	r2, #11
 8002a48:	18ba      	adds	r2, r7, r2
 8002a4a:	7812      	ldrb	r2, [r2, #0]
 8002a4c:	b252      	sxtb	r2, r2
 8002a4e:	43d2      	mvns	r2, r2
 8002a50:	b252      	sxtb	r2, r2
 8002a52:	4013      	ands	r3, r2
 8002a54:	b25a      	sxtb	r2, r3
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	b2d1      	uxtb	r1, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	18d3      	adds	r3, r2, r3
 8002a60:	1c0a      	adds	r2, r1, #0
 8002a62:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8002a64:	230a      	movs	r3, #10
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	0011      	movs	r1, r2
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7ff fe63 	bl	800273a <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8002a74:	210f      	movs	r1, #15
 8002a76:	187b      	adds	r3, r7, r1
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	187b      	adds	r3, r7, r1
 8002a7c:	3201      	adds	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8002a80:	210b      	movs	r1, #11
 8002a82:	187a      	adds	r2, r7, r1
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	18db      	adds	r3, r3, r3
 8002a8a:	7013      	strb	r3, [r2, #0]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8002a8c:	187b      	adds	r3, r7, r1
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d108      	bne.n	8002aa6 <OneWire_Search+0x1cc>
				{
					rom_byte_number++; // Next byte number
 8002a94:	200d      	movs	r0, #13
 8002a96:	183b      	adds	r3, r7, r0
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	183b      	adds	r3, r7, r0
 8002a9c:	3201      	adds	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
					rom_byte_mask = 1; // Reset the mask - first bit
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8002aa6:	230d      	movs	r3, #13
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b07      	cmp	r3, #7
 8002aae:	d800      	bhi.n	8002ab2 <OneWire_Search+0x1d8>
 8002ab0:	e74b      	b.n	800294a <OneWire_Search+0x70>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8002ab2:	230f      	movs	r3, #15
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b40      	cmp	r3, #64	@ 0x40
 8002aba:	d90f      	bls.n	8002adc <OneWire_Search+0x202>
		{
			onewire->LastDiscrepancy = last_zero;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	220e      	movs	r2, #14
 8002ac0:	18ba      	adds	r2, r7, r2
 8002ac2:	7812      	ldrb	r2, [r2, #0]
 8002ac4:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	799b      	ldrb	r3, [r3, #6]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <OneWire_Search+0x1fa>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8002ad4:	230c      	movs	r3, #12
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8002adc:	230c      	movs	r3, #12
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <OneWire_Search+0x214>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7a5b      	ldrb	r3, [r3, #9]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10c      	bne.n	8002b08 <OneWire_Search+0x22e>
	{
		onewire->LastDiscrepancy = 0;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8002b00:	230c      	movs	r3, #12
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
	}

	return search_result;
 8002b08:	230c      	movs	r3, #12
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	781b      	ldrb	r3, [r3, #0]
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b005      	add	sp, #20
 8002b14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b16 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7ff fec9 	bl	80028b8 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	21f0      	movs	r1, #240	@ 0xf0
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f7ff fed5 	bl	80028da <OneWire_Search>
 8002b30:	0003      	movs	r3, r0
}
 8002b32:	0018      	movs	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b002      	add	sp, #8
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	21f0      	movs	r1, #240	@ 0xf0
 8002b46:	0018      	movs	r0, r3
 8002b48:	f7ff fec7 	bl	80028da <OneWire_Search>
 8002b4c:	0003      	movs	r3, r0
}
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b002      	add	sp, #8
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8002b56:	b590      	push	{r4, r7, lr}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2155      	movs	r1, #85	@ 0x55
 8002b64:	0018      	movs	r0, r3
 8002b66:	f7ff fe4d 	bl	8002804 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 8002b6a:	230f      	movs	r3, #15
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e00f      	b.n	8002b94 <OneWire_SelectWithPointer+0x3e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8002b74:	240f      	movs	r4, #15
 8002b76:	193b      	adds	r3, r7, r4
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	18d3      	adds	r3, r2, r3
 8002b7e:	781a      	ldrb	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	0011      	movs	r1, r2
 8002b84:	0018      	movs	r0, r3
 8002b86:	f7ff fe3d 	bl	8002804 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8002b8a:	193b      	adds	r3, r7, r4
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	3201      	adds	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	230f      	movs	r3, #15
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b07      	cmp	r3, #7
 8002b9c:	d9ea      	bls.n	8002b74 <OneWire_SelectWithPointer+0x1e>
	}
}
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	46c0      	nop			@ (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b005      	add	sp, #20
 8002ba6:	bd90      	pop	{r4, r7, pc}

08002ba8 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8002bb2:	230f      	movs	r3, #15
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
 8002bba:	e00f      	b.n	8002bdc <OneWire_GetFullROM+0x34>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8002bbc:	200f      	movs	r0, #15
 8002bbe:	183b      	adds	r3, r7, r0
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	183b      	adds	r3, r7, r0
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	6839      	ldr	r1, [r7, #0]
 8002bc8:	18cb      	adds	r3, r1, r3
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	188a      	adds	r2, r1, r2
 8002bce:	7a52      	ldrb	r2, [r2, #9]
 8002bd0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8002bd2:	183b      	adds	r3, r7, r0
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	183b      	adds	r3, r7, r0
 8002bd8:	3201      	adds	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
 8002bdc:	230f      	movs	r3, #15
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b07      	cmp	r3, #7
 8002be4:	d9ea      	bls.n	8002bbc <OneWire_GetFullROM+0x14>
	}
}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	46c0      	nop			@ (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b004      	add	sp, #16
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	1dbb      	adds	r3, r7, #6
 8002bfc:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8002bfe:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <OneWire_Init+0x60>)
 8002c00:	0018      	movs	r0, r3
 8002c02:	f002 f8ad 	bl	8004d60 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1dba      	adds	r2, r7, #6
 8002c10:	8812      	ldrh	r2, [r2, #0]
 8002c12:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7ff fd26 	bl	8002668 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7ff fd4f 	bl	80026c2 <OneWire_OutputHigh>
	HAL_Delay(100);
 8002c24:	2064      	movs	r0, #100	@ 0x64
 8002c26:	f000 ff93 	bl	8003b50 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f7ff fd39 	bl	80026a4 <OneWire_OutputLow>
	HAL_Delay(100);
 8002c32:	2064      	movs	r0, #100	@ 0x64
 8002c34:	f000 ff8c 	bl	8003b50 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f7ff fd41 	bl	80026c2 <OneWire_OutputHigh>
	HAL_Delay(200);
 8002c40:	20c8      	movs	r0, #200	@ 0xc8
 8002c42:	f000 ff85 	bl	8003b50 <HAL_Delay>
}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b004      	add	sp, #16
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			@ (mov r8, r8)
 8002c50:	20000248 	.word	0x20000248

08002c54 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8002c58:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <DS18B20_StartAll+0x28>)
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7ff fd3e 	bl	80026dc <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8002c60:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <DS18B20_StartAll+0x28>)
 8002c62:	21cc      	movs	r1, #204	@ 0xcc
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7ff fdcd 	bl	8002804 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8002c6a:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <DS18B20_StartAll+0x28>)
 8002c6c:	2144      	movs	r1, #68	@ 0x44
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f7ff fdc8 	bl	8002804 <OneWire_WriteByte>
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	20000230 	.word	0x20000230

08002c80 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8002c80:	b5b0      	push	{r4, r5, r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	0002      	movs	r2, r0
 8002c88:	6039      	str	r1, [r7, #0]
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	701a      	strb	r2, [r3, #0]
	if( number >= TempSensorCount) // If read sensor is not availible
 8002c8e:	4b5e      	ldr	r3, [pc, #376]	@ (8002e08 <DS18B20_Read+0x188>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	1dfa      	adds	r2, r7, #7
 8002c94:	7812      	ldrb	r2, [r2, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d301      	bcc.n	8002c9e <DS18B20_Read+0x1e>
		return 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e0b0      	b.n	8002e00 <DS18B20_Read+0x180>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8002c9e:	2313      	movs	r3, #19
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8002ca6:	1dfb      	adds	r3, r7, #7
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	011a      	lsls	r2, r3, #4
 8002cac:	4b57      	ldr	r3, [pc, #348]	@ (8002e0c <DS18B20_Read+0x18c>)
 8002cae:	18d3      	adds	r3, r2, r3
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f000 f991 	bl	8002fd8 <DS18B20_Is>
 8002cb6:	1e03      	subs	r3, r0, #0
 8002cb8:	d101      	bne.n	8002cbe <DS18B20_Read+0x3e>
		return 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e0a0      	b.n	8002e00 <DS18B20_Read+0x180>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8002cbe:	4b54      	ldr	r3, [pc, #336]	@ (8002e10 <DS18B20_Read+0x190>)
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7ff fd6e 	bl	80027a2 <OneWire_ReadBit>
 8002cc6:	1e03      	subs	r3, r0, #0
 8002cc8:	d101      	bne.n	8002cce <DS18B20_Read+0x4e>
		return 0; // Busy bus - conversion is not finished
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e098      	b.n	8002e00 <DS18B20_Read+0x180>

	OneWire_Reset(&OneWire); // Reset the bus
 8002cce:	4b50      	ldr	r3, [pc, #320]	@ (8002e10 <DS18B20_Read+0x190>)
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7ff fd03 	bl	80026dc <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002cd6:	1dfb      	adds	r3, r7, #7
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	011a      	lsls	r2, r3, #4
 8002cdc:	4b4b      	ldr	r3, [pc, #300]	@ (8002e0c <DS18B20_Read+0x18c>)
 8002cde:	18d2      	adds	r2, r2, r3
 8002ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8002e10 <DS18B20_Read+0x190>)
 8002ce2:	0011      	movs	r1, r2
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7ff ff36 	bl	8002b56 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8002cea:	4b49      	ldr	r3, [pc, #292]	@ (8002e10 <DS18B20_Read+0x190>)
 8002cec:	21be      	movs	r1, #190	@ 0xbe
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7ff fd88 	bl	8002804 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8002cf4:	2313      	movs	r3, #19
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
 8002cfc:	e010      	b.n	8002d20 <DS18B20_Read+0xa0>
		data[i] = OneWire_ReadByte(&OneWire);
 8002cfe:	2513      	movs	r5, #19
 8002d00:	197b      	adds	r3, r7, r5
 8002d02:	781c      	ldrb	r4, [r3, #0]
 8002d04:	4b42      	ldr	r3, [pc, #264]	@ (8002e10 <DS18B20_Read+0x190>)
 8002d06:	0018      	movs	r0, r3
 8002d08:	f7ff fda5 	bl	8002856 <OneWire_ReadByte>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	001a      	movs	r2, r3
 8002d10:	2308      	movs	r3, #8
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8002d16:	197b      	adds	r3, r7, r5
 8002d18:	781a      	ldrb	r2, [r3, #0]
 8002d1a:	197b      	adds	r3, r7, r5
 8002d1c:	3201      	adds	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	2313      	movs	r3, #19
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d9e9      	bls.n	8002cfe <DS18B20_Read+0x7e>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8002d2a:	2408      	movs	r4, #8
 8002d2c:	193b      	adds	r3, r7, r4
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b21a      	sxth	r2, r3
 8002d32:	193b      	adds	r3, r7, r4
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	b21b      	sxth	r3, r3
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	b21a      	sxth	r2, r3
 8002d3e:	2310      	movs	r3, #16
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	801a      	strh	r2, [r3, #0]

	OneWire_Reset(&OneWire); // Reset the bus
 8002d44:	4b32      	ldr	r3, [pc, #200]	@ (8002e10 <DS18B20_Read+0x190>)
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7ff fcc8 	bl	80026dc <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 8002d4c:	193b      	adds	r3, r7, r4
 8002d4e:	791b      	ldrb	r3, [r3, #4]
 8002d50:	115b      	asrs	r3, r3, #5
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2203      	movs	r2, #3
 8002d56:	4013      	ands	r3, r2
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	210f      	movs	r1, #15
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	3209      	adds	r2, #9
 8002d60:	701a      	strb	r2, [r3, #0]

	switch (resolution) // Chceck the correct value dur to resolution
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	d035      	beq.n	8002dd6 <DS18B20_Read+0x156>
 8002d6a:	dc43      	bgt.n	8002df4 <DS18B20_Read+0x174>
 8002d6c:	2b0b      	cmp	r3, #11
 8002d6e:	d023      	beq.n	8002db8 <DS18B20_Read+0x138>
 8002d70:	dc40      	bgt.n	8002df4 <DS18B20_Read+0x174>
 8002d72:	2b09      	cmp	r3, #9
 8002d74:	d002      	beq.n	8002d7c <DS18B20_Read+0xfc>
 8002d76:	2b0a      	cmp	r3, #10
 8002d78:	d00f      	beq.n	8002d9a <DS18B20_Read+0x11a>
 8002d7a:	e03b      	b.n	8002df4 <DS18B20_Read+0x174>
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8002d7c:	2310      	movs	r3, #16
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7fd fcca 	bl	800071c <__aeabi_i2f>
 8002d88:	1c03      	adds	r3, r0, #0
 8002d8a:	21fc      	movs	r1, #252	@ 0xfc
 8002d8c:	0589      	lsls	r1, r1, #22
 8002d8e:	1c18      	adds	r0, r3, #0
 8002d90:	f7fd fb86 	bl	80004a0 <__aeabi_fmul>
 8002d94:	1c03      	adds	r3, r0, #0
 8002d96:	617b      	str	r3, [r7, #20]
		break;
 8002d98:	e02e      	b.n	8002df8 <DS18B20_Read+0x178>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8002d9a:	2310      	movs	r3, #16
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7fd fcbb 	bl	800071c <__aeabi_i2f>
 8002da6:	1c03      	adds	r3, r0, #0
 8002da8:	21fa      	movs	r1, #250	@ 0xfa
 8002daa:	0589      	lsls	r1, r1, #22
 8002dac:	1c18      	adds	r0, r3, #0
 8002dae:	f7fd fb77 	bl	80004a0 <__aeabi_fmul>
 8002db2:	1c03      	adds	r3, r0, #0
 8002db4:	617b      	str	r3, [r7, #20]
		 break;
 8002db6:	e01f      	b.n	8002df8 <DS18B20_Read+0x178>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8002db8:	2310      	movs	r3, #16
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f7fd fcac 	bl	800071c <__aeabi_i2f>
 8002dc4:	1c03      	adds	r3, r0, #0
 8002dc6:	21f8      	movs	r1, #248	@ 0xf8
 8002dc8:	0589      	lsls	r1, r1, #22
 8002dca:	1c18      	adds	r0, r3, #0
 8002dcc:	f7fd fb68 	bl	80004a0 <__aeabi_fmul>
 8002dd0:	1c03      	adds	r3, r0, #0
 8002dd2:	617b      	str	r3, [r7, #20]
		break;
 8002dd4:	e010      	b.n	8002df8 <DS18B20_Read+0x178>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8002dd6:	2310      	movs	r3, #16
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7fd fc9d 	bl	800071c <__aeabi_i2f>
 8002de2:	1c03      	adds	r3, r0, #0
 8002de4:	21f6      	movs	r1, #246	@ 0xf6
 8002de6:	0589      	lsls	r1, r1, #22
 8002de8:	1c18      	adds	r0, r3, #0
 8002dea:	f7fd fb59 	bl	80004a0 <__aeabi_fmul>
 8002dee:	1c03      	adds	r3, r0, #0
 8002df0:	617b      	str	r3, [r7, #20]
		 break;
 8002df2:	e001      	b.n	8002df8 <DS18B20_Read+0x178>
		default:
			result = 0xFF;
 8002df4:	4b07      	ldr	r3, [pc, #28]	@ (8002e14 <DS18B20_Read+0x194>)
 8002df6:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 8002dfe:	2301      	movs	r3, #1
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b006      	add	sp, #24
 8002e06:	bdb0      	pop	{r4, r5, r7, pc}
 8002e08:	20000244 	.word	0x20000244
 8002e0c:	200001f0 	.word	0x200001f0
 8002e10:	20000230 	.word	0x20000230
 8002e14:	437f0000 	.word	0x437f0000

08002e18 <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8002e18:	b5b0      	push	{r4, r5, r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	0002      	movs	r2, r0
 8002e20:	1dfb      	adds	r3, r7, #7
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	1dbb      	adds	r3, r7, #6
 8002e26:	1c0a      	adds	r2, r1, #0
 8002e28:	701a      	strb	r2, [r3, #0]
	if( number >= TempSensorCount)
 8002e2a:	4b68      	ldr	r3, [pc, #416]	@ (8002fcc <DS18B20_SetResolution+0x1b4>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	1dfa      	adds	r2, r7, #7
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d301      	bcc.n	8002e3a <DS18B20_SetResolution+0x22>
		return 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e0c3      	b.n	8002fc2 <DS18B20_SetResolution+0x1aa>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8002e3a:	1dfb      	adds	r3, r7, #7
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	011a      	lsls	r2, r3, #4
 8002e40:	4b63      	ldr	r3, [pc, #396]	@ (8002fd0 <DS18B20_SetResolution+0x1b8>)
 8002e42:	18d3      	adds	r3, r2, r3
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 f8c7 	bl	8002fd8 <DS18B20_Is>
 8002e4a:	1e03      	subs	r3, r0, #0
 8002e4c:	d101      	bne.n	8002e52 <DS18B20_SetResolution+0x3a>
		return 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e0b7      	b.n	8002fc2 <DS18B20_SetResolution+0x1aa>

	OneWire_Reset(&OneWire); // Reset the bus
 8002e52:	4b60      	ldr	r3, [pc, #384]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7ff fc41 	bl	80026dc <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	011a      	lsls	r2, r3, #4
 8002e60:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd0 <DS18B20_SetResolution+0x1b8>)
 8002e62:	18d2      	adds	r2, r2, r3
 8002e64:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002e66:	0011      	movs	r1, r2
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f7ff fe74 	bl	8002b56 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8002e6e:	4b59      	ldr	r3, [pc, #356]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002e70:	21be      	movs	r1, #190	@ 0xbe
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7ff fcc6 	bl	8002804 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 8002e78:	4b56      	ldr	r3, [pc, #344]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f7ff fceb 	bl	8002856 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 8002e80:	4b54      	ldr	r3, [pc, #336]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7ff fce7 	bl	8002856 <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8002e88:	230e      	movs	r3, #14
 8002e8a:	18fc      	adds	r4, r7, r3
 8002e8c:	4b51      	ldr	r3, [pc, #324]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f7ff fce1 	bl	8002856 <OneWire_ReadByte>
 8002e94:	0003      	movs	r3, r0
 8002e96:	7023      	strb	r3, [r4, #0]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 8002e98:	230d      	movs	r3, #13
 8002e9a:	18fc      	adds	r4, r7, r3
 8002e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7ff fcd9 	bl	8002856 <OneWire_ReadByte>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	7023      	strb	r3, [r4, #0]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8002ea8:	250f      	movs	r5, #15
 8002eaa:	197c      	adds	r4, r7, r5
 8002eac:	4b49      	ldr	r3, [pc, #292]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f7ff fcd1 	bl	8002856 <OneWire_ReadByte>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	7023      	strb	r3, [r4, #0]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8002eb8:	1dbb      	adds	r3, r7, #6
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b09      	cmp	r3, #9
 8002ebe:	d10c      	bne.n	8002eda <DS18B20_SetResolution+0xc2>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002ec0:	197b      	adds	r3, r7, r5
 8002ec2:	197a      	adds	r2, r7, r5
 8002ec4:	7812      	ldrb	r2, [r2, #0]
 8002ec6:	2140      	movs	r1, #64	@ 0x40
 8002ec8:	438a      	bics	r2, r1
 8002eca:	701a      	strb	r2, [r3, #0]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002ecc:	197b      	adds	r3, r7, r5
 8002ece:	197a      	adds	r2, r7, r5
 8002ed0:	7812      	ldrb	r2, [r2, #0]
 8002ed2:	2120      	movs	r1, #32
 8002ed4:	438a      	bics	r2, r1
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	e034      	b.n	8002f44 <DS18B20_SetResolution+0x12c>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8002eda:	1dbb      	adds	r3, r7, #6
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b0a      	cmp	r3, #10
 8002ee0:	d10d      	bne.n	8002efe <DS18B20_SetResolution+0xe6>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002ee2:	200f      	movs	r0, #15
 8002ee4:	183b      	adds	r3, r7, r0
 8002ee6:	183a      	adds	r2, r7, r0
 8002ee8:	7812      	ldrb	r2, [r2, #0]
 8002eea:	2140      	movs	r1, #64	@ 0x40
 8002eec:	438a      	bics	r2, r1
 8002eee:	701a      	strb	r2, [r3, #0]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002ef0:	183b      	adds	r3, r7, r0
 8002ef2:	183a      	adds	r2, r7, r0
 8002ef4:	7812      	ldrb	r2, [r2, #0]
 8002ef6:	2120      	movs	r1, #32
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e022      	b.n	8002f44 <DS18B20_SetResolution+0x12c>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8002efe:	1dbb      	adds	r3, r7, #6
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b0b      	cmp	r3, #11
 8002f04:	d10d      	bne.n	8002f22 <DS18B20_SetResolution+0x10a>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002f06:	200f      	movs	r0, #15
 8002f08:	183b      	adds	r3, r7, r0
 8002f0a:	183a      	adds	r2, r7, r0
 8002f0c:	7812      	ldrb	r2, [r2, #0]
 8002f0e:	2140      	movs	r1, #64	@ 0x40
 8002f10:	430a      	orrs	r2, r1
 8002f12:	701a      	strb	r2, [r3, #0]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002f14:	183b      	adds	r3, r7, r0
 8002f16:	183a      	adds	r2, r7, r0
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	438a      	bics	r2, r1
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	e010      	b.n	8002f44 <DS18B20_SetResolution+0x12c>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002f22:	1dbb      	adds	r3, r7, #6
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d10c      	bne.n	8002f44 <DS18B20_SetResolution+0x12c>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002f2a:	200f      	movs	r0, #15
 8002f2c:	183b      	adds	r3, r7, r0
 8002f2e:	183a      	adds	r2, r7, r0
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	2140      	movs	r1, #64	@ 0x40
 8002f34:	430a      	orrs	r2, r1
 8002f36:	701a      	strb	r2, [r3, #0]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002f38:	183b      	adds	r3, r7, r0
 8002f3a:	183a      	adds	r2, r7, r0
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	2120      	movs	r1, #32
 8002f40:	430a      	orrs	r2, r1
 8002f42:	701a      	strb	r2, [r3, #0]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 8002f44:	4b23      	ldr	r3, [pc, #140]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002f46:	0018      	movs	r0, r3
 8002f48:	f7ff fbc8 	bl	80026dc <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002f4c:	1dfb      	adds	r3, r7, #7
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	011a      	lsls	r2, r3, #4
 8002f52:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd0 <DS18B20_SetResolution+0x1b8>)
 8002f54:	18d2      	adds	r2, r2, r3
 8002f56:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002f58:	0011      	movs	r1, r2
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7ff fdfb 	bl	8002b56 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8002f60:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002f62:	214e      	movs	r1, #78	@ 0x4e
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7ff fc4d 	bl	8002804 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 8002f6a:	230e      	movs	r3, #14
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	781a      	ldrb	r2, [r3, #0]
 8002f70:	4b18      	ldr	r3, [pc, #96]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002f72:	0011      	movs	r1, r2
 8002f74:	0018      	movs	r0, r3
 8002f76:	f7ff fc45 	bl	8002804 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8002f7a:	230d      	movs	r3, #13
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	781a      	ldrb	r2, [r3, #0]
 8002f80:	4b14      	ldr	r3, [pc, #80]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002f82:	0011      	movs	r1, r2
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7ff fc3d 	bl	8002804 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 8002f8a:	230f      	movs	r3, #15
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002f92:	0011      	movs	r1, r2
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7ff fc35 	bl	8002804 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f7ff fb9d 	bl	80026dc <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002fa2:	1dfb      	adds	r3, r7, #7
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	011a      	lsls	r2, r3, #4
 8002fa8:	4b09      	ldr	r3, [pc, #36]	@ (8002fd0 <DS18B20_SetResolution+0x1b8>)
 8002faa:	18d2      	adds	r2, r2, r3
 8002fac:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002fae:	0011      	movs	r1, r2
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff fdd0 	bl	8002b56 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 8002fb6:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <DS18B20_SetResolution+0x1bc>)
 8002fb8:	2148      	movs	r1, #72	@ 0x48
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f7ff fc22 	bl	8002804 <OneWire_WriteByte>

	return 1;
 8002fc0:	2301      	movs	r3, #1
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	20000244 	.word	0x20000244
 8002fd0:	200001f0 	.word	0x200001f0
 8002fd4:	20000230 	.word	0x20000230

08002fd8 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b28      	cmp	r3, #40	@ 0x28
 8002fe6:	d101      	bne.n	8002fec <DS18B20_Is+0x14>
		return 1;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <DS18B20_Is+0x16>
	return 0;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	0018      	movs	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b002      	add	sp, #8
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8002ffc:	4b03      	ldr	r3, [pc, #12]	@ (800300c <DS18B20_AllDone+0x14>)
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7ff fbcf 	bl	80027a2 <OneWire_ReadBit>
 8003004:	0003      	movs	r3, r0
}
 8003006:	0018      	movs	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000230 	.word	0x20000230

08003010 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 8003016:	f7ff ffef 	bl	8002ff8 <DS18B20_AllDone>
 800301a:	1e03      	subs	r3, r0, #0
 800301c:	d037      	beq.n	800308e <DS18B20_ReadAll+0x7e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 800301e:	1dfb      	adds	r3, r7, #7
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e02d      	b.n	8003082 <DS18B20_ReadAll+0x72>
		{
			ds18b20[i].ValidDataFlag = 0;
 8003026:	1dfb      	adds	r3, r7, #7
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	4a1b      	ldr	r2, [pc, #108]	@ (8003098 <DS18B20_ReadAll+0x88>)
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	18d3      	adds	r3, r2, r3
 8003030:	330c      	adds	r3, #12
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8003036:	1dfb      	adds	r3, r7, #7
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	011a      	lsls	r2, r3, #4
 800303c:	4b16      	ldr	r3, [pc, #88]	@ (8003098 <DS18B20_ReadAll+0x88>)
 800303e:	18d3      	adds	r3, r2, r3
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff ffc9 	bl	8002fd8 <DS18B20_Is>
 8003046:	1e03      	subs	r3, r0, #0
 8003048:	d016      	beq.n	8003078 <DS18B20_ReadAll+0x68>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 800304a:	1dfb      	adds	r3, r7, #7
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	3308      	adds	r3, #8
 8003052:	001a      	movs	r2, r3
 8003054:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <DS18B20_ReadAll+0x88>)
 8003056:	18d2      	adds	r2, r2, r3
 8003058:	1dfb      	adds	r3, r7, #7
 800305a:	781c      	ldrb	r4, [r3, #0]
 800305c:	1dfb      	adds	r3, r7, #7
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	0011      	movs	r1, r2
 8003062:	0018      	movs	r0, r3
 8003064:	f7ff fe0c 	bl	8002c80 <DS18B20_Read>
 8003068:	0003      	movs	r3, r0
 800306a:	0019      	movs	r1, r3
 800306c:	4a0a      	ldr	r2, [pc, #40]	@ (8003098 <DS18B20_ReadAll+0x88>)
 800306e:	0123      	lsls	r3, r4, #4
 8003070:	18d3      	adds	r3, r2, r3
 8003072:	330c      	adds	r3, #12
 8003074:	1c0a      	adds	r2, r1, #0
 8003076:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8003078:	1dfb      	adds	r3, r7, #7
 800307a:	781a      	ldrb	r2, [r3, #0]
 800307c:	1dfb      	adds	r3, r7, #7
 800307e:	3201      	adds	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	4b06      	ldr	r3, [pc, #24]	@ (800309c <DS18B20_ReadAll+0x8c>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	1dfa      	adds	r2, r7, #7
 8003088:	7812      	ldrb	r2, [r2, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d3cb      	bcc.n	8003026 <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	b003      	add	sp, #12
 8003094:	bd90      	pop	{r4, r7, pc}
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	200001f0 	.word	0x200001f0
 800309c:	20000244 	.word	0x20000244

080030a0 <DS18B20_GetROM>:

void DS18B20_GetROM(uint8_t number, uint8_t* ROM)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	0002      	movs	r2, r0
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	1dfb      	adds	r3, r7, #7
 80030ac:	701a      	strb	r2, [r3, #0]
	if( number >= TempSensorCount)
 80030ae:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <DS18B20_GetROM+0x68>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	1dfa      	adds	r2, r7, #7
 80030b4:	7812      	ldrb	r2, [r2, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d303      	bcc.n	80030c2 <DS18B20_GetROM+0x22>
		number = TempSensorCount;
 80030ba:	1dfb      	adds	r3, r7, #7
 80030bc:	4a12      	ldr	r2, [pc, #72]	@ (8003108 <DS18B20_GetROM+0x68>)
 80030be:	7812      	ldrb	r2, [r2, #0]
 80030c0:	701a      	strb	r2, [r3, #0]

	uint8_t i;

	for(i = 0; i < 8; i++)
 80030c2:	230f      	movs	r3, #15
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e012      	b.n	80030f2 <DS18B20_GetROM+0x52>
		ROM[i] = ds18b20[number].Address[i];
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	7819      	ldrb	r1, [r3, #0]
 80030d0:	240f      	movs	r4, #15
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	193b      	adds	r3, r7, r4
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	6838      	ldr	r0, [r7, #0]
 80030dc:	18c3      	adds	r3, r0, r3
 80030de:	480b      	ldr	r0, [pc, #44]	@ (800310c <DS18B20_GetROM+0x6c>)
 80030e0:	0109      	lsls	r1, r1, #4
 80030e2:	1841      	adds	r1, r0, r1
 80030e4:	5c8a      	ldrb	r2, [r1, r2]
 80030e6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 8; i++)
 80030e8:	193b      	adds	r3, r7, r4
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	193b      	adds	r3, r7, r4
 80030ee:	3201      	adds	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	230f      	movs	r3, #15
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b07      	cmp	r3, #7
 80030fa:	d9e7      	bls.n	80030cc <DS18B20_GetROM+0x2c>
}
 80030fc:	46c0      	nop			@ (mov r8, r8)
 80030fe:	46c0      	nop			@ (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	b005      	add	sp, #20
 8003104:	bd90      	pop	{r4, r7, pc}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	20000244 	.word	0x20000244
 800310c:	200001f0 	.word	0x200001f0

08003110 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
	return TempSensorCount;
 8003114:	4b02      	ldr	r3, [pc, #8]	@ (8003120 <DS18B20_Quantity+0x10>)
 8003116:	781b      	ldrb	r3, [r3, #0]
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			@ (mov r8, r8)
 8003120:	20000244 	.word	0x20000244

08003124 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	0002      	movs	r2, r0
 800312c:	6039      	str	r1, [r7, #0]
 800312e:	1dfb      	adds	r3, r7, #7
 8003130:	701a      	strb	r2, [r3, #0]
	if(!ds18b20[number].ValidDataFlag)
 8003132:	1dfb      	adds	r3, r7, #7
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	4a0b      	ldr	r2, [pc, #44]	@ (8003164 <DS18B20_GetTemperature+0x40>)
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	18d3      	adds	r3, r2, r3
 800313c:	330c      	adds	r3, #12
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <DS18B20_GetTemperature+0x24>
		return 0;
 8003144:	2300      	movs	r3, #0
 8003146:	e009      	b.n	800315c <DS18B20_GetTemperature+0x38>

	*destination = ds18b20[number].Temperature;
 8003148:	1dfb      	adds	r3, r7, #7
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	4a05      	ldr	r2, [pc, #20]	@ (8003164 <DS18B20_GetTemperature+0x40>)
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	18d3      	adds	r3, r2, r3
 8003152:	3308      	adds	r3, #8
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	601a      	str	r2, [r3, #0]
	return 1;
 800315a:	2301      	movs	r3, #1

}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b002      	add	sp, #8
 8003162:	bd80      	pop	{r7, pc}
 8003164:	200001f0 	.word	0x200001f0

08003168 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	0002      	movs	r2, r0
 8003170:	1dfb      	adds	r3, r7, #7
 8003172:	701a      	strb	r2, [r3, #0]
	uint8_t next = 0, i = 0, j;
 8003174:	240f      	movs	r4, #15
 8003176:	193b      	adds	r3, r7, r4
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	230e      	movs	r3, #14
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
	OneWire_Init(&OneWire, DS18B20_Pin_GPIO_Port, DS18B20_Pin_Pin); // Init OneWire bus
 8003184:	23a0      	movs	r3, #160	@ 0xa0
 8003186:	05d9      	lsls	r1, r3, #23
 8003188:	4b2b      	ldr	r3, [pc, #172]	@ (8003238 <DS18B20_Init+0xd0>)
 800318a:	2202      	movs	r2, #2
 800318c:	0018      	movs	r0, r3
 800318e:	f7ff fd2f 	bl	8002bf0 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 8003192:	193c      	adds	r4, r7, r4
 8003194:	4b28      	ldr	r3, [pc, #160]	@ (8003238 <DS18B20_Init+0xd0>)
 8003196:	0018      	movs	r0, r3
 8003198:	f7ff fcbd 	bl	8002b16 <OneWire_First>
 800319c:	0003      	movs	r3, r0
 800319e:	7023      	strb	r3, [r4, #0]
	while(next)
 80031a0:	e01f      	b.n	80031e2 <DS18B20_Init+0x7a>
	{
		TempSensorCount++;
 80031a2:	4b26      	ldr	r3, [pc, #152]	@ (800323c <DS18B20_Init+0xd4>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	3301      	adds	r3, #1
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	4b24      	ldr	r3, [pc, #144]	@ (800323c <DS18B20_Init+0xd4>)
 80031ac:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80031ae:	220e      	movs	r2, #14
 80031b0:	18bb      	adds	r3, r7, r2
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	18ba      	adds	r2, r7, r2
 80031b6:	1c59      	adds	r1, r3, #1
 80031b8:	7011      	strb	r1, [r2, #0]
 80031ba:	011a      	lsls	r2, r3, #4
 80031bc:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <DS18B20_Init+0xd8>)
 80031be:	18d2      	adds	r2, r2, r3
 80031c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003238 <DS18B20_Init+0xd0>)
 80031c2:	0011      	movs	r1, r2
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7ff fcef 	bl	8002ba8 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 80031ca:	230f      	movs	r3, #15
 80031cc:	18fc      	adds	r4, r7, r3
 80031ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003238 <DS18B20_Init+0xd0>)
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7ff fcb2 	bl	8002b3a <OneWire_Next>
 80031d6:	0003      	movs	r3, r0
 80031d8:	7023      	strb	r3, [r4, #0]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80031da:	4b18      	ldr	r3, [pc, #96]	@ (800323c <DS18B20_Init+0xd4>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d805      	bhi.n	80031ee <DS18B20_Init+0x86>
	while(next)
 80031e2:	230f      	movs	r3, #15
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1da      	bne.n	80031a2 <DS18B20_Init+0x3a>
 80031ec:	e000      	b.n	80031f0 <DS18B20_Init+0x88>
			break;
 80031ee:	46c0      	nop			@ (mov r8, r8)
	}

	for(j = 0; j < i; j++)
 80031f0:	230d      	movs	r3, #13
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	e010      	b.n	800321c <DS18B20_Init+0xb4>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 80031fa:	1dfb      	adds	r3, r7, #7
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	240d      	movs	r4, #13
 8003200:	193b      	adds	r3, r7, r4
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	0011      	movs	r1, r2
 8003206:	0018      	movs	r0, r3
 8003208:	f7ff fe06 	bl	8002e18 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 800320c:	f7ff fd22 	bl	8002c54 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8003210:	0021      	movs	r1, r4
 8003212:	187b      	adds	r3, r7, r1
 8003214:	781a      	ldrb	r2, [r3, #0]
 8003216:	187b      	adds	r3, r7, r1
 8003218:	3201      	adds	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	230d      	movs	r3, #13
 800321e:	18fa      	adds	r2, r7, r3
 8003220:	230e      	movs	r3, #14
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	7812      	ldrb	r2, [r2, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d3e6      	bcc.n	80031fa <DS18B20_Init+0x92>
	}
}
 800322c:	46c0      	nop			@ (mov r8, r8)
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	46bd      	mov	sp, r7
 8003232:	b005      	add	sp, #20
 8003234:	bd90      	pop	{r4, r7, pc}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	20000230 	.word	0x20000230
 800323c:	20000244 	.word	0x20000244
 8003240:	200001f0 	.word	0x200001f0

08003244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b087      	sub	sp, #28
 8003248:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800324a:	f000 fbfb 	bl	8003a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800324e:	f000 f86d 	bl	800332c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003252:	f000 f9b7 	bl	80035c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003256:	f000 f919 	bl	800348c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800325a:	f000 f965 	bl	8003528 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800325e:	f000 f8b9 	bl	80033d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  DS18B20_Init(DS18B20_Resolution_12bits);
 8003262:	200c      	movs	r0, #12
 8003264:	f7ff ff80 	bl	8003168 <DS18B20_Init>

    HAL_UART_Transmit(&huart2, (uint8_t*)"System Initialized.\r\n", 22, HAL_MAX_DELAY);
 8003268:	2301      	movs	r3, #1
 800326a:	425b      	negs	r3, r3
 800326c:	492a      	ldr	r1, [pc, #168]	@ (8003318 <main+0xd4>)
 800326e:	482b      	ldr	r0, [pc, #172]	@ (800331c <main+0xd8>)
 8003270:	2216      	movs	r2, #22
 8003272:	f002 f8d5 	bl	8005420 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	             DS18B20_ReadAll();
 8003276:	f7ff fecb 	bl	8003010 <DS18B20_ReadAll>
		         DS18B20_StartAll();
 800327a:	f7ff fceb 	bl	8002c54 <DS18B20_StartAll>
		         uint8_t ROM_tmp[8];
		         uint8_t i;

		         for (i = 0; i < DS18B20_Quantity(); i++)
 800327e:	230f      	movs	r3, #15
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e038      	b.n	80032fa <main+0xb6>
		         {
		             if (DS18B20_GetTemperature(i, &temperature))
 8003288:	4a25      	ldr	r2, [pc, #148]	@ (8003320 <main+0xdc>)
 800328a:	240f      	movs	r4, #15
 800328c:	193b      	adds	r3, r7, r4
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	0011      	movs	r1, r2
 8003292:	0018      	movs	r0, r3
 8003294:	f7ff ff46 	bl	8003124 <DS18B20_GetTemperature>
 8003298:	1e03      	subs	r3, r0, #0
 800329a:	d028      	beq.n	80032ee <main+0xaa>
		             {
		                 DS18B20_GetROM(i, ROM_tmp);
 800329c:	1d3a      	adds	r2, r7, #4
 800329e:	193b      	adds	r3, r7, r4
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	0011      	movs	r1, r2
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7ff fefb 	bl	80030a0 <DS18B20_GetROM>

		                 // Prepare the temperature string
		                 memset(string, 0, sizeof(string));
 80032aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003324 <main+0xe0>)
 80032ac:	2240      	movs	r2, #64	@ 0x40
 80032ae:	2100      	movs	r1, #0
 80032b0:	0018      	movs	r0, r3
 80032b2:	f003 fbdd 	bl	8006a70 <memset>
		                 sprintf(string, "temperature : %.2f C\r\n", i, temperature);
 80032b6:	193b      	adds	r3, r7, r4
 80032b8:	781c      	ldrb	r4, [r3, #0]
 80032ba:	4b19      	ldr	r3, [pc, #100]	@ (8003320 <main+0xdc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	1c18      	adds	r0, r3, #0
 80032c0:	f7ff f934 	bl	800252c <__aeabi_f2d>
 80032c4:	0002      	movs	r2, r0
 80032c6:	000b      	movs	r3, r1
 80032c8:	4917      	ldr	r1, [pc, #92]	@ (8003328 <main+0xe4>)
 80032ca:	4816      	ldr	r0, [pc, #88]	@ (8003324 <main+0xe0>)
 80032cc:	9200      	str	r2, [sp, #0]
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	0022      	movs	r2, r4
 80032d2:	f003 fb61 	bl	8006998 <siprintf>

		                 // Send temperature data via UART
		                 HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 80032d6:	4b13      	ldr	r3, [pc, #76]	@ (8003324 <main+0xe0>)
 80032d8:	0018      	movs	r0, r3
 80032da:	f7fc ff11 	bl	8000100 <strlen>
 80032de:	0003      	movs	r3, r0
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	2301      	movs	r3, #1
 80032e4:	425b      	negs	r3, r3
 80032e6:	490f      	ldr	r1, [pc, #60]	@ (8003324 <main+0xe0>)
 80032e8:	480c      	ldr	r0, [pc, #48]	@ (800331c <main+0xd8>)
 80032ea:	f002 f899 	bl	8005420 <HAL_UART_Transmit>
		         for (i = 0; i < DS18B20_Quantity(); i++)
 80032ee:	210f      	movs	r1, #15
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	781a      	ldrb	r2, [r3, #0]
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	3201      	adds	r2, #1
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	f7ff ff09 	bl	8003110 <DS18B20_Quantity>
 80032fe:	0003      	movs	r3, r0
 8003300:	001a      	movs	r2, r3
 8003302:	230f      	movs	r3, #15
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	4293      	cmp	r3, r2
 800330a:	d3bd      	bcc.n	8003288 <main+0x44>
		             }
		         }

		         // Delay for 1 second
		         HAL_Delay(1000);
 800330c:	23fa      	movs	r3, #250	@ 0xfa
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	0018      	movs	r0, r3
 8003312:	f000 fc1d 	bl	8003b50 <HAL_Delay>
  {
 8003316:	e7ae      	b.n	8003276 <main+0x32>
 8003318:	08008d70 	.word	0x08008d70
 800331c:	20000328 	.word	0x20000328
 8003320:	200003bc 	.word	0x200003bc
 8003324:	200003c0 	.word	0x200003c0
 8003328:	08008d88 	.word	0x08008d88

0800332c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b093      	sub	sp, #76	@ 0x4c
 8003330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003332:	2414      	movs	r4, #20
 8003334:	193b      	adds	r3, r7, r4
 8003336:	0018      	movs	r0, r3
 8003338:	2334      	movs	r3, #52	@ 0x34
 800333a:	001a      	movs	r2, r3
 800333c:	2100      	movs	r1, #0
 800333e:	f003 fb97 	bl	8006a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003342:	1d3b      	adds	r3, r7, #4
 8003344:	0018      	movs	r0, r3
 8003346:	2310      	movs	r3, #16
 8003348:	001a      	movs	r2, r3
 800334a:	2100      	movs	r1, #0
 800334c:	f003 fb90 	bl	8006a70 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	0018      	movs	r0, r3
 8003356:	f000 fe71 	bl	800403c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800335a:	193b      	adds	r3, r7, r4
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003360:	193b      	adds	r3, r7, r4
 8003362:	2280      	movs	r2, #128	@ 0x80
 8003364:	0252      	lsls	r2, r2, #9
 8003366:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003368:	0021      	movs	r1, r4
 800336a:	187b      	adds	r3, r7, r1
 800336c:	2202      	movs	r2, #2
 800336e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003370:	187b      	adds	r3, r7, r1
 8003372:	2203      	movs	r2, #3
 8003374:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003376:	187b      	adds	r3, r7, r1
 8003378:	2200      	movs	r2, #0
 800337a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 800337c:	187b      	adds	r3, r7, r1
 800337e:	2210      	movs	r2, #16
 8003380:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003382:	187b      	adds	r3, r7, r1
 8003384:	2280      	movs	r2, #128	@ 0x80
 8003386:	0292      	lsls	r2, r2, #10
 8003388:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800338a:	187b      	adds	r3, r7, r1
 800338c:	2280      	movs	r2, #128	@ 0x80
 800338e:	0592      	lsls	r2, r2, #22
 8003390:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003392:	187b      	adds	r3, r7, r1
 8003394:	0018      	movs	r0, r3
 8003396:	f000 fe9d 	bl	80040d4 <HAL_RCC_OscConfig>
 800339a:	1e03      	subs	r3, r0, #0
 800339c:	d001      	beq.n	80033a2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800339e:	f000 f955 	bl	800364c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033a2:	1d3b      	adds	r3, r7, #4
 80033a4:	2207      	movs	r2, #7
 80033a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033a8:	1d3b      	adds	r3, r7, #4
 80033aa:	2202      	movs	r2, #2
 80033ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033b4:	1d3b      	adds	r3, r7, #4
 80033b6:	2200      	movs	r2, #0
 80033b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	2102      	movs	r1, #2
 80033be:	0018      	movs	r0, r3
 80033c0:	f001 f998 	bl	80046f4 <HAL_RCC_ClockConfig>
 80033c4:	1e03      	subs	r3, r0, #0
 80033c6:	d001      	beq.n	80033cc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80033c8:	f000 f940 	bl	800364c <Error_Handler>
  }
}
 80033cc:	46c0      	nop			@ (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b013      	add	sp, #76	@ 0x4c
 80033d2:	bd90      	pop	{r4, r7, pc}

080033d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033da:	2310      	movs	r3, #16
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	0018      	movs	r0, r3
 80033e0:	2310      	movs	r3, #16
 80033e2:	001a      	movs	r2, r3
 80033e4:	2100      	movs	r1, #0
 80033e6:	f003 fb43 	bl	8006a70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ea:	1d3b      	adds	r3, r7, #4
 80033ec:	0018      	movs	r0, r3
 80033ee:	230c      	movs	r3, #12
 80033f0:	001a      	movs	r2, r3
 80033f2:	2100      	movs	r1, #0
 80033f4:	f003 fb3c 	bl	8006a70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033f8:	4b21      	ldr	r3, [pc, #132]	@ (8003480 <MX_TIM1_Init+0xac>)
 80033fa:	4a22      	ldr	r2, [pc, #136]	@ (8003484 <MX_TIM1_Init+0xb0>)
 80033fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80033fe:	4b20      	ldr	r3, [pc, #128]	@ (8003480 <MX_TIM1_Init+0xac>)
 8003400:	223f      	movs	r2, #63	@ 0x3f
 8003402:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003404:	4b1e      	ldr	r3, [pc, #120]	@ (8003480 <MX_TIM1_Init+0xac>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800340a:	4b1d      	ldr	r3, [pc, #116]	@ (8003480 <MX_TIM1_Init+0xac>)
 800340c:	4a1e      	ldr	r2, [pc, #120]	@ (8003488 <MX_TIM1_Init+0xb4>)
 800340e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003410:	4b1b      	ldr	r3, [pc, #108]	@ (8003480 <MX_TIM1_Init+0xac>)
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003416:	4b1a      	ldr	r3, [pc, #104]	@ (8003480 <MX_TIM1_Init+0xac>)
 8003418:	2200      	movs	r2, #0
 800341a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800341c:	4b18      	ldr	r3, [pc, #96]	@ (8003480 <MX_TIM1_Init+0xac>)
 800341e:	2200      	movs	r2, #0
 8003420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003422:	4b17      	ldr	r3, [pc, #92]	@ (8003480 <MX_TIM1_Init+0xac>)
 8003424:	0018      	movs	r0, r3
 8003426:	f001 fc43 	bl	8004cb0 <HAL_TIM_Base_Init>
 800342a:	1e03      	subs	r3, r0, #0
 800342c:	d001      	beq.n	8003432 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800342e:	f000 f90d 	bl	800364c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003432:	2110      	movs	r1, #16
 8003434:	187b      	adds	r3, r7, r1
 8003436:	2280      	movs	r2, #128	@ 0x80
 8003438:	0152      	lsls	r2, r2, #5
 800343a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800343c:	187a      	adds	r2, r7, r1
 800343e:	4b10      	ldr	r3, [pc, #64]	@ (8003480 <MX_TIM1_Init+0xac>)
 8003440:	0011      	movs	r1, r2
 8003442:	0018      	movs	r0, r3
 8003444:	f001 fcda 	bl	8004dfc <HAL_TIM_ConfigClockSource>
 8003448:	1e03      	subs	r3, r0, #0
 800344a:	d001      	beq.n	8003450 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800344c:	f000 f8fe 	bl	800364c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	2200      	movs	r2, #0
 800345a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003462:	1d3a      	adds	r2, r7, #4
 8003464:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <MX_TIM1_Init+0xac>)
 8003466:	0011      	movs	r1, r2
 8003468:	0018      	movs	r0, r3
 800346a:	f001 febd 	bl	80051e8 <HAL_TIMEx_MasterConfigSynchronization>
 800346e:	1e03      	subs	r3, r0, #0
 8003470:	d001      	beq.n	8003476 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8003472:	f000 f8eb 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	46bd      	mov	sp, r7
 800347a:	b008      	add	sp, #32
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	20000248 	.word	0x20000248
 8003484:	40012c00 	.word	0x40012c00
 8003488:	0000fffe 	.word	0x0000fffe

0800348c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003490:	4b23      	ldr	r3, [pc, #140]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 8003492:	4a24      	ldr	r2, [pc, #144]	@ (8003524 <MX_USART1_UART_Init+0x98>)
 8003494:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003496:	4b22      	ldr	r3, [pc, #136]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 8003498:	22e1      	movs	r2, #225	@ 0xe1
 800349a:	0252      	lsls	r2, r2, #9
 800349c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800349e:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 80034b2:	220c      	movs	r2, #12
 80034b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034bc:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 80034be:	2200      	movs	r2, #0
 80034c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034c2:	4b17      	ldr	r3, [pc, #92]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034c8:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034ce:	4b14      	ldr	r3, [pc, #80]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80034d4:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 80034d6:	0018      	movs	r0, r3
 80034d8:	f001 ff44 	bl	8005364 <HAL_HalfDuplex_Init>
 80034dc:	1e03      	subs	r3, r0, #0
 80034de:	d001      	beq.n	80034e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80034e0:	f000 f8b4 	bl	800364c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 80034e6:	2100      	movs	r1, #0
 80034e8:	0018      	movs	r0, r3
 80034ea:	f002 fc4f 	bl	8005d8c <HAL_UARTEx_SetTxFifoThreshold>
 80034ee:	1e03      	subs	r3, r0, #0
 80034f0:	d001      	beq.n	80034f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80034f2:	f000 f8ab 	bl	800364c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 80034f8:	2100      	movs	r1, #0
 80034fa:	0018      	movs	r0, r3
 80034fc:	f002 fc86 	bl	8005e0c <HAL_UARTEx_SetRxFifoThreshold>
 8003500:	1e03      	subs	r3, r0, #0
 8003502:	d001      	beq.n	8003508 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003504:	f000 f8a2 	bl	800364c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003508:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <MX_USART1_UART_Init+0x94>)
 800350a:	0018      	movs	r0, r3
 800350c:	f002 fc04 	bl	8005d18 <HAL_UARTEx_DisableFifoMode>
 8003510:	1e03      	subs	r3, r0, #0
 8003512:	d001      	beq.n	8003518 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003514:	f000 f89a 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003518:	46c0      	nop			@ (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	20000294 	.word	0x20000294
 8003524:	40013800 	.word	0x40013800

08003528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800352c:	4b23      	ldr	r3, [pc, #140]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 800352e:	4a24      	ldr	r2, [pc, #144]	@ (80035c0 <MX_USART2_UART_Init+0x98>)
 8003530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003532:	4b22      	ldr	r3, [pc, #136]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 8003534:	22e1      	movs	r2, #225	@ 0xe1
 8003536:	0252      	lsls	r2, r2, #9
 8003538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800353a:	4b20      	ldr	r3, [pc, #128]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 800353c:	2200      	movs	r2, #0
 800353e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003540:	4b1e      	ldr	r3, [pc, #120]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 8003542:	2200      	movs	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003546:	4b1d      	ldr	r3, [pc, #116]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 8003548:	2200      	movs	r2, #0
 800354a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800354c:	4b1b      	ldr	r3, [pc, #108]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 800354e:	220c      	movs	r2, #12
 8003550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003552:	4b1a      	ldr	r3, [pc, #104]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 8003554:	2200      	movs	r2, #0
 8003556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003558:	4b18      	ldr	r3, [pc, #96]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 800355a:	2200      	movs	r2, #0
 800355c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800355e:	4b17      	ldr	r3, [pc, #92]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 8003560:	2200      	movs	r2, #0
 8003562:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003564:	4b15      	ldr	r3, [pc, #84]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 8003566:	2200      	movs	r2, #0
 8003568:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800356a:	4b14      	ldr	r3, [pc, #80]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 800356c:	2200      	movs	r2, #0
 800356e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003570:	4b12      	ldr	r3, [pc, #72]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 8003572:	0018      	movs	r0, r3
 8003574:	f001 fea0 	bl	80052b8 <HAL_UART_Init>
 8003578:	1e03      	subs	r3, r0, #0
 800357a:	d001      	beq.n	8003580 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800357c:	f000 f866 	bl	800364c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003580:	4b0e      	ldr	r3, [pc, #56]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 8003582:	2100      	movs	r1, #0
 8003584:	0018      	movs	r0, r3
 8003586:	f002 fc01 	bl	8005d8c <HAL_UARTEx_SetTxFifoThreshold>
 800358a:	1e03      	subs	r3, r0, #0
 800358c:	d001      	beq.n	8003592 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800358e:	f000 f85d 	bl	800364c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003592:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 8003594:	2100      	movs	r1, #0
 8003596:	0018      	movs	r0, r3
 8003598:	f002 fc38 	bl	8005e0c <HAL_UARTEx_SetRxFifoThreshold>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d001      	beq.n	80035a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80035a0:	f000 f854 	bl	800364c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80035a4:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <MX_USART2_UART_Init+0x94>)
 80035a6:	0018      	movs	r0, r3
 80035a8:	f002 fbb6 	bl	8005d18 <HAL_UARTEx_DisableFifoMode>
 80035ac:	1e03      	subs	r3, r0, #0
 80035ae:	d001      	beq.n	80035b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80035b0:	f000 f84c 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035b4:	46c0      	nop			@ (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	20000328 	.word	0x20000328
 80035c0:	40004400 	.word	0x40004400

080035c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035c4:	b590      	push	{r4, r7, lr}
 80035c6:	b089      	sub	sp, #36	@ 0x24
 80035c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ca:	240c      	movs	r4, #12
 80035cc:	193b      	adds	r3, r7, r4
 80035ce:	0018      	movs	r0, r3
 80035d0:	2314      	movs	r3, #20
 80035d2:	001a      	movs	r2, r3
 80035d4:	2100      	movs	r1, #0
 80035d6:	f003 fa4b 	bl	8006a70 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035da:	4b1b      	ldr	r3, [pc, #108]	@ (8003648 <MX_GPIO_Init+0x84>)
 80035dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035de:	4b1a      	ldr	r3, [pc, #104]	@ (8003648 <MX_GPIO_Init+0x84>)
 80035e0:	2120      	movs	r1, #32
 80035e2:	430a      	orrs	r2, r1
 80035e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80035e6:	4b18      	ldr	r3, [pc, #96]	@ (8003648 <MX_GPIO_Init+0x84>)
 80035e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ea:	2220      	movs	r2, #32
 80035ec:	4013      	ands	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f2:	4b15      	ldr	r3, [pc, #84]	@ (8003648 <MX_GPIO_Init+0x84>)
 80035f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035f6:	4b14      	ldr	r3, [pc, #80]	@ (8003648 <MX_GPIO_Init+0x84>)
 80035f8:	2101      	movs	r1, #1
 80035fa:	430a      	orrs	r2, r1
 80035fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80035fe:	4b12      	ldr	r3, [pc, #72]	@ (8003648 <MX_GPIO_Init+0x84>)
 8003600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003602:	2201      	movs	r2, #1
 8003604:	4013      	ands	r3, r2
 8003606:	607b      	str	r3, [r7, #4]
 8003608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Pin_GPIO_Port, DS18B20_Pin_Pin, GPIO_PIN_RESET);
 800360a:	23a0      	movs	r3, #160	@ 0xa0
 800360c:	05db      	lsls	r3, r3, #23
 800360e:	2200      	movs	r2, #0
 8003610:	2102      	movs	r1, #2
 8003612:	0018      	movs	r0, r3
 8003614:	f000 fcf5 	bl	8004002 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS18B20_Pin_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin_Pin;
 8003618:	0021      	movs	r1, r4
 800361a:	187b      	adds	r3, r7, r1
 800361c:	2202      	movs	r2, #2
 800361e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003620:	187b      	adds	r3, r7, r1
 8003622:	2201      	movs	r2, #1
 8003624:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003626:	187b      	adds	r3, r7, r1
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362c:	187b      	adds	r3, r7, r1
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DS18B20_Pin_GPIO_Port, &GPIO_InitStruct);
 8003632:	187a      	adds	r2, r7, r1
 8003634:	23a0      	movs	r3, #160	@ 0xa0
 8003636:	05db      	lsls	r3, r3, #23
 8003638:	0011      	movs	r1, r2
 800363a:	0018      	movs	r0, r3
 800363c:	f000 fb60 	bl	8003d00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b009      	add	sp, #36	@ 0x24
 8003646:	bd90      	pop	{r4, r7, pc}
 8003648:	40021000 	.word	0x40021000

0800364c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003650:	b672      	cpsid	i
}
 8003652:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003654:	46c0      	nop			@ (mov r8, r8)
 8003656:	e7fd      	b.n	8003654 <Error_Handler+0x8>

08003658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365e:	4b0f      	ldr	r3, [pc, #60]	@ (800369c <HAL_MspInit+0x44>)
 8003660:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003662:	4b0e      	ldr	r3, [pc, #56]	@ (800369c <HAL_MspInit+0x44>)
 8003664:	2101      	movs	r1, #1
 8003666:	430a      	orrs	r2, r1
 8003668:	641a      	str	r2, [r3, #64]	@ 0x40
 800366a:	4b0c      	ldr	r3, [pc, #48]	@ (800369c <HAL_MspInit+0x44>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	2201      	movs	r2, #1
 8003670:	4013      	ands	r3, r2
 8003672:	607b      	str	r3, [r7, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	4b09      	ldr	r3, [pc, #36]	@ (800369c <HAL_MspInit+0x44>)
 8003678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800367a:	4b08      	ldr	r3, [pc, #32]	@ (800369c <HAL_MspInit+0x44>)
 800367c:	2180      	movs	r1, #128	@ 0x80
 800367e:	0549      	lsls	r1, r1, #21
 8003680:	430a      	orrs	r2, r1
 8003682:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003684:	4b05      	ldr	r3, [pc, #20]	@ (800369c <HAL_MspInit+0x44>)
 8003686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003688:	2380      	movs	r3, #128	@ 0x80
 800368a:	055b      	lsls	r3, r3, #21
 800368c:	4013      	ands	r3, r2
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	46bd      	mov	sp, r7
 8003696:	b002      	add	sp, #8
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	40021000 	.word	0x40021000

080036a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0a      	ldr	r2, [pc, #40]	@ (80036d8 <HAL_TIM_Base_MspInit+0x38>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10d      	bne.n	80036ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036b2:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <HAL_TIM_Base_MspInit+0x3c>)
 80036b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b6:	4b09      	ldr	r3, [pc, #36]	@ (80036dc <HAL_TIM_Base_MspInit+0x3c>)
 80036b8:	2180      	movs	r1, #128	@ 0x80
 80036ba:	0109      	lsls	r1, r1, #4
 80036bc:	430a      	orrs	r2, r1
 80036be:	641a      	str	r2, [r3, #64]	@ 0x40
 80036c0:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <HAL_TIM_Base_MspInit+0x3c>)
 80036c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	4013      	ands	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80036ce:	46c0      	nop			@ (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b004      	add	sp, #16
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40021000 	.word	0x40021000

080036e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036e0:	b590      	push	{r4, r7, lr}
 80036e2:	b093      	sub	sp, #76	@ 0x4c
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e8:	2334      	movs	r3, #52	@ 0x34
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	0018      	movs	r0, r3
 80036ee:	2314      	movs	r3, #20
 80036f0:	001a      	movs	r2, r3
 80036f2:	2100      	movs	r1, #0
 80036f4:	f003 f9bc 	bl	8006a70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036f8:	2418      	movs	r4, #24
 80036fa:	193b      	adds	r3, r7, r4
 80036fc:	0018      	movs	r0, r3
 80036fe:	231c      	movs	r3, #28
 8003700:	001a      	movs	r2, r3
 8003702:	2100      	movs	r1, #0
 8003704:	f003 f9b4 	bl	8006a70 <memset>
  if(huart->Instance==USART1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a46      	ldr	r2, [pc, #280]	@ (8003828 <HAL_UART_MspInit+0x148>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d140      	bne.n	8003794 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003712:	193b      	adds	r3, r7, r4
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003718:	193b      	adds	r3, r7, r4
 800371a:	2200      	movs	r2, #0
 800371c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800371e:	193b      	adds	r3, r7, r4
 8003720:	0018      	movs	r0, r3
 8003722:	f001 f991 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 8003726:	1e03      	subs	r3, r0, #0
 8003728:	d001      	beq.n	800372e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800372a:	f7ff ff8f 	bl	800364c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800372e:	4b3f      	ldr	r3, [pc, #252]	@ (800382c <HAL_UART_MspInit+0x14c>)
 8003730:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003732:	4b3e      	ldr	r3, [pc, #248]	@ (800382c <HAL_UART_MspInit+0x14c>)
 8003734:	2180      	movs	r1, #128	@ 0x80
 8003736:	01c9      	lsls	r1, r1, #7
 8003738:	430a      	orrs	r2, r1
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40
 800373c:	4b3b      	ldr	r3, [pc, #236]	@ (800382c <HAL_UART_MspInit+0x14c>)
 800373e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003740:	2380      	movs	r3, #128	@ 0x80
 8003742:	01db      	lsls	r3, r3, #7
 8003744:	4013      	ands	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374a:	4b38      	ldr	r3, [pc, #224]	@ (800382c <HAL_UART_MspInit+0x14c>)
 800374c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800374e:	4b37      	ldr	r3, [pc, #220]	@ (800382c <HAL_UART_MspInit+0x14c>)
 8003750:	2101      	movs	r1, #1
 8003752:	430a      	orrs	r2, r1
 8003754:	635a      	str	r2, [r3, #52]	@ 0x34
 8003756:	4b35      	ldr	r3, [pc, #212]	@ (800382c <HAL_UART_MspInit+0x14c>)
 8003758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375a:	2201      	movs	r2, #1
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003762:	2134      	movs	r1, #52	@ 0x34
 8003764:	187b      	adds	r3, r7, r1
 8003766:	2280      	movs	r2, #128	@ 0x80
 8003768:	0092      	lsls	r2, r2, #2
 800376a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800376c:	187b      	adds	r3, r7, r1
 800376e:	2212      	movs	r2, #18
 8003770:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003772:	187b      	adds	r3, r7, r1
 8003774:	2201      	movs	r2, #1
 8003776:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003778:	187b      	adds	r3, r7, r1
 800377a:	2200      	movs	r2, #0
 800377c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800377e:	187b      	adds	r3, r7, r1
 8003780:	2201      	movs	r2, #1
 8003782:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003784:	187a      	adds	r2, r7, r1
 8003786:	23a0      	movs	r3, #160	@ 0xa0
 8003788:	05db      	lsls	r3, r3, #23
 800378a:	0011      	movs	r1, r2
 800378c:	0018      	movs	r0, r3
 800378e:	f000 fab7 	bl	8003d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003792:	e044      	b.n	800381e <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a25      	ldr	r2, [pc, #148]	@ (8003830 <HAL_UART_MspInit+0x150>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d13f      	bne.n	800381e <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800379e:	2118      	movs	r1, #24
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	2202      	movs	r2, #2
 80037a4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	2200      	movs	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	0018      	movs	r0, r3
 80037b0:	f001 f94a 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 80037b4:	1e03      	subs	r3, r0, #0
 80037b6:	d001      	beq.n	80037bc <HAL_UART_MspInit+0xdc>
      Error_Handler();
 80037b8:	f7ff ff48 	bl	800364c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80037bc:	4b1b      	ldr	r3, [pc, #108]	@ (800382c <HAL_UART_MspInit+0x14c>)
 80037be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037c0:	4b1a      	ldr	r3, [pc, #104]	@ (800382c <HAL_UART_MspInit+0x14c>)
 80037c2:	2180      	movs	r1, #128	@ 0x80
 80037c4:	0289      	lsls	r1, r1, #10
 80037c6:	430a      	orrs	r2, r1
 80037c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037ca:	4b18      	ldr	r3, [pc, #96]	@ (800382c <HAL_UART_MspInit+0x14c>)
 80037cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037ce:	2380      	movs	r3, #128	@ 0x80
 80037d0:	029b      	lsls	r3, r3, #10
 80037d2:	4013      	ands	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d8:	4b14      	ldr	r3, [pc, #80]	@ (800382c <HAL_UART_MspInit+0x14c>)
 80037da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037dc:	4b13      	ldr	r3, [pc, #76]	@ (800382c <HAL_UART_MspInit+0x14c>)
 80037de:	2101      	movs	r1, #1
 80037e0:	430a      	orrs	r2, r1
 80037e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80037e4:	4b11      	ldr	r3, [pc, #68]	@ (800382c <HAL_UART_MspInit+0x14c>)
 80037e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e8:	2201      	movs	r2, #1
 80037ea:	4013      	ands	r3, r2
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037f0:	2134      	movs	r1, #52	@ 0x34
 80037f2:	187b      	adds	r3, r7, r1
 80037f4:	220c      	movs	r2, #12
 80037f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	2202      	movs	r2, #2
 80037fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	187b      	adds	r3, r7, r1
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003804:	187b      	adds	r3, r7, r1
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800380a:	187b      	adds	r3, r7, r1
 800380c:	2201      	movs	r2, #1
 800380e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003810:	187a      	adds	r2, r7, r1
 8003812:	23a0      	movs	r3, #160	@ 0xa0
 8003814:	05db      	lsls	r3, r3, #23
 8003816:	0011      	movs	r1, r2
 8003818:	0018      	movs	r0, r3
 800381a:	f000 fa71 	bl	8003d00 <HAL_GPIO_Init>
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b013      	add	sp, #76	@ 0x4c
 8003824:	bd90      	pop	{r4, r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	40013800 	.word	0x40013800
 800382c:	40021000 	.word	0x40021000
 8003830:	40004400 	.word	0x40004400

08003834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	e7fd      	b.n	8003838 <NMI_Handler+0x4>

0800383c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003840:	46c0      	nop			@ (mov r8, r8)
 8003842:	e7fd      	b.n	8003840 <HardFault_Handler+0x4>

08003844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003848:	46c0      	nop			@ (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003852:	46c0      	nop			@ (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800385c:	f000 f95c 	bl	8003b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003860:	46c0      	nop			@ (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	af00      	add	r7, sp, #0
  return 1;
 800386a:	2301      	movs	r3, #1
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <_kill>:

int _kill(int pid, int sig)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800387c:	f003 f952 	bl	8006b24 <__errno>
 8003880:	0003      	movs	r3, r0
 8003882:	2216      	movs	r2, #22
 8003884:	601a      	str	r2, [r3, #0]
  return -1;
 8003886:	2301      	movs	r3, #1
 8003888:	425b      	negs	r3, r3
}
 800388a:	0018      	movs	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	b002      	add	sp, #8
 8003890:	bd80      	pop	{r7, pc}

08003892 <_exit>:

void _exit (int status)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800389a:	2301      	movs	r3, #1
 800389c:	425a      	negs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	0011      	movs	r1, r2
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7ff ffe5 	bl	8003872 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038a8:	46c0      	nop			@ (mov r8, r8)
 80038aa:	e7fd      	b.n	80038a8 <_exit+0x16>

080038ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	e00a      	b.n	80038d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038be:	e000      	b.n	80038c2 <_read+0x16>
 80038c0:	bf00      	nop
 80038c2:	0001      	movs	r1, r0
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	60ba      	str	r2, [r7, #8]
 80038ca:	b2ca      	uxtb	r2, r1
 80038cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	3301      	adds	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	dbf0      	blt.n	80038be <_read+0x12>
  }

  return len;
 80038dc:	687b      	ldr	r3, [r7, #4]
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b006      	add	sp, #24
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b086      	sub	sp, #24
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	e009      	b.n	800390c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	60ba      	str	r2, [r7, #8]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	0018      	movs	r0, r3
 8003902:	e000      	b.n	8003906 <_write+0x20>
 8003904:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	3301      	adds	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	429a      	cmp	r2, r3
 8003912:	dbf1      	blt.n	80038f8 <_write+0x12>
  }
  return len;
 8003914:	687b      	ldr	r3, [r7, #4]
}
 8003916:	0018      	movs	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	b006      	add	sp, #24
 800391c:	bd80      	pop	{r7, pc}

0800391e <_close>:

int _close(int file)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003926:	2301      	movs	r3, #1
 8003928:	425b      	negs	r3, r3
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b002      	add	sp, #8
 8003930:	bd80      	pop	{r7, pc}

08003932 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2280      	movs	r2, #128	@ 0x80
 8003940:	0192      	lsls	r2, r2, #6
 8003942:	605a      	str	r2, [r3, #4]
  return 0;
 8003944:	2300      	movs	r3, #0
}
 8003946:	0018      	movs	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	b002      	add	sp, #8
 800394c:	bd80      	pop	{r7, pc}

0800394e <_isatty>:

int _isatty(int file)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003956:	2301      	movs	r3, #1
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}

08003960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800396c:	2300      	movs	r3, #0
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b004      	add	sp, #16
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003980:	4a14      	ldr	r2, [pc, #80]	@ (80039d4 <_sbrk+0x5c>)
 8003982:	4b15      	ldr	r3, [pc, #84]	@ (80039d8 <_sbrk+0x60>)
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800398c:	4b13      	ldr	r3, [pc, #76]	@ (80039dc <_sbrk+0x64>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d102      	bne.n	800399a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003994:	4b11      	ldr	r3, [pc, #68]	@ (80039dc <_sbrk+0x64>)
 8003996:	4a12      	ldr	r2, [pc, #72]	@ (80039e0 <_sbrk+0x68>)
 8003998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800399a:	4b10      	ldr	r3, [pc, #64]	@ (80039dc <_sbrk+0x64>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	18d3      	adds	r3, r2, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d207      	bcs.n	80039b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039a8:	f003 f8bc 	bl	8006b24 <__errno>
 80039ac:	0003      	movs	r3, r0
 80039ae:	220c      	movs	r2, #12
 80039b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039b2:	2301      	movs	r3, #1
 80039b4:	425b      	negs	r3, r3
 80039b6:	e009      	b.n	80039cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039b8:	4b08      	ldr	r3, [pc, #32]	@ (80039dc <_sbrk+0x64>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039be:	4b07      	ldr	r3, [pc, #28]	@ (80039dc <_sbrk+0x64>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	18d2      	adds	r2, r2, r3
 80039c6:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <_sbrk+0x64>)
 80039c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80039ca:	68fb      	ldr	r3, [r7, #12]
}
 80039cc:	0018      	movs	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b006      	add	sp, #24
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20009000 	.word	0x20009000
 80039d8:	00000400 	.word	0x00000400
 80039dc:	20000400 	.word	0x20000400
 80039e0:	20000558 	.word	0x20000558

080039e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80039f0:	480d      	ldr	r0, [pc, #52]	@ (8003a28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80039f4:	f7ff fff6 	bl	80039e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039f8:	480c      	ldr	r0, [pc, #48]	@ (8003a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80039fa:	490d      	ldr	r1, [pc, #52]	@ (8003a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80039fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003a34 <LoopForever+0xe>)
  movs r3, #0
 80039fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a00:	e002      	b.n	8003a08 <LoopCopyDataInit>

08003a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a06:	3304      	adds	r3, #4

08003a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a0c:	d3f9      	bcc.n	8003a02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a10:	4c0a      	ldr	r4, [pc, #40]	@ (8003a3c <LoopForever+0x16>)
  movs r3, #0
 8003a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a14:	e001      	b.n	8003a1a <LoopFillZerobss>

08003a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a18:	3204      	adds	r2, #4

08003a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a1c:	d3fb      	bcc.n	8003a16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a1e:	f003 f887 	bl	8006b30 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003a22:	f7ff fc0f 	bl	8003244 <main>

08003a26 <LoopForever>:

LoopForever:
  b LoopForever
 8003a26:	e7fe      	b.n	8003a26 <LoopForever>
  ldr   r0, =_estack
 8003a28:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a30:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003a34:	080091e0 	.word	0x080091e0
  ldr r2, =_sbss
 8003a38:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003a3c:	20000554 	.word	0x20000554

08003a40 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a40:	e7fe      	b.n	8003a40 <ADC1_IRQHandler>
	...

08003a44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a4a:	1dfb      	adds	r3, r7, #7
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_Init+0x3c>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b0a      	ldr	r3, [pc, #40]	@ (8003a80 <HAL_Init+0x3c>)
 8003a56:	2180      	movs	r1, #128	@ 0x80
 8003a58:	0049      	lsls	r1, r1, #1
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a5e:	2003      	movs	r0, #3
 8003a60:	f000 f810 	bl	8003a84 <HAL_InitTick>
 8003a64:	1e03      	subs	r3, r0, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003a68:	1dfb      	adds	r3, r7, #7
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	e001      	b.n	8003a74 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003a70:	f7ff fdf2 	bl	8003658 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a74:	1dfb      	adds	r3, r7, #7
 8003a76:	781b      	ldrb	r3, [r3, #0]
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40022000 	.word	0x40022000

08003a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a8c:	230f      	movs	r3, #15
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003a94:	4b1d      	ldr	r3, [pc, #116]	@ (8003b0c <HAL_InitTick+0x88>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d02b      	beq.n	8003af4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003b10 <HAL_InitTick+0x8c>)
 8003a9e:	681c      	ldr	r4, [r3, #0]
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b0c <HAL_InitTick+0x88>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	23fa      	movs	r3, #250	@ 0xfa
 8003aa8:	0098      	lsls	r0, r3, #2
 8003aaa:	f7fc fb45 	bl	8000138 <__udivsi3>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	0020      	movs	r0, r4
 8003ab4:	f7fc fb40 	bl	8000138 <__udivsi3>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 f913 	bl	8003ce6 <HAL_SYSTICK_Config>
 8003ac0:	1e03      	subs	r3, r0, #0
 8003ac2:	d112      	bne.n	8003aea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d80a      	bhi.n	8003ae0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	2301      	movs	r3, #1
 8003ace:	425b      	negs	r3, r3
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 f8f2 	bl	8003cbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b14 <HAL_InitTick+0x90>)
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e00d      	b.n	8003afc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003ae0:	230f      	movs	r3, #15
 8003ae2:	18fb      	adds	r3, r7, r3
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	701a      	strb	r2, [r3, #0]
 8003ae8:	e008      	b.n	8003afc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003aea:	230f      	movs	r3, #15
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	2201      	movs	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e003      	b.n	8003afc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003af4:	230f      	movs	r3, #15
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	2201      	movs	r2, #1
 8003afa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003afc:	230f      	movs	r3, #15
 8003afe:	18fb      	adds	r3, r7, r3
 8003b00:	781b      	ldrb	r3, [r3, #0]
}
 8003b02:	0018      	movs	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b005      	add	sp, #20
 8003b08:	bd90      	pop	{r4, r7, pc}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	20000008 	.word	0x20000008
 8003b10:	20000000 	.word	0x20000000
 8003b14:	20000004 	.word	0x20000004

08003b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b1c:	4b05      	ldr	r3, [pc, #20]	@ (8003b34 <HAL_IncTick+0x1c>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	001a      	movs	r2, r3
 8003b22:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <HAL_IncTick+0x20>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	18d2      	adds	r2, r2, r3
 8003b28:	4b03      	ldr	r3, [pc, #12]	@ (8003b38 <HAL_IncTick+0x20>)
 8003b2a:	601a      	str	r2, [r3, #0]
}
 8003b2c:	46c0      	nop			@ (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	20000008 	.word	0x20000008
 8003b38:	20000404 	.word	0x20000404

08003b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <HAL_GetTick+0x10>)
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	0018      	movs	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	20000404 	.word	0x20000404

08003b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7ff fff0 	bl	8003b3c <HAL_GetTick>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3301      	adds	r3, #1
 8003b68:	d005      	beq.n	8003b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <HAL_Delay+0x44>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	001a      	movs	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	189b      	adds	r3, r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	f7ff ffe0 	bl	8003b3c <HAL_GetTick>
 8003b7c:	0002      	movs	r2, r0
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d8f7      	bhi.n	8003b78 <HAL_Delay+0x28>
  {
  }
}
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b004      	add	sp, #16
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000008 	.word	0x20000008

08003b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	0002      	movs	r2, r0
 8003ba0:	6039      	str	r1, [r7, #0]
 8003ba2:	1dfb      	adds	r3, r7, #7
 8003ba4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ba6:	1dfb      	adds	r3, r7, #7
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bac:	d828      	bhi.n	8003c00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bae:	4a2f      	ldr	r2, [pc, #188]	@ (8003c6c <__NVIC_SetPriority+0xd4>)
 8003bb0:	1dfb      	adds	r3, r7, #7
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b25b      	sxtb	r3, r3
 8003bb6:	089b      	lsrs	r3, r3, #2
 8003bb8:	33c0      	adds	r3, #192	@ 0xc0
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	589b      	ldr	r3, [r3, r2]
 8003bbe:	1dfa      	adds	r2, r7, #7
 8003bc0:	7812      	ldrb	r2, [r2, #0]
 8003bc2:	0011      	movs	r1, r2
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	00d2      	lsls	r2, r2, #3
 8003bca:	21ff      	movs	r1, #255	@ 0xff
 8003bcc:	4091      	lsls	r1, r2
 8003bce:	000a      	movs	r2, r1
 8003bd0:	43d2      	mvns	r2, r2
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	019b      	lsls	r3, r3, #6
 8003bda:	22ff      	movs	r2, #255	@ 0xff
 8003bdc:	401a      	ands	r2, r3
 8003bde:	1dfb      	adds	r3, r7, #7
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	0018      	movs	r0, r3
 8003be4:	2303      	movs	r3, #3
 8003be6:	4003      	ands	r3, r0
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bec:	481f      	ldr	r0, [pc, #124]	@ (8003c6c <__NVIC_SetPriority+0xd4>)
 8003bee:	1dfb      	adds	r3, r7, #7
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	b25b      	sxtb	r3, r3
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	33c0      	adds	r3, #192	@ 0xc0
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003bfe:	e031      	b.n	8003c64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c00:	4a1b      	ldr	r2, [pc, #108]	@ (8003c70 <__NVIC_SetPriority+0xd8>)
 8003c02:	1dfb      	adds	r3, r7, #7
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	0019      	movs	r1, r3
 8003c08:	230f      	movs	r3, #15
 8003c0a:	400b      	ands	r3, r1
 8003c0c:	3b08      	subs	r3, #8
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	3306      	adds	r3, #6
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	18d3      	adds	r3, r2, r3
 8003c16:	3304      	adds	r3, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	1dfa      	adds	r2, r7, #7
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	0011      	movs	r1, r2
 8003c20:	2203      	movs	r2, #3
 8003c22:	400a      	ands	r2, r1
 8003c24:	00d2      	lsls	r2, r2, #3
 8003c26:	21ff      	movs	r1, #255	@ 0xff
 8003c28:	4091      	lsls	r1, r2
 8003c2a:	000a      	movs	r2, r1
 8003c2c:	43d2      	mvns	r2, r2
 8003c2e:	401a      	ands	r2, r3
 8003c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	019b      	lsls	r3, r3, #6
 8003c36:	22ff      	movs	r2, #255	@ 0xff
 8003c38:	401a      	ands	r2, r3
 8003c3a:	1dfb      	adds	r3, r7, #7
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	2303      	movs	r3, #3
 8003c42:	4003      	ands	r3, r0
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c48:	4809      	ldr	r0, [pc, #36]	@ (8003c70 <__NVIC_SetPriority+0xd8>)
 8003c4a:	1dfb      	adds	r3, r7, #7
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	001c      	movs	r4, r3
 8003c50:	230f      	movs	r3, #15
 8003c52:	4023      	ands	r3, r4
 8003c54:	3b08      	subs	r3, #8
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	3306      	adds	r3, #6
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	18c3      	adds	r3, r0, r3
 8003c60:	3304      	adds	r3, #4
 8003c62:	601a      	str	r2, [r3, #0]
}
 8003c64:	46c0      	nop			@ (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b003      	add	sp, #12
 8003c6a:	bd90      	pop	{r4, r7, pc}
 8003c6c:	e000e100 	.word	0xe000e100
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	1e5a      	subs	r2, r3, #1
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	045b      	lsls	r3, r3, #17
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d301      	bcc.n	8003c8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e010      	b.n	8003cae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb8 <SysTick_Config+0x44>)
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	3a01      	subs	r2, #1
 8003c92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c94:	2301      	movs	r3, #1
 8003c96:	425b      	negs	r3, r3
 8003c98:	2103      	movs	r1, #3
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7ff ff7c 	bl	8003b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca0:	4b05      	ldr	r3, [pc, #20]	@ (8003cb8 <SysTick_Config+0x44>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ca6:	4b04      	ldr	r3, [pc, #16]	@ (8003cb8 <SysTick_Config+0x44>)
 8003ca8:	2207      	movs	r2, #7
 8003caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b002      	add	sp, #8
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	e000e010 	.word	0xe000e010

08003cbc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	210f      	movs	r1, #15
 8003cc8:	187b      	adds	r3, r7, r1
 8003cca:	1c02      	adds	r2, r0, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	187b      	adds	r3, r7, r1
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b25b      	sxtb	r3, r3
 8003cd6:	0011      	movs	r1, r2
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f7ff ff5d 	bl	8003b98 <__NVIC_SetPriority>
}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b004      	add	sp, #16
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7ff ffbf 	bl	8003c74 <SysTick_Config>
 8003cf6:	0003      	movs	r3, r0
}
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b002      	add	sp, #8
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d0e:	e147      	b.n	8003fa0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2101      	movs	r1, #1
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4091      	lsls	r1, r2
 8003d1a:	000a      	movs	r2, r1
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d100      	bne.n	8003d28 <HAL_GPIO_Init+0x28>
 8003d26:	e138      	b.n	8003f9a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d005      	beq.n	8003d40 <HAL_GPIO_Init+0x40>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2203      	movs	r2, #3
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d130      	bne.n	8003da2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	0013      	movs	r3, r2
 8003d50:	43da      	mvns	r2, r3
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	409a      	lsls	r2, r3
 8003d62:	0013      	movs	r3, r2
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d76:	2201      	movs	r2, #1
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	0013      	movs	r3, r2
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	401a      	ands	r2, r3
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	409a      	lsls	r2, r3
 8003d94:	0013      	movs	r3, r2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2203      	movs	r2, #3
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d017      	beq.n	8003dde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	0013      	movs	r3, r2
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2203      	movs	r2, #3
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d123      	bne.n	8003e32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	08da      	lsrs	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3208      	adds	r2, #8
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	58d3      	ldr	r3, [r2, r3]
 8003df6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2207      	movs	r2, #7
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	220f      	movs	r2, #15
 8003e02:	409a      	lsls	r2, r3
 8003e04:	0013      	movs	r3, r2
 8003e06:	43da      	mvns	r2, r3
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2107      	movs	r1, #7
 8003e16:	400b      	ands	r3, r1
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	08da      	lsrs	r2, r3, #3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3208      	adds	r2, #8
 8003e2c:	0092      	lsls	r2, r2, #2
 8003e2e:	6939      	ldr	r1, [r7, #16]
 8003e30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	0013      	movs	r3, r2
 8003e42:	43da      	mvns	r2, r3
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2203      	movs	r2, #3
 8003e50:	401a      	ands	r2, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	409a      	lsls	r2, r3
 8003e58:	0013      	movs	r3, r2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	23c0      	movs	r3, #192	@ 0xc0
 8003e6c:	029b      	lsls	r3, r3, #10
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d100      	bne.n	8003e74 <HAL_GPIO_Init+0x174>
 8003e72:	e092      	b.n	8003f9a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003e74:	4a50      	ldr	r2, [pc, #320]	@ (8003fb8 <HAL_GPIO_Init+0x2b8>)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	3318      	adds	r3, #24
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	589b      	ldr	r3, [r3, r2]
 8003e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2203      	movs	r2, #3
 8003e86:	4013      	ands	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	220f      	movs	r2, #15
 8003e8c:	409a      	lsls	r2, r3
 8003e8e:	0013      	movs	r3, r2
 8003e90:	43da      	mvns	r2, r3
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	23a0      	movs	r3, #160	@ 0xa0
 8003e9c:	05db      	lsls	r3, r3, #23
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d013      	beq.n	8003eca <HAL_GPIO_Init+0x1ca>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a45      	ldr	r2, [pc, #276]	@ (8003fbc <HAL_GPIO_Init+0x2bc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00d      	beq.n	8003ec6 <HAL_GPIO_Init+0x1c6>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a44      	ldr	r2, [pc, #272]	@ (8003fc0 <HAL_GPIO_Init+0x2c0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <HAL_GPIO_Init+0x1c2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a43      	ldr	r2, [pc, #268]	@ (8003fc4 <HAL_GPIO_Init+0x2c4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_GPIO_Init+0x1be>
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e006      	b.n	8003ecc <HAL_GPIO_Init+0x1cc>
 8003ebe:	2305      	movs	r3, #5
 8003ec0:	e004      	b.n	8003ecc <HAL_GPIO_Init+0x1cc>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e002      	b.n	8003ecc <HAL_GPIO_Init+0x1cc>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <HAL_GPIO_Init+0x1cc>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	2103      	movs	r1, #3
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	00d2      	lsls	r2, r2, #3
 8003ed4:	4093      	lsls	r3, r2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003edc:	4936      	ldr	r1, [pc, #216]	@ (8003fb8 <HAL_GPIO_Init+0x2b8>)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	089b      	lsrs	r3, r3, #2
 8003ee2:	3318      	adds	r3, #24
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eea:	4b33      	ldr	r3, [pc, #204]	@ (8003fb8 <HAL_GPIO_Init+0x2b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	2380      	movs	r3, #128	@ 0x80
 8003f00:	035b      	lsls	r3, r3, #13
 8003f02:	4013      	ands	r3, r2
 8003f04:	d003      	beq.n	8003f0e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb8 <HAL_GPIO_Init+0x2b8>)
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003f14:	4b28      	ldr	r3, [pc, #160]	@ (8003fb8 <HAL_GPIO_Init+0x2b8>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	43da      	mvns	r2, r3
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	2380      	movs	r3, #128	@ 0x80
 8003f2a:	039b      	lsls	r3, r3, #14
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f38:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb8 <HAL_GPIO_Init+0x2b8>)
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb8 <HAL_GPIO_Init+0x2b8>)
 8003f40:	2384      	movs	r3, #132	@ 0x84
 8003f42:	58d3      	ldr	r3, [r2, r3]
 8003f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	43da      	mvns	r2, r3
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	2380      	movs	r3, #128	@ 0x80
 8003f56:	029b      	lsls	r3, r3, #10
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f64:	4914      	ldr	r1, [pc, #80]	@ (8003fb8 <HAL_GPIO_Init+0x2b8>)
 8003f66:	2284      	movs	r2, #132	@ 0x84
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003f6c:	4a12      	ldr	r2, [pc, #72]	@ (8003fb8 <HAL_GPIO_Init+0x2b8>)
 8003f6e:	2380      	movs	r3, #128	@ 0x80
 8003f70:	58d3      	ldr	r3, [r2, r3]
 8003f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	43da      	mvns	r2, r3
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	2380      	movs	r3, #128	@ 0x80
 8003f84:	025b      	lsls	r3, r3, #9
 8003f86:	4013      	ands	r3, r2
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f92:	4909      	ldr	r1, [pc, #36]	@ (8003fb8 <HAL_GPIO_Init+0x2b8>)
 8003f94:	2280      	movs	r2, #128	@ 0x80
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	40da      	lsrs	r2, r3
 8003fa8:	1e13      	subs	r3, r2, #0
 8003faa:	d000      	beq.n	8003fae <HAL_GPIO_Init+0x2ae>
 8003fac:	e6b0      	b.n	8003d10 <HAL_GPIO_Init+0x10>
  }
}
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	46c0      	nop			@ (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b006      	add	sp, #24
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40021800 	.word	0x40021800
 8003fbc:	50000400 	.word	0x50000400
 8003fc0:	50000800 	.word	0x50000800
 8003fc4:	50000c00 	.word	0x50000c00

08003fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	000a      	movs	r2, r1
 8003fd2:	1cbb      	adds	r3, r7, #2
 8003fd4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	1cba      	adds	r2, r7, #2
 8003fdc:	8812      	ldrh	r2, [r2, #0]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003fe2:	230f      	movs	r3, #15
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e003      	b.n	8003ff4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fec:	230f      	movs	r3, #15
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003ff4:	230f      	movs	r3, #15
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	781b      	ldrb	r3, [r3, #0]
}
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b004      	add	sp, #16
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	0008      	movs	r0, r1
 800400c:	0011      	movs	r1, r2
 800400e:	1cbb      	adds	r3, r7, #2
 8004010:	1c02      	adds	r2, r0, #0
 8004012:	801a      	strh	r2, [r3, #0]
 8004014:	1c7b      	adds	r3, r7, #1
 8004016:	1c0a      	adds	r2, r1, #0
 8004018:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800401a:	1c7b      	adds	r3, r7, #1
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d004      	beq.n	800402c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004022:	1cbb      	adds	r3, r7, #2
 8004024:	881a      	ldrh	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800402a:	e003      	b.n	8004034 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800402c:	1cbb      	adds	r3, r7, #2
 800402e:	881a      	ldrh	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004034:	46c0      	nop			@ (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	b002      	add	sp, #8
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004044:	4b19      	ldr	r3, [pc, #100]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a19      	ldr	r2, [pc, #100]	@ (80040b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800404a:	4013      	ands	r3, r2
 800404c:	0019      	movs	r1, r3
 800404e:	4b17      	ldr	r3, [pc, #92]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	430a      	orrs	r2, r1
 8004054:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	2380      	movs	r3, #128	@ 0x80
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	429a      	cmp	r2, r3
 800405e:	d11f      	bne.n	80040a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004060:	4b14      	ldr	r3, [pc, #80]	@ (80040b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	0013      	movs	r3, r2
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	189b      	adds	r3, r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4912      	ldr	r1, [pc, #72]	@ (80040b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800406e:	0018      	movs	r0, r3
 8004070:	f7fc f862 	bl	8000138 <__udivsi3>
 8004074:	0003      	movs	r3, r0
 8004076:	3301      	adds	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800407a:	e008      	b.n	800408e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3b01      	subs	r3, #1
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	e001      	b.n	800408e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e009      	b.n	80040a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800408e:	4b07      	ldr	r3, [pc, #28]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	2380      	movs	r3, #128	@ 0x80
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	401a      	ands	r2, r3
 8004098:	2380      	movs	r3, #128	@ 0x80
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	429a      	cmp	r2, r3
 800409e:	d0ed      	beq.n	800407c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	0018      	movs	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b004      	add	sp, #16
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	40007000 	.word	0x40007000
 80040b0:	fffff9ff 	.word	0xfffff9ff
 80040b4:	20000000 	.word	0x20000000
 80040b8:	000f4240 	.word	0x000f4240

080040bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80040c0:	4b03      	ldr	r3, [pc, #12]	@ (80040d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	23e0      	movs	r3, #224	@ 0xe0
 80040c6:	01db      	lsls	r3, r3, #7
 80040c8:	4013      	ands	r3, r2
}
 80040ca:	0018      	movs	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000

080040d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e2f3      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2201      	movs	r2, #1
 80040ec:	4013      	ands	r3, r2
 80040ee:	d100      	bne.n	80040f2 <HAL_RCC_OscConfig+0x1e>
 80040f0:	e07c      	b.n	80041ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f2:	4bc3      	ldr	r3, [pc, #780]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2238      	movs	r2, #56	@ 0x38
 80040f8:	4013      	ands	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040fc:	4bc0      	ldr	r3, [pc, #768]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2203      	movs	r2, #3
 8004102:	4013      	ands	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b10      	cmp	r3, #16
 800410a:	d102      	bne.n	8004112 <HAL_RCC_OscConfig+0x3e>
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2b03      	cmp	r3, #3
 8004110:	d002      	beq.n	8004118 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d10b      	bne.n	8004130 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004118:	4bb9      	ldr	r3, [pc, #740]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	2380      	movs	r3, #128	@ 0x80
 800411e:	029b      	lsls	r3, r3, #10
 8004120:	4013      	ands	r3, r2
 8004122:	d062      	beq.n	80041ea <HAL_RCC_OscConfig+0x116>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d15e      	bne.n	80041ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e2ce      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	2380      	movs	r3, #128	@ 0x80
 8004136:	025b      	lsls	r3, r3, #9
 8004138:	429a      	cmp	r2, r3
 800413a:	d107      	bne.n	800414c <HAL_RCC_OscConfig+0x78>
 800413c:	4bb0      	ldr	r3, [pc, #704]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4baf      	ldr	r3, [pc, #700]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004142:	2180      	movs	r1, #128	@ 0x80
 8004144:	0249      	lsls	r1, r1, #9
 8004146:	430a      	orrs	r2, r1
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	e020      	b.n	800418e <HAL_RCC_OscConfig+0xba>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	23a0      	movs	r3, #160	@ 0xa0
 8004152:	02db      	lsls	r3, r3, #11
 8004154:	429a      	cmp	r2, r3
 8004156:	d10e      	bne.n	8004176 <HAL_RCC_OscConfig+0xa2>
 8004158:	4ba9      	ldr	r3, [pc, #676]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4ba8      	ldr	r3, [pc, #672]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 800415e:	2180      	movs	r1, #128	@ 0x80
 8004160:	02c9      	lsls	r1, r1, #11
 8004162:	430a      	orrs	r2, r1
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	4ba6      	ldr	r3, [pc, #664]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	4ba5      	ldr	r3, [pc, #660]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 800416c:	2180      	movs	r1, #128	@ 0x80
 800416e:	0249      	lsls	r1, r1, #9
 8004170:	430a      	orrs	r2, r1
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	e00b      	b.n	800418e <HAL_RCC_OscConfig+0xba>
 8004176:	4ba2      	ldr	r3, [pc, #648]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4ba1      	ldr	r3, [pc, #644]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 800417c:	49a1      	ldr	r1, [pc, #644]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 800417e:	400a      	ands	r2, r1
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	4b9f      	ldr	r3, [pc, #636]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4b9e      	ldr	r3, [pc, #632]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004188:	499f      	ldr	r1, [pc, #636]	@ (8004408 <HAL_RCC_OscConfig+0x334>)
 800418a:	400a      	ands	r2, r1
 800418c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d014      	beq.n	80041c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7ff fcd1 	bl	8003b3c <HAL_GetTick>
 800419a:	0003      	movs	r3, r0
 800419c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a0:	f7ff fccc 	bl	8003b3c <HAL_GetTick>
 80041a4:	0002      	movs	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b64      	cmp	r3, #100	@ 0x64
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e28d      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b2:	4b93      	ldr	r3, [pc, #588]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	2380      	movs	r3, #128	@ 0x80
 80041b8:	029b      	lsls	r3, r3, #10
 80041ba:	4013      	ands	r3, r2
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0xcc>
 80041be:	e015      	b.n	80041ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7ff fcbc 	bl	8003b3c <HAL_GetTick>
 80041c4:	0003      	movs	r3, r0
 80041c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ca:	f7ff fcb7 	bl	8003b3c <HAL_GetTick>
 80041ce:	0002      	movs	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b64      	cmp	r3, #100	@ 0x64
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e278      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041dc:	4b88      	ldr	r3, [pc, #544]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	2380      	movs	r3, #128	@ 0x80
 80041e2:	029b      	lsls	r3, r3, #10
 80041e4:	4013      	ands	r3, r2
 80041e6:	d1f0      	bne.n	80041ca <HAL_RCC_OscConfig+0xf6>
 80041e8:	e000      	b.n	80041ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2202      	movs	r2, #2
 80041f2:	4013      	ands	r3, r2
 80041f4:	d100      	bne.n	80041f8 <HAL_RCC_OscConfig+0x124>
 80041f6:	e099      	b.n	800432c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041f8:	4b81      	ldr	r3, [pc, #516]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2238      	movs	r2, #56	@ 0x38
 80041fe:	4013      	ands	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004202:	4b7f      	ldr	r3, [pc, #508]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2203      	movs	r2, #3
 8004208:	4013      	ands	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b10      	cmp	r3, #16
 8004210:	d102      	bne.n	8004218 <HAL_RCC_OscConfig+0x144>
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d002      	beq.n	800421e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d135      	bne.n	800428a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800421e:	4b78      	ldr	r3, [pc, #480]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	2380      	movs	r3, #128	@ 0x80
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4013      	ands	r3, r2
 8004228:	d005      	beq.n	8004236 <HAL_RCC_OscConfig+0x162>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e24b      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004236:	4b72      	ldr	r3, [pc, #456]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4a74      	ldr	r2, [pc, #464]	@ (800440c <HAL_RCC_OscConfig+0x338>)
 800423c:	4013      	ands	r3, r2
 800423e:	0019      	movs	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	021a      	lsls	r2, r3, #8
 8004246:	4b6e      	ldr	r3, [pc, #440]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d112      	bne.n	8004278 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004252:	4b6b      	ldr	r3, [pc, #428]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a6e      	ldr	r2, [pc, #440]	@ (8004410 <HAL_RCC_OscConfig+0x33c>)
 8004258:	4013      	ands	r3, r2
 800425a:	0019      	movs	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	4b67      	ldr	r3, [pc, #412]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004262:	430a      	orrs	r2, r1
 8004264:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004266:	4b66      	ldr	r3, [pc, #408]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	0adb      	lsrs	r3, r3, #11
 800426c:	2207      	movs	r2, #7
 800426e:	4013      	ands	r3, r2
 8004270:	4a68      	ldr	r2, [pc, #416]	@ (8004414 <HAL_RCC_OscConfig+0x340>)
 8004272:	40da      	lsrs	r2, r3
 8004274:	4b68      	ldr	r3, [pc, #416]	@ (8004418 <HAL_RCC_OscConfig+0x344>)
 8004276:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004278:	4b68      	ldr	r3, [pc, #416]	@ (800441c <HAL_RCC_OscConfig+0x348>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	0018      	movs	r0, r3
 800427e:	f7ff fc01 	bl	8003a84 <HAL_InitTick>
 8004282:	1e03      	subs	r3, r0, #0
 8004284:	d051      	beq.n	800432a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e221      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d030      	beq.n	80042f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004292:	4b5b      	ldr	r3, [pc, #364]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a5e      	ldr	r2, [pc, #376]	@ (8004410 <HAL_RCC_OscConfig+0x33c>)
 8004298:	4013      	ands	r3, r2
 800429a:	0019      	movs	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	4b57      	ldr	r3, [pc, #348]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80042a2:	430a      	orrs	r2, r1
 80042a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80042a6:	4b56      	ldr	r3, [pc, #344]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4b55      	ldr	r3, [pc, #340]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80042ac:	2180      	movs	r1, #128	@ 0x80
 80042ae:	0049      	lsls	r1, r1, #1
 80042b0:	430a      	orrs	r2, r1
 80042b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7ff fc42 	bl	8003b3c <HAL_GetTick>
 80042b8:	0003      	movs	r3, r0
 80042ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042be:	f7ff fc3d 	bl	8003b3c <HAL_GetTick>
 80042c2:	0002      	movs	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e1fe      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	2380      	movs	r3, #128	@ 0x80
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4013      	ands	r3, r2
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042dc:	4b48      	ldr	r3, [pc, #288]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4a4a      	ldr	r2, [pc, #296]	@ (800440c <HAL_RCC_OscConfig+0x338>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	0019      	movs	r1, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	021a      	lsls	r2, r3, #8
 80042ec:	4b44      	ldr	r3, [pc, #272]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	e01b      	b.n	800432c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80042f4:	4b42      	ldr	r3, [pc, #264]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b41      	ldr	r3, [pc, #260]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80042fa:	4949      	ldr	r1, [pc, #292]	@ (8004420 <HAL_RCC_OscConfig+0x34c>)
 80042fc:	400a      	ands	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7ff fc1c 	bl	8003b3c <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430a:	f7ff fc17 	bl	8003b3c <HAL_GetTick>
 800430e:	0002      	movs	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e1d8      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800431c:	4b38      	ldr	r3, [pc, #224]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	2380      	movs	r3, #128	@ 0x80
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4013      	ands	r3, r2
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0x236>
 8004328:	e000      	b.n	800432c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800432a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2208      	movs	r2, #8
 8004332:	4013      	ands	r3, r2
 8004334:	d047      	beq.n	80043c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004336:	4b32      	ldr	r3, [pc, #200]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2238      	movs	r2, #56	@ 0x38
 800433c:	4013      	ands	r3, r2
 800433e:	2b18      	cmp	r3, #24
 8004340:	d10a      	bne.n	8004358 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004342:	4b2f      	ldr	r3, [pc, #188]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004346:	2202      	movs	r2, #2
 8004348:	4013      	ands	r3, r2
 800434a:	d03c      	beq.n	80043c6 <HAL_RCC_OscConfig+0x2f2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d138      	bne.n	80043c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e1ba      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d019      	beq.n	8004394 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004360:	4b27      	ldr	r3, [pc, #156]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004362:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004364:	4b26      	ldr	r3, [pc, #152]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004366:	2101      	movs	r1, #1
 8004368:	430a      	orrs	r2, r1
 800436a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7ff fbe6 	bl	8003b3c <HAL_GetTick>
 8004370:	0003      	movs	r3, r0
 8004372:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004376:	f7ff fbe1 	bl	8003b3c <HAL_GetTick>
 800437a:	0002      	movs	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e1a2      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004388:	4b1d      	ldr	r3, [pc, #116]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 800438a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800438c:	2202      	movs	r2, #2
 800438e:	4013      	ands	r3, r2
 8004390:	d0f1      	beq.n	8004376 <HAL_RCC_OscConfig+0x2a2>
 8004392:	e018      	b.n	80043c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004394:	4b1a      	ldr	r3, [pc, #104]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 8004396:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004398:	4b19      	ldr	r3, [pc, #100]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 800439a:	2101      	movs	r1, #1
 800439c:	438a      	bics	r2, r1
 800439e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7ff fbcc 	bl	8003b3c <HAL_GetTick>
 80043a4:	0003      	movs	r3, r0
 80043a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043aa:	f7ff fbc7 	bl	8003b3c <HAL_GetTick>
 80043ae:	0002      	movs	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e188      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043bc:	4b10      	ldr	r3, [pc, #64]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80043be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c0:	2202      	movs	r2, #2
 80043c2:	4013      	ands	r3, r2
 80043c4:	d1f1      	bne.n	80043aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2204      	movs	r2, #4
 80043cc:	4013      	ands	r3, r2
 80043ce:	d100      	bne.n	80043d2 <HAL_RCC_OscConfig+0x2fe>
 80043d0:	e0c6      	b.n	8004560 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	231f      	movs	r3, #31
 80043d4:	18fb      	adds	r3, r7, r3
 80043d6:	2200      	movs	r2, #0
 80043d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80043da:	4b09      	ldr	r3, [pc, #36]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2238      	movs	r2, #56	@ 0x38
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d11e      	bne.n	8004424 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80043e6:	4b06      	ldr	r3, [pc, #24]	@ (8004400 <HAL_RCC_OscConfig+0x32c>)
 80043e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ea:	2202      	movs	r2, #2
 80043ec:	4013      	ands	r3, r2
 80043ee:	d100      	bne.n	80043f2 <HAL_RCC_OscConfig+0x31e>
 80043f0:	e0b6      	b.n	8004560 <HAL_RCC_OscConfig+0x48c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d000      	beq.n	80043fc <HAL_RCC_OscConfig+0x328>
 80043fa:	e0b1      	b.n	8004560 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e166      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
 8004400:	40021000 	.word	0x40021000
 8004404:	fffeffff 	.word	0xfffeffff
 8004408:	fffbffff 	.word	0xfffbffff
 800440c:	ffff80ff 	.word	0xffff80ff
 8004410:	ffffc7ff 	.word	0xffffc7ff
 8004414:	00f42400 	.word	0x00f42400
 8004418:	20000000 	.word	0x20000000
 800441c:	20000004 	.word	0x20000004
 8004420:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004424:	4bac      	ldr	r3, [pc, #688]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 8004426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004428:	2380      	movs	r3, #128	@ 0x80
 800442a:	055b      	lsls	r3, r3, #21
 800442c:	4013      	ands	r3, r2
 800442e:	d101      	bne.n	8004434 <HAL_RCC_OscConfig+0x360>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x362>
 8004434:	2300      	movs	r3, #0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d011      	beq.n	800445e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	4ba7      	ldr	r3, [pc, #668]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 800443c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800443e:	4ba6      	ldr	r3, [pc, #664]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 8004440:	2180      	movs	r1, #128	@ 0x80
 8004442:	0549      	lsls	r1, r1, #21
 8004444:	430a      	orrs	r2, r1
 8004446:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004448:	4ba3      	ldr	r3, [pc, #652]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 800444a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800444c:	2380      	movs	r3, #128	@ 0x80
 800444e:	055b      	lsls	r3, r3, #21
 8004450:	4013      	ands	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004456:	231f      	movs	r3, #31
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	2201      	movs	r2, #1
 800445c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800445e:	4b9f      	ldr	r3, [pc, #636]	@ (80046dc <HAL_RCC_OscConfig+0x608>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	2380      	movs	r3, #128	@ 0x80
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4013      	ands	r3, r2
 8004468:	d11a      	bne.n	80044a0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800446a:	4b9c      	ldr	r3, [pc, #624]	@ (80046dc <HAL_RCC_OscConfig+0x608>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b9b      	ldr	r3, [pc, #620]	@ (80046dc <HAL_RCC_OscConfig+0x608>)
 8004470:	2180      	movs	r1, #128	@ 0x80
 8004472:	0049      	lsls	r1, r1, #1
 8004474:	430a      	orrs	r2, r1
 8004476:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004478:	f7ff fb60 	bl	8003b3c <HAL_GetTick>
 800447c:	0003      	movs	r3, r0
 800447e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004482:	f7ff fb5b 	bl	8003b3c <HAL_GetTick>
 8004486:	0002      	movs	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e11c      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004494:	4b91      	ldr	r3, [pc, #580]	@ (80046dc <HAL_RCC_OscConfig+0x608>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	2380      	movs	r3, #128	@ 0x80
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	4013      	ands	r3, r2
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_OscConfig+0x3e2>
 80044a8:	4b8b      	ldr	r3, [pc, #556]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80044aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044ac:	4b8a      	ldr	r3, [pc, #552]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80044ae:	2101      	movs	r1, #1
 80044b0:	430a      	orrs	r2, r1
 80044b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044b4:	e01c      	b.n	80044f0 <HAL_RCC_OscConfig+0x41c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x404>
 80044be:	4b86      	ldr	r3, [pc, #536]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80044c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044c2:	4b85      	ldr	r3, [pc, #532]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80044c4:	2104      	movs	r1, #4
 80044c6:	430a      	orrs	r2, r1
 80044c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044ca:	4b83      	ldr	r3, [pc, #524]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80044cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044ce:	4b82      	ldr	r3, [pc, #520]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80044d0:	2101      	movs	r1, #1
 80044d2:	430a      	orrs	r2, r1
 80044d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0x41c>
 80044d8:	4b7f      	ldr	r3, [pc, #508]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80044da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044dc:	4b7e      	ldr	r3, [pc, #504]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80044de:	2101      	movs	r1, #1
 80044e0:	438a      	bics	r2, r1
 80044e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044e4:	4b7c      	ldr	r3, [pc, #496]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80044e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044e8:	4b7b      	ldr	r3, [pc, #492]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80044ea:	2104      	movs	r1, #4
 80044ec:	438a      	bics	r2, r1
 80044ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d014      	beq.n	8004522 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7ff fb20 	bl	8003b3c <HAL_GetTick>
 80044fc:	0003      	movs	r3, r0
 80044fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004500:	e009      	b.n	8004516 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7ff fb1b 	bl	8003b3c <HAL_GetTick>
 8004506:	0002      	movs	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	4a74      	ldr	r2, [pc, #464]	@ (80046e0 <HAL_RCC_OscConfig+0x60c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0db      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004516:	4b70      	ldr	r3, [pc, #448]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 8004518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451a:	2202      	movs	r2, #2
 800451c:	4013      	ands	r3, r2
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x42e>
 8004520:	e013      	b.n	800454a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7ff fb0b 	bl	8003b3c <HAL_GetTick>
 8004526:	0003      	movs	r3, r0
 8004528:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800452a:	e009      	b.n	8004540 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f7ff fb06 	bl	8003b3c <HAL_GetTick>
 8004530:	0002      	movs	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	4a6a      	ldr	r2, [pc, #424]	@ (80046e0 <HAL_RCC_OscConfig+0x60c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e0c6      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004540:	4b65      	ldr	r3, [pc, #404]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 8004542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004544:	2202      	movs	r2, #2
 8004546:	4013      	ands	r3, r2
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800454a:	231f      	movs	r3, #31
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b60      	ldr	r3, [pc, #384]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 8004556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004558:	4b5f      	ldr	r3, [pc, #380]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 800455a:	4962      	ldr	r1, [pc, #392]	@ (80046e4 <HAL_RCC_OscConfig+0x610>)
 800455c:	400a      	ands	r2, r1
 800455e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d100      	bne.n	800456a <HAL_RCC_OscConfig+0x496>
 8004568:	e0b0      	b.n	80046cc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800456a:	4b5b      	ldr	r3, [pc, #364]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2238      	movs	r2, #56	@ 0x38
 8004570:	4013      	ands	r3, r2
 8004572:	2b10      	cmp	r3, #16
 8004574:	d100      	bne.n	8004578 <HAL_RCC_OscConfig+0x4a4>
 8004576:	e078      	b.n	800466a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d153      	bne.n	8004628 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004580:	4b55      	ldr	r3, [pc, #340]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4b54      	ldr	r3, [pc, #336]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 8004586:	4958      	ldr	r1, [pc, #352]	@ (80046e8 <HAL_RCC_OscConfig+0x614>)
 8004588:	400a      	ands	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7ff fad6 	bl	8003b3c <HAL_GetTick>
 8004590:	0003      	movs	r3, r0
 8004592:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004596:	f7ff fad1 	bl	8003b3c <HAL_GetTick>
 800459a:	0002      	movs	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e092      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a8:	4b4b      	ldr	r3, [pc, #300]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	2380      	movs	r3, #128	@ 0x80
 80045ae:	049b      	lsls	r3, r3, #18
 80045b0:	4013      	ands	r3, r2
 80045b2:	d1f0      	bne.n	8004596 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045b4:	4b48      	ldr	r3, [pc, #288]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a4c      	ldr	r2, [pc, #304]	@ (80046ec <HAL_RCC_OscConfig+0x618>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	0019      	movs	r1, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1a      	ldr	r2, [r3, #32]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	431a      	orrs	r2, r3
 80045dc:	4b3e      	ldr	r3, [pc, #248]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80045de:	430a      	orrs	r2, r1
 80045e0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e2:	4b3d      	ldr	r3, [pc, #244]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b3c      	ldr	r3, [pc, #240]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80045e8:	2180      	movs	r1, #128	@ 0x80
 80045ea:	0449      	lsls	r1, r1, #17
 80045ec:	430a      	orrs	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80045f0:	4b39      	ldr	r3, [pc, #228]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	4b38      	ldr	r3, [pc, #224]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 80045f6:	2180      	movs	r1, #128	@ 0x80
 80045f8:	0549      	lsls	r1, r1, #21
 80045fa:	430a      	orrs	r2, r1
 80045fc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fe:	f7ff fa9d 	bl	8003b3c <HAL_GetTick>
 8004602:	0003      	movs	r3, r0
 8004604:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004608:	f7ff fa98 	bl	8003b3c <HAL_GetTick>
 800460c:	0002      	movs	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e059      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461a:	4b2f      	ldr	r3, [pc, #188]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	2380      	movs	r3, #128	@ 0x80
 8004620:	049b      	lsls	r3, r3, #18
 8004622:	4013      	ands	r3, r2
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x534>
 8004626:	e051      	b.n	80046cc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004628:	4b2b      	ldr	r3, [pc, #172]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	4b2a      	ldr	r3, [pc, #168]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 800462e:	492e      	ldr	r1, [pc, #184]	@ (80046e8 <HAL_RCC_OscConfig+0x614>)
 8004630:	400a      	ands	r2, r1
 8004632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7ff fa82 	bl	8003b3c <HAL_GetTick>
 8004638:	0003      	movs	r3, r0
 800463a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463e:	f7ff fa7d 	bl	8003b3c <HAL_GetTick>
 8004642:	0002      	movs	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e03e      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004650:	4b21      	ldr	r3, [pc, #132]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	2380      	movs	r3, #128	@ 0x80
 8004656:	049b      	lsls	r3, r3, #18
 8004658:	4013      	ands	r3, r2
 800465a:	d1f0      	bne.n	800463e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800465c:	4b1e      	ldr	r3, [pc, #120]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	4b1d      	ldr	r3, [pc, #116]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 8004662:	4923      	ldr	r1, [pc, #140]	@ (80046f0 <HAL_RCC_OscConfig+0x61c>)
 8004664:	400a      	ands	r2, r1
 8004666:	60da      	str	r2, [r3, #12]
 8004668:	e030      	b.n	80046cc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e02b      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004676:	4b18      	ldr	r3, [pc, #96]	@ (80046d8 <HAL_RCC_OscConfig+0x604>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2203      	movs	r2, #3
 8004680:	401a      	ands	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	429a      	cmp	r2, r3
 8004688:	d11e      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2270      	movs	r2, #112	@ 0x70
 800468e:	401a      	ands	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d117      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	23fe      	movs	r3, #254	@ 0xfe
 800469c:	01db      	lsls	r3, r3, #7
 800469e:	401a      	ands	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d10e      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	23f8      	movs	r3, #248	@ 0xf8
 80046ae:	039b      	lsls	r3, r3, #14
 80046b0:	401a      	ands	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d106      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	0f5b      	lsrs	r3, r3, #29
 80046be:	075a      	lsls	r2, r3, #29
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	0018      	movs	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b008      	add	sp, #32
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			@ (mov r8, r8)
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40007000 	.word	0x40007000
 80046e0:	00001388 	.word	0x00001388
 80046e4:	efffffff 	.word	0xefffffff
 80046e8:	feffffff 	.word	0xfeffffff
 80046ec:	1fc1808c 	.word	0x1fc1808c
 80046f0:	effefffc 	.word	0xeffefffc

080046f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0e9      	b.n	80048dc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004708:	4b76      	ldr	r3, [pc, #472]	@ (80048e4 <HAL_RCC_ClockConfig+0x1f0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2207      	movs	r2, #7
 800470e:	4013      	ands	r3, r2
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d91e      	bls.n	8004754 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b73      	ldr	r3, [pc, #460]	@ (80048e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2207      	movs	r2, #7
 800471c:	4393      	bics	r3, r2
 800471e:	0019      	movs	r1, r3
 8004720:	4b70      	ldr	r3, [pc, #448]	@ (80048e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004728:	f7ff fa08 	bl	8003b3c <HAL_GetTick>
 800472c:	0003      	movs	r3, r0
 800472e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004730:	e009      	b.n	8004746 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004732:	f7ff fa03 	bl	8003b3c <HAL_GetTick>
 8004736:	0002      	movs	r2, r0
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	4a6a      	ldr	r2, [pc, #424]	@ (80048e8 <HAL_RCC_ClockConfig+0x1f4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e0ca      	b.n	80048dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004746:	4b67      	ldr	r3, [pc, #412]	@ (80048e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2207      	movs	r2, #7
 800474c:	4013      	ands	r3, r2
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d1ee      	bne.n	8004732 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2202      	movs	r2, #2
 800475a:	4013      	ands	r3, r2
 800475c:	d015      	beq.n	800478a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2204      	movs	r2, #4
 8004764:	4013      	ands	r3, r2
 8004766:	d006      	beq.n	8004776 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004768:	4b60      	ldr	r3, [pc, #384]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	4b5f      	ldr	r3, [pc, #380]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 800476e:	21e0      	movs	r1, #224	@ 0xe0
 8004770:	01c9      	lsls	r1, r1, #7
 8004772:	430a      	orrs	r2, r1
 8004774:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004776:	4b5d      	ldr	r3, [pc, #372]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	4a5d      	ldr	r2, [pc, #372]	@ (80048f0 <HAL_RCC_ClockConfig+0x1fc>)
 800477c:	4013      	ands	r3, r2
 800477e:	0019      	movs	r1, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	4b59      	ldr	r3, [pc, #356]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 8004786:	430a      	orrs	r2, r1
 8004788:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2201      	movs	r2, #1
 8004790:	4013      	ands	r3, r2
 8004792:	d057      	beq.n	8004844 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d107      	bne.n	80047ac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800479c:	4b53      	ldr	r3, [pc, #332]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	2380      	movs	r3, #128	@ 0x80
 80047a2:	029b      	lsls	r3, r3, #10
 80047a4:	4013      	ands	r3, r2
 80047a6:	d12b      	bne.n	8004800 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e097      	b.n	80048dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d107      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b4:	4b4d      	ldr	r3, [pc, #308]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	2380      	movs	r3, #128	@ 0x80
 80047ba:	049b      	lsls	r3, r3, #18
 80047bc:	4013      	ands	r3, r2
 80047be:	d11f      	bne.n	8004800 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e08b      	b.n	80048dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047cc:	4b47      	ldr	r3, [pc, #284]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	2380      	movs	r3, #128	@ 0x80
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	4013      	ands	r3, r2
 80047d6:	d113      	bne.n	8004800 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e07f      	b.n	80048dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d106      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047e4:	4b41      	ldr	r3, [pc, #260]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 80047e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e8:	2202      	movs	r2, #2
 80047ea:	4013      	ands	r3, r2
 80047ec:	d108      	bne.n	8004800 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e074      	b.n	80048dc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f2:	4b3e      	ldr	r3, [pc, #248]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 80047f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f6:	2202      	movs	r2, #2
 80047f8:	4013      	ands	r3, r2
 80047fa:	d101      	bne.n	8004800 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e06d      	b.n	80048dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004800:	4b3a      	ldr	r3, [pc, #232]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2207      	movs	r2, #7
 8004806:	4393      	bics	r3, r2
 8004808:	0019      	movs	r1, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	4b37      	ldr	r3, [pc, #220]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 8004810:	430a      	orrs	r2, r1
 8004812:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004814:	f7ff f992 	bl	8003b3c <HAL_GetTick>
 8004818:	0003      	movs	r3, r0
 800481a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481c:	e009      	b.n	8004832 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481e:	f7ff f98d 	bl	8003b3c <HAL_GetTick>
 8004822:	0002      	movs	r2, r0
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	4a2f      	ldr	r2, [pc, #188]	@ (80048e8 <HAL_RCC_ClockConfig+0x1f4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e054      	b.n	80048dc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	4b2e      	ldr	r3, [pc, #184]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2238      	movs	r2, #56	@ 0x38
 8004838:	401a      	ands	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	429a      	cmp	r2, r3
 8004842:	d1ec      	bne.n	800481e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004844:	4b27      	ldr	r3, [pc, #156]	@ (80048e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2207      	movs	r2, #7
 800484a:	4013      	ands	r3, r2
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d21e      	bcs.n	8004890 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2207      	movs	r2, #7
 8004858:	4393      	bics	r3, r2
 800485a:	0019      	movs	r1, r3
 800485c:	4b21      	ldr	r3, [pc, #132]	@ (80048e4 <HAL_RCC_ClockConfig+0x1f0>)
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004864:	f7ff f96a 	bl	8003b3c <HAL_GetTick>
 8004868:	0003      	movs	r3, r0
 800486a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800486c:	e009      	b.n	8004882 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486e:	f7ff f965 	bl	8003b3c <HAL_GetTick>
 8004872:	0002      	movs	r2, r0
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <HAL_RCC_ClockConfig+0x1f4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e02c      	b.n	80048dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004882:	4b18      	ldr	r3, [pc, #96]	@ (80048e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2207      	movs	r2, #7
 8004888:	4013      	ands	r3, r2
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d1ee      	bne.n	800486e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2204      	movs	r2, #4
 8004896:	4013      	ands	r3, r2
 8004898:	d009      	beq.n	80048ae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800489a:	4b14      	ldr	r3, [pc, #80]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <HAL_RCC_ClockConfig+0x200>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	0019      	movs	r1, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	4b10      	ldr	r3, [pc, #64]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 80048aa:	430a      	orrs	r2, r1
 80048ac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80048ae:	f000 f829 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 80048b2:	0001      	movs	r1, r0
 80048b4:	4b0d      	ldr	r3, [pc, #52]	@ (80048ec <HAL_RCC_ClockConfig+0x1f8>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	0a1b      	lsrs	r3, r3, #8
 80048ba:	220f      	movs	r2, #15
 80048bc:	401a      	ands	r2, r3
 80048be:	4b0e      	ldr	r3, [pc, #56]	@ (80048f8 <HAL_RCC_ClockConfig+0x204>)
 80048c0:	0092      	lsls	r2, r2, #2
 80048c2:	58d3      	ldr	r3, [r2, r3]
 80048c4:	221f      	movs	r2, #31
 80048c6:	4013      	ands	r3, r2
 80048c8:	000a      	movs	r2, r1
 80048ca:	40da      	lsrs	r2, r3
 80048cc:	4b0b      	ldr	r3, [pc, #44]	@ (80048fc <HAL_RCC_ClockConfig+0x208>)
 80048ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004900 <HAL_RCC_ClockConfig+0x20c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f7ff f8d5 	bl	8003a84 <HAL_InitTick>
 80048da:	0003      	movs	r3, r0
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b004      	add	sp, #16
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40022000 	.word	0x40022000
 80048e8:	00001388 	.word	0x00001388
 80048ec:	40021000 	.word	0x40021000
 80048f0:	fffff0ff 	.word	0xfffff0ff
 80048f4:	ffff8fff 	.word	0xffff8fff
 80048f8:	08008de0 	.word	0x08008de0
 80048fc:	20000000 	.word	0x20000000
 8004900:	20000004 	.word	0x20000004

08004904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800490a:	4b3c      	ldr	r3, [pc, #240]	@ (80049fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2238      	movs	r2, #56	@ 0x38
 8004910:	4013      	ands	r3, r2
 8004912:	d10f      	bne.n	8004934 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004914:	4b39      	ldr	r3, [pc, #228]	@ (80049fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	0adb      	lsrs	r3, r3, #11
 800491a:	2207      	movs	r2, #7
 800491c:	4013      	ands	r3, r2
 800491e:	2201      	movs	r2, #1
 8004920:	409a      	lsls	r2, r3
 8004922:	0013      	movs	r3, r2
 8004924:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004926:	6839      	ldr	r1, [r7, #0]
 8004928:	4835      	ldr	r0, [pc, #212]	@ (8004a00 <HAL_RCC_GetSysClockFreq+0xfc>)
 800492a:	f7fb fc05 	bl	8000138 <__udivsi3>
 800492e:	0003      	movs	r3, r0
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	e05d      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004934:	4b31      	ldr	r3, [pc, #196]	@ (80049fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2238      	movs	r2, #56	@ 0x38
 800493a:	4013      	ands	r3, r2
 800493c:	2b08      	cmp	r3, #8
 800493e:	d102      	bne.n	8004946 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004940:	4b30      	ldr	r3, [pc, #192]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0x100>)
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	e054      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004946:	4b2d      	ldr	r3, [pc, #180]	@ (80049fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2238      	movs	r2, #56	@ 0x38
 800494c:	4013      	ands	r3, r2
 800494e:	2b10      	cmp	r3, #16
 8004950:	d138      	bne.n	80049c4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004952:	4b2a      	ldr	r3, [pc, #168]	@ (80049fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2203      	movs	r2, #3
 8004958:	4013      	ands	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800495c:	4b27      	ldr	r3, [pc, #156]	@ (80049fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	2207      	movs	r2, #7
 8004964:	4013      	ands	r3, r2
 8004966:	3301      	adds	r3, #1
 8004968:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d10d      	bne.n	800498c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	4824      	ldr	r0, [pc, #144]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0x100>)
 8004974:	f7fb fbe0 	bl	8000138 <__udivsi3>
 8004978:	0003      	movs	r3, r0
 800497a:	0019      	movs	r1, r3
 800497c:	4b1f      	ldr	r3, [pc, #124]	@ (80049fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	227f      	movs	r2, #127	@ 0x7f
 8004984:	4013      	ands	r3, r2
 8004986:	434b      	muls	r3, r1
 8004988:	617b      	str	r3, [r7, #20]
        break;
 800498a:	e00d      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	481c      	ldr	r0, [pc, #112]	@ (8004a00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004990:	f7fb fbd2 	bl	8000138 <__udivsi3>
 8004994:	0003      	movs	r3, r0
 8004996:	0019      	movs	r1, r3
 8004998:	4b18      	ldr	r3, [pc, #96]	@ (80049fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	227f      	movs	r2, #127	@ 0x7f
 80049a0:	4013      	ands	r3, r2
 80049a2:	434b      	muls	r3, r1
 80049a4:	617b      	str	r3, [r7, #20]
        break;
 80049a6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80049a8:	4b14      	ldr	r3, [pc, #80]	@ (80049fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	0f5b      	lsrs	r3, r3, #29
 80049ae:	2207      	movs	r2, #7
 80049b0:	4013      	ands	r3, r2
 80049b2:	3301      	adds	r3, #1
 80049b4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	6978      	ldr	r0, [r7, #20]
 80049ba:	f7fb fbbd 	bl	8000138 <__udivsi3>
 80049be:	0003      	movs	r3, r0
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	e015      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80049c4:	4b0d      	ldr	r3, [pc, #52]	@ (80049fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2238      	movs	r2, #56	@ 0x38
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d103      	bne.n	80049d8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80049d0:	2380      	movs	r3, #128	@ 0x80
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	e00b      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80049d8:	4b08      	ldr	r3, [pc, #32]	@ (80049fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2238      	movs	r2, #56	@ 0x38
 80049de:	4013      	ands	r3, r2
 80049e0:	2b18      	cmp	r3, #24
 80049e2:	d103      	bne.n	80049ec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80049e4:	23fa      	movs	r3, #250	@ 0xfa
 80049e6:	01db      	lsls	r3, r3, #7
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	e001      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049f0:	693b      	ldr	r3, [r7, #16]
}
 80049f2:	0018      	movs	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	b006      	add	sp, #24
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	40021000 	.word	0x40021000
 8004a00:	00f42400 	.word	0x00f42400
 8004a04:	007a1200 	.word	0x007a1200

08004a08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a0c:	4b02      	ldr	r3, [pc, #8]	@ (8004a18 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
}
 8004a10:	0018      	movs	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	20000000 	.word	0x20000000

08004a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a1c:	b5b0      	push	{r4, r5, r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004a20:	f7ff fff2 	bl	8004a08 <HAL_RCC_GetHCLKFreq>
 8004a24:	0004      	movs	r4, r0
 8004a26:	f7ff fb49 	bl	80040bc <LL_RCC_GetAPB1Prescaler>
 8004a2a:	0003      	movs	r3, r0
 8004a2c:	0b1a      	lsrs	r2, r3, #12
 8004a2e:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a30:	0092      	lsls	r2, r2, #2
 8004a32:	58d3      	ldr	r3, [r2, r3]
 8004a34:	221f      	movs	r2, #31
 8004a36:	4013      	ands	r3, r2
 8004a38:	40dc      	lsrs	r4, r3
 8004a3a:	0023      	movs	r3, r4
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bdb0      	pop	{r4, r5, r7, pc}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	08008e20 	.word	0x08008e20

08004a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004a50:	2313      	movs	r3, #19
 8004a52:	18fb      	adds	r3, r7, r3
 8004a54:	2200      	movs	r2, #0
 8004a56:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a58:	2312      	movs	r3, #18
 8004a5a:	18fb      	adds	r3, r7, r3
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	2380      	movs	r3, #128	@ 0x80
 8004a66:	029b      	lsls	r3, r3, #10
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d100      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004a6c:	e0a3      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a6e:	2011      	movs	r0, #17
 8004a70:	183b      	adds	r3, r7, r0
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a76:	4b86      	ldr	r3, [pc, #536]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a7a:	2380      	movs	r3, #128	@ 0x80
 8004a7c:	055b      	lsls	r3, r3, #21
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d110      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a82:	4b83      	ldr	r3, [pc, #524]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a86:	4b82      	ldr	r3, [pc, #520]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a88:	2180      	movs	r1, #128	@ 0x80
 8004a8a:	0549      	lsls	r1, r1, #21
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a90:	4b7f      	ldr	r3, [pc, #508]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	055b      	lsls	r3, r3, #21
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a9e:	183b      	adds	r3, r7, r0
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b7a      	ldr	r3, [pc, #488]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004aaa:	2180      	movs	r1, #128	@ 0x80
 8004aac:	0049      	lsls	r1, r1, #1
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ab2:	f7ff f843 	bl	8003b3c <HAL_GetTick>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004abc:	f7ff f83e 	bl	8003b3c <HAL_GetTick>
 8004ac0:	0002      	movs	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d904      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004aca:	2313      	movs	r3, #19
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	2203      	movs	r2, #3
 8004ad0:	701a      	strb	r2, [r3, #0]
        break;
 8004ad2:	e005      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ad4:	4b6f      	ldr	r3, [pc, #444]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	2380      	movs	r3, #128	@ 0x80
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	4013      	ands	r3, r2
 8004ade:	d0ed      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004ae0:	2313      	movs	r3, #19
 8004ae2:	18fb      	adds	r3, r7, r3
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d154      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004aea:	4b69      	ldr	r3, [pc, #420]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004aec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004aee:	23c0      	movs	r3, #192	@ 0xc0
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4013      	ands	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d019      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d014      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b06:	4b62      	ldr	r3, [pc, #392]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0a:	4a63      	ldr	r2, [pc, #396]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b10:	4b5f      	ldr	r3, [pc, #380]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b14:	4b5e      	ldr	r3, [pc, #376]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b16:	2180      	movs	r1, #128	@ 0x80
 8004b18:	0249      	lsls	r1, r1, #9
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b1e:	4b5c      	ldr	r3, [pc, #368]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b22:	4b5b      	ldr	r3, [pc, #364]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b24:	495d      	ldr	r1, [pc, #372]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b26:	400a      	ands	r2, r1
 8004b28:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b2a:	4b59      	ldr	r3, [pc, #356]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2201      	movs	r2, #1
 8004b34:	4013      	ands	r3, r2
 8004b36:	d016      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7ff f800 	bl	8003b3c <HAL_GetTick>
 8004b3c:	0003      	movs	r3, r0
 8004b3e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b40:	e00c      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b42:	f7fe fffb 	bl	8003b3c <HAL_GetTick>
 8004b46:	0002      	movs	r2, r0
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	4a54      	ldr	r2, [pc, #336]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d904      	bls.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004b52:	2313      	movs	r3, #19
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	2203      	movs	r2, #3
 8004b58:	701a      	strb	r2, [r3, #0]
            break;
 8004b5a:	e004      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b5c:	4b4c      	ldr	r3, [pc, #304]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b60:	2202      	movs	r2, #2
 8004b62:	4013      	ands	r3, r2
 8004b64:	d0ed      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004b66:	2313      	movs	r3, #19
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b70:	4b47      	ldr	r3, [pc, #284]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b74:	4a48      	ldr	r2, [pc, #288]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	0019      	movs	r1, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	4b44      	ldr	r3, [pc, #272]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b80:	430a      	orrs	r2, r1
 8004b82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b84:	e00c      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b86:	2312      	movs	r3, #18
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	2213      	movs	r2, #19
 8004b8c:	18ba      	adds	r2, r7, r2
 8004b8e:	7812      	ldrb	r2, [r2, #0]
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e005      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b94:	2312      	movs	r3, #18
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	2213      	movs	r2, #19
 8004b9a:	18ba      	adds	r2, r7, r2
 8004b9c:	7812      	ldrb	r2, [r2, #0]
 8004b9e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ba0:	2311      	movs	r3, #17
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d105      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004baa:	4b39      	ldr	r3, [pc, #228]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bae:	4b38      	ldr	r3, [pc, #224]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bb0:	493c      	ldr	r1, [pc, #240]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004bb2:	400a      	ands	r2, r1
 8004bb4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d009      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bc0:	4b33      	ldr	r3, [pc, #204]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	4393      	bics	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	4b30      	ldr	r3, [pc, #192]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d009      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bde:	4b2c      	ldr	r3, [pc, #176]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be2:	220c      	movs	r2, #12
 8004be4:	4393      	bics	r3, r2
 8004be6:	0019      	movs	r1, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	4b28      	ldr	r3, [pc, #160]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bfc:	4b24      	ldr	r3, [pc, #144]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c00:	4a29      	ldr	r2, [pc, #164]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	0019      	movs	r1, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	4b21      	ldr	r3, [pc, #132]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	2380      	movs	r3, #128	@ 0x80
 8004c16:	01db      	lsls	r3, r3, #7
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d015      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	0899      	lsrs	r1, r3, #2
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695a      	ldr	r2, [r3, #20]
 8004c28:	4b19      	ldr	r3, [pc, #100]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	2380      	movs	r3, #128	@ 0x80
 8004c34:	05db      	lsls	r3, r3, #23
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d106      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c3a:	4b15      	ldr	r3, [pc, #84]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	4b14      	ldr	r3, [pc, #80]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c40:	2180      	movs	r1, #128	@ 0x80
 8004c42:	0249      	lsls	r1, r1, #9
 8004c44:	430a      	orrs	r2, r1
 8004c46:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	2380      	movs	r3, #128	@ 0x80
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	4013      	ands	r3, r2
 8004c52:	d016      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004c54:	4b0e      	ldr	r3, [pc, #56]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c58:	4a14      	ldr	r2, [pc, #80]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	0019      	movs	r1, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c64:	430a      	orrs	r2, r1
 8004c66:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	01db      	lsls	r3, r3, #7
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d106      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c74:	4b06      	ldr	r3, [pc, #24]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c7a:	2180      	movs	r1, #128	@ 0x80
 8004c7c:	0249      	lsls	r1, r1, #9
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004c82:	2312      	movs	r3, #18
 8004c84:	18fb      	adds	r3, r7, r3
 8004c86:	781b      	ldrb	r3, [r3, #0]
}
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b006      	add	sp, #24
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40007000 	.word	0x40007000
 8004c98:	fffffcff 	.word	0xfffffcff
 8004c9c:	fffeffff 	.word	0xfffeffff
 8004ca0:	00001388 	.word	0x00001388
 8004ca4:	efffffff 	.word	0xefffffff
 8004ca8:	ffffcfff 	.word	0xffffcfff
 8004cac:	ffff3fff 	.word	0xffff3fff

08004cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e04a      	b.n	8004d58 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	223d      	movs	r2, #61	@ 0x3d
 8004cc6:	5c9b      	ldrb	r3, [r3, r2]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d107      	bne.n	8004cde <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	223c      	movs	r2, #60	@ 0x3c
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f7fe fce1 	bl	80036a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	223d      	movs	r2, #61	@ 0x3d
 8004ce2:	2102      	movs	r1, #2
 8004ce4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3304      	adds	r3, #4
 8004cee:	0019      	movs	r1, r3
 8004cf0:	0010      	movs	r0, r2
 8004cf2:	f000 f959 	bl	8004fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2248      	movs	r2, #72	@ 0x48
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	223e      	movs	r2, #62	@ 0x3e
 8004d02:	2101      	movs	r1, #1
 8004d04:	5499      	strb	r1, [r3, r2]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	223f      	movs	r2, #63	@ 0x3f
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	5499      	strb	r1, [r3, r2]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2240      	movs	r2, #64	@ 0x40
 8004d12:	2101      	movs	r1, #1
 8004d14:	5499      	strb	r1, [r3, r2]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2241      	movs	r2, #65	@ 0x41
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	5499      	strb	r1, [r3, r2]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2242      	movs	r2, #66	@ 0x42
 8004d22:	2101      	movs	r1, #1
 8004d24:	5499      	strb	r1, [r3, r2]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2243      	movs	r2, #67	@ 0x43
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2244      	movs	r2, #68	@ 0x44
 8004d32:	2101      	movs	r1, #1
 8004d34:	5499      	strb	r1, [r3, r2]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2245      	movs	r2, #69	@ 0x45
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	5499      	strb	r1, [r3, r2]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2246      	movs	r2, #70	@ 0x46
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2247      	movs	r2, #71	@ 0x47
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	223d      	movs	r2, #61	@ 0x3d
 8004d52:	2101      	movs	r1, #1
 8004d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	0018      	movs	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	b002      	add	sp, #8
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	223d      	movs	r2, #61	@ 0x3d
 8004d6c:	5c9b      	ldrb	r3, [r3, r2]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d001      	beq.n	8004d78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e034      	b.n	8004de2 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	223d      	movs	r2, #61	@ 0x3d
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a19      	ldr	r2, [pc, #100]	@ (8004dec <HAL_TIM_Base_Start+0x8c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d009      	beq.n	8004d9e <HAL_TIM_Base_Start+0x3e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a18      	ldr	r2, [pc, #96]	@ (8004df0 <HAL_TIM_Base_Start+0x90>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d004      	beq.n	8004d9e <HAL_TIM_Base_Start+0x3e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a16      	ldr	r2, [pc, #88]	@ (8004df4 <HAL_TIM_Base_Start+0x94>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d116      	bne.n	8004dcc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	4a14      	ldr	r2, [pc, #80]	@ (8004df8 <HAL_TIM_Base_Start+0x98>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b06      	cmp	r3, #6
 8004dae:	d016      	beq.n	8004dde <HAL_TIM_Base_Start+0x7e>
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	2380      	movs	r3, #128	@ 0x80
 8004db4:	025b      	lsls	r3, r3, #9
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d011      	beq.n	8004dde <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dca:	e008      	b.n	8004dde <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	e000      	b.n	8004de0 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b004      	add	sp, #16
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			@ (mov r8, r8)
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40014000 	.word	0x40014000
 8004df8:	00010007 	.word	0x00010007

08004dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e06:	230f      	movs	r3, #15
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	223c      	movs	r2, #60	@ 0x3c
 8004e12:	5c9b      	ldrb	r3, [r3, r2]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_TIM_ConfigClockSource+0x20>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e0bc      	b.n	8004f96 <HAL_TIM_ConfigClockSource+0x19a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	223c      	movs	r2, #60	@ 0x3c
 8004e20:	2101      	movs	r1, #1
 8004e22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	223d      	movs	r2, #61	@ 0x3d
 8004e28:	2102      	movs	r1, #2
 8004e2a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4a5a      	ldr	r2, [pc, #360]	@ (8004fa0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4a59      	ldr	r2, [pc, #356]	@ (8004fa4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2280      	movs	r2, #128	@ 0x80
 8004e52:	0192      	lsls	r2, r2, #6
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d040      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0xde>
 8004e58:	2280      	movs	r2, #128	@ 0x80
 8004e5a:	0192      	lsls	r2, r2, #6
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d900      	bls.n	8004e62 <HAL_TIM_ConfigClockSource+0x66>
 8004e60:	e088      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>
 8004e62:	2280      	movs	r2, #128	@ 0x80
 8004e64:	0152      	lsls	r2, r2, #5
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d100      	bne.n	8004e6c <HAL_TIM_ConfigClockSource+0x70>
 8004e6a:	e088      	b.n	8004f7e <HAL_TIM_ConfigClockSource+0x182>
 8004e6c:	2280      	movs	r2, #128	@ 0x80
 8004e6e:	0152      	lsls	r2, r2, #5
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d900      	bls.n	8004e76 <HAL_TIM_ConfigClockSource+0x7a>
 8004e74:	e07e      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>
 8004e76:	2b70      	cmp	r3, #112	@ 0x70
 8004e78:	d018      	beq.n	8004eac <HAL_TIM_ConfigClockSource+0xb0>
 8004e7a:	d900      	bls.n	8004e7e <HAL_TIM_ConfigClockSource+0x82>
 8004e7c:	e07a      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>
 8004e7e:	2b60      	cmp	r3, #96	@ 0x60
 8004e80:	d04f      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x126>
 8004e82:	d900      	bls.n	8004e86 <HAL_TIM_ConfigClockSource+0x8a>
 8004e84:	e076      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>
 8004e86:	2b50      	cmp	r3, #80	@ 0x50
 8004e88:	d03b      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x106>
 8004e8a:	d900      	bls.n	8004e8e <HAL_TIM_ConfigClockSource+0x92>
 8004e8c:	e072      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>
 8004e8e:	2b40      	cmp	r3, #64	@ 0x40
 8004e90:	d057      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0x146>
 8004e92:	d900      	bls.n	8004e96 <HAL_TIM_ConfigClockSource+0x9a>
 8004e94:	e06e      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>
 8004e96:	2b30      	cmp	r3, #48	@ 0x30
 8004e98:	d063      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x166>
 8004e9a:	d86b      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d060      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x166>
 8004ea0:	d868      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d05d      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x166>
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d05b      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x166>
 8004eaa:	e063      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ebc:	f000 f974 	bl	80051a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2277      	movs	r2, #119	@ 0x77
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	609a      	str	r2, [r3, #8]
      break;
 8004ed8:	e052      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eea:	f000 f95d 	bl	80051a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2180      	movs	r1, #128	@ 0x80
 8004efa:	01c9      	lsls	r1, r1, #7
 8004efc:	430a      	orrs	r2, r1
 8004efe:	609a      	str	r2, [r3, #8]
      break;
 8004f00:	e03e      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0e:	001a      	movs	r2, r3
 8004f10:	f000 f8ce 	bl	80050b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2150      	movs	r1, #80	@ 0x50
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f000 f928 	bl	8005170 <TIM_ITRx_SetConfig>
      break;
 8004f20:	e02e      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f2e:	001a      	movs	r2, r3
 8004f30:	f000 f8ec 	bl	800510c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2160      	movs	r1, #96	@ 0x60
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f000 f918 	bl	8005170 <TIM_ITRx_SetConfig>
      break;
 8004f40:	e01e      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4e:	001a      	movs	r2, r3
 8004f50:	f000 f8ae 	bl	80050b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2140      	movs	r1, #64	@ 0x40
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f000 f908 	bl	8005170 <TIM_ITRx_SetConfig>
      break;
 8004f60:	e00e      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	0019      	movs	r1, r3
 8004f6c:	0010      	movs	r0, r2
 8004f6e:	f000 f8ff 	bl	8005170 <TIM_ITRx_SetConfig>
      break;
 8004f72:	e005      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004f74:	230f      	movs	r3, #15
 8004f76:	18fb      	adds	r3, r7, r3
 8004f78:	2201      	movs	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]
      break;
 8004f7c:	e000      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004f7e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	223d      	movs	r2, #61	@ 0x3d
 8004f84:	2101      	movs	r1, #1
 8004f86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	223c      	movs	r2, #60	@ 0x3c
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	5499      	strb	r1, [r3, r2]

  return status;
 8004f90:	230f      	movs	r3, #15
 8004f92:	18fb      	adds	r3, r7, r3
 8004f94:	781b      	ldrb	r3, [r3, #0]
}
 8004f96:	0018      	movs	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b004      	add	sp, #16
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			@ (mov r8, r8)
 8004fa0:	ffceff88 	.word	0xffceff88
 8004fa4:	ffff00ff 	.word	0xffff00ff

08004fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a36      	ldr	r2, [pc, #216]	@ (8005094 <TIM_Base_SetConfig+0xec>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_Base_SetConfig+0x20>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a35      	ldr	r2, [pc, #212]	@ (8005098 <TIM_Base_SetConfig+0xf0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d108      	bne.n	8004fda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2270      	movs	r2, #112	@ 0x70
 8004fcc:	4393      	bics	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8005094 <TIM_Base_SetConfig+0xec>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d013      	beq.n	800500a <TIM_Base_SetConfig+0x62>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8005098 <TIM_Base_SetConfig+0xf0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00f      	beq.n	800500a <TIM_Base_SetConfig+0x62>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2b      	ldr	r2, [pc, #172]	@ (800509c <TIM_Base_SetConfig+0xf4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00b      	beq.n	800500a <TIM_Base_SetConfig+0x62>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80050a0 <TIM_Base_SetConfig+0xf8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d007      	beq.n	800500a <TIM_Base_SetConfig+0x62>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a29      	ldr	r2, [pc, #164]	@ (80050a4 <TIM_Base_SetConfig+0xfc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d003      	beq.n	800500a <TIM_Base_SetConfig+0x62>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a28      	ldr	r2, [pc, #160]	@ (80050a8 <TIM_Base_SetConfig+0x100>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d108      	bne.n	800501c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a27      	ldr	r2, [pc, #156]	@ (80050ac <TIM_Base_SetConfig+0x104>)
 800500e:	4013      	ands	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2280      	movs	r2, #128	@ 0x80
 8005020:	4393      	bics	r3, r2
 8005022:	001a      	movs	r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a13      	ldr	r2, [pc, #76]	@ (8005094 <TIM_Base_SetConfig+0xec>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00b      	beq.n	8005062 <TIM_Base_SetConfig+0xba>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a14      	ldr	r2, [pc, #80]	@ (80050a0 <TIM_Base_SetConfig+0xf8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <TIM_Base_SetConfig+0xba>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a13      	ldr	r2, [pc, #76]	@ (80050a4 <TIM_Base_SetConfig+0xfc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_Base_SetConfig+0xba>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a12      	ldr	r2, [pc, #72]	@ (80050a8 <TIM_Base_SetConfig+0x100>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d103      	bne.n	800506a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2201      	movs	r2, #1
 8005076:	4013      	ands	r3, r2
 8005078:	2b01      	cmp	r3, #1
 800507a:	d106      	bne.n	800508a <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	2201      	movs	r2, #1
 8005082:	4393      	bics	r3, r2
 8005084:	001a      	movs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	611a      	str	r2, [r3, #16]
  }
}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	b004      	add	sp, #16
 8005090:	bd80      	pop	{r7, pc}
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	40012c00 	.word	0x40012c00
 8005098:	40000400 	.word	0x40000400
 800509c:	40002000 	.word	0x40002000
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40014400 	.word	0x40014400
 80050a8:	40014800 	.word	0x40014800
 80050ac:	fffffcff 	.word	0xfffffcff

080050b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	2201      	movs	r2, #1
 80050c8:	4393      	bics	r3, r2
 80050ca:	001a      	movs	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	22f0      	movs	r2, #240	@ 0xf0
 80050da:	4393      	bics	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	220a      	movs	r2, #10
 80050ec:	4393      	bics	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	621a      	str	r2, [r3, #32]
}
 8005104:	46c0      	nop			@ (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	b006      	add	sp, #24
 800510a:	bd80      	pop	{r7, pc}

0800510c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	2210      	movs	r2, #16
 8005124:	4393      	bics	r3, r2
 8005126:	001a      	movs	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4a0d      	ldr	r2, [pc, #52]	@ (800516c <TIM_TI2_ConfigInputStage+0x60>)
 8005136:	4013      	ands	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	031b      	lsls	r3, r3, #12
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	22a0      	movs	r2, #160	@ 0xa0
 8005148:	4393      	bics	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	46bd      	mov	sp, r7
 8005166:	b006      	add	sp, #24
 8005168:	bd80      	pop	{r7, pc}
 800516a:	46c0      	nop			@ (mov r8, r8)
 800516c:	ffff0fff 	.word	0xffff0fff

08005170 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4a08      	ldr	r2, [pc, #32]	@ (80051a4 <TIM_ITRx_SetConfig+0x34>)
 8005184:	4013      	ands	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	2207      	movs	r2, #7
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	609a      	str	r2, [r3, #8]
}
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	46bd      	mov	sp, r7
 800519e:	b004      	add	sp, #16
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	ffcfff8f 	.word	0xffcfff8f

080051a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4a09      	ldr	r2, [pc, #36]	@ (80051e4 <TIM_ETR_SetConfig+0x3c>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	021a      	lsls	r2, r3, #8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	46c0      	nop			@ (mov r8, r8)
 80051de:	46bd      	mov	sp, r7
 80051e0:	b006      	add	sp, #24
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	ffff00ff 	.word	0xffff00ff

080051e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	223c      	movs	r2, #60	@ 0x3c
 80051f6:	5c9b      	ldrb	r3, [r3, r2]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e04f      	b.n	80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	223c      	movs	r2, #60	@ 0x3c
 8005204:	2101      	movs	r1, #1
 8005206:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	223d      	movs	r2, #61	@ 0x3d
 800520c:	2102      	movs	r1, #2
 800520e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a20      	ldr	r2, [pc, #128]	@ (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d108      	bne.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800522e:	4013      	ands	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2270      	movs	r2, #112	@ 0x70
 8005240:	4393      	bics	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a13      	ldr	r2, [pc, #76]	@ (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d009      	beq.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a12      	ldr	r2, [pc, #72]	@ (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d004      	beq.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a11      	ldr	r2, [pc, #68]	@ (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d10c      	bne.n	800528e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2280      	movs	r2, #128	@ 0x80
 8005278:	4393      	bics	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	4313      	orrs	r3, r2
 8005284:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	223d      	movs	r2, #61	@ 0x3d
 8005292:	2101      	movs	r1, #1
 8005294:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	223c      	movs	r2, #60	@ 0x3c
 800529a:	2100      	movs	r1, #0
 800529c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b004      	add	sp, #16
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	ff0fffff 	.word	0xff0fffff
 80052b0:	40000400 	.word	0x40000400
 80052b4:	40014000 	.word	0x40014000

080052b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e046      	b.n	8005358 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2288      	movs	r2, #136	@ 0x88
 80052ce:	589b      	ldr	r3, [r3, r2]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d107      	bne.n	80052e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2284      	movs	r2, #132	@ 0x84
 80052d8:	2100      	movs	r1, #0
 80052da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	0018      	movs	r0, r3
 80052e0:	f7fe f9fe 	bl	80036e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2288      	movs	r2, #136	@ 0x88
 80052e8:	2124      	movs	r1, #36	@ 0x24
 80052ea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2101      	movs	r1, #1
 80052f8:	438a      	bics	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	0018      	movs	r0, r3
 8005308:	f000 fad2 	bl	80058b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	0018      	movs	r0, r3
 8005310:	f000 f92a 	bl	8005568 <UART_SetConfig>
 8005314:	0003      	movs	r3, r0
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e01c      	b.n	8005358 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	490d      	ldr	r1, [pc, #52]	@ (8005360 <HAL_UART_Init+0xa8>)
 800532a:	400a      	ands	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	212a      	movs	r1, #42	@ 0x2a
 800533a:	438a      	bics	r2, r1
 800533c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2101      	movs	r1, #1
 800534a:	430a      	orrs	r2, r1
 800534c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	0018      	movs	r0, r3
 8005352:	f000 fb61 	bl	8005a18 <UART_CheckIdleState>
 8005356:	0003      	movs	r3, r0
}
 8005358:	0018      	movs	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	b002      	add	sp, #8
 800535e:	bd80      	pop	{r7, pc}
 8005360:	ffffb7ff 	.word	0xffffb7ff

08005364 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e04e      	b.n	8005414 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2288      	movs	r2, #136	@ 0x88
 800537a:	589b      	ldr	r3, [r3, r2]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d107      	bne.n	8005390 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2284      	movs	r2, #132	@ 0x84
 8005384:	2100      	movs	r1, #0
 8005386:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	0018      	movs	r0, r3
 800538c:	f7fe f9a8 	bl	80036e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2288      	movs	r2, #136	@ 0x88
 8005394:	2124      	movs	r1, #36	@ 0x24
 8005396:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2101      	movs	r1, #1
 80053a4:	438a      	bics	r2, r1
 80053a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	0018      	movs	r0, r3
 80053b4:	f000 fa7c 	bl	80058b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	0018      	movs	r0, r3
 80053bc:	f000 f8d4 	bl	8005568 <UART_SetConfig>
 80053c0:	0003      	movs	r3, r0
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e024      	b.n	8005414 <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4911      	ldr	r1, [pc, #68]	@ (800541c <HAL_HalfDuplex_Init+0xb8>)
 80053d6:	400a      	ands	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2122      	movs	r1, #34	@ 0x22
 80053e6:	438a      	bics	r2, r1
 80053e8:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2108      	movs	r1, #8
 80053f6:	430a      	orrs	r2, r1
 80053f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2101      	movs	r1, #1
 8005406:	430a      	orrs	r2, r1
 8005408:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	0018      	movs	r0, r3
 800540e:	f000 fb03 	bl	8005a18 <UART_CheckIdleState>
 8005412:	0003      	movs	r3, r0
}
 8005414:	0018      	movs	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	b002      	add	sp, #8
 800541a:	bd80      	pop	{r7, pc}
 800541c:	ffffb7ff 	.word	0xffffb7ff

08005420 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	@ 0x28
 8005424:	af02      	add	r7, sp, #8
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	1dbb      	adds	r3, r7, #6
 800542e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2288      	movs	r2, #136	@ 0x88
 8005434:	589b      	ldr	r3, [r3, r2]
 8005436:	2b20      	cmp	r3, #32
 8005438:	d000      	beq.n	800543c <HAL_UART_Transmit+0x1c>
 800543a:	e090      	b.n	800555e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_UART_Transmit+0x2a>
 8005442:	1dbb      	adds	r3, r7, #6
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e088      	b.n	8005560 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	2380      	movs	r3, #128	@ 0x80
 8005454:	015b      	lsls	r3, r3, #5
 8005456:	429a      	cmp	r2, r3
 8005458:	d109      	bne.n	800546e <HAL_UART_Transmit+0x4e>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d105      	bne.n	800546e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2201      	movs	r2, #1
 8005466:	4013      	ands	r3, r2
 8005468:	d001      	beq.n	800546e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e078      	b.n	8005560 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2290      	movs	r2, #144	@ 0x90
 8005472:	2100      	movs	r1, #0
 8005474:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2288      	movs	r2, #136	@ 0x88
 800547a:	2121      	movs	r1, #33	@ 0x21
 800547c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800547e:	f7fe fb5d 	bl	8003b3c <HAL_GetTick>
 8005482:	0003      	movs	r3, r0
 8005484:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1dba      	adds	r2, r7, #6
 800548a:	2154      	movs	r1, #84	@ 0x54
 800548c:	8812      	ldrh	r2, [r2, #0]
 800548e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	1dba      	adds	r2, r7, #6
 8005494:	2156      	movs	r1, #86	@ 0x56
 8005496:	8812      	ldrh	r2, [r2, #0]
 8005498:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	2380      	movs	r3, #128	@ 0x80
 80054a0:	015b      	lsls	r3, r3, #5
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d108      	bne.n	80054b8 <HAL_UART_Transmit+0x98>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d104      	bne.n	80054b8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	e003      	b.n	80054c0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054bc:	2300      	movs	r3, #0
 80054be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054c0:	e030      	b.n	8005524 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	0013      	movs	r3, r2
 80054cc:	2200      	movs	r2, #0
 80054ce:	2180      	movs	r1, #128	@ 0x80
 80054d0:	f000 fb4c 	bl	8005b6c <UART_WaitOnFlagUntilTimeout>
 80054d4:	1e03      	subs	r3, r0, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2288      	movs	r2, #136	@ 0x88
 80054dc:	2120      	movs	r1, #32
 80054de:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e03d      	b.n	8005560 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	001a      	movs	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	05d2      	lsls	r2, r2, #23
 80054f6:	0dd2      	lsrs	r2, r2, #23
 80054f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	3302      	adds	r3, #2
 80054fe:	61bb      	str	r3, [r7, #24]
 8005500:	e007      	b.n	8005512 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	3301      	adds	r3, #1
 8005510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2256      	movs	r2, #86	@ 0x56
 8005516:	5a9b      	ldrh	r3, [r3, r2]
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b299      	uxth	r1, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2256      	movs	r2, #86	@ 0x56
 8005522:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2256      	movs	r2, #86	@ 0x56
 8005528:	5a9b      	ldrh	r3, [r3, r2]
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1c8      	bne.n	80054c2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	0013      	movs	r3, r2
 800553a:	2200      	movs	r2, #0
 800553c:	2140      	movs	r1, #64	@ 0x40
 800553e:	f000 fb15 	bl	8005b6c <UART_WaitOnFlagUntilTimeout>
 8005542:	1e03      	subs	r3, r0, #0
 8005544:	d005      	beq.n	8005552 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2288      	movs	r2, #136	@ 0x88
 800554a:	2120      	movs	r1, #32
 800554c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e006      	b.n	8005560 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2288      	movs	r2, #136	@ 0x88
 8005556:	2120      	movs	r1, #32
 8005558:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e000      	b.n	8005560 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800555e:	2302      	movs	r3, #2
  }
}
 8005560:	0018      	movs	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	b008      	add	sp, #32
 8005566:	bd80      	pop	{r7, pc}

08005568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005570:	231a      	movs	r3, #26
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	4313      	orrs	r3, r2
 800558e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4abc      	ldr	r2, [pc, #752]	@ (8005888 <UART_SetConfig+0x320>)
 8005598:	4013      	ands	r3, r2
 800559a:	0019      	movs	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4ab7      	ldr	r2, [pc, #732]	@ (800588c <UART_SetConfig+0x324>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	0019      	movs	r1, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	4aae      	ldr	r2, [pc, #696]	@ (8005890 <UART_SetConfig+0x328>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	0019      	movs	r1, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ea:	220f      	movs	r2, #15
 80055ec:	4393      	bics	r3, r2
 80055ee:	0019      	movs	r1, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4aa4      	ldr	r2, [pc, #656]	@ (8005894 <UART_SetConfig+0x32c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d127      	bne.n	8005656 <UART_SetConfig+0xee>
 8005606:	4ba4      	ldr	r3, [pc, #656]	@ (8005898 <UART_SetConfig+0x330>)
 8005608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560a:	2203      	movs	r2, #3
 800560c:	4013      	ands	r3, r2
 800560e:	2b03      	cmp	r3, #3
 8005610:	d017      	beq.n	8005642 <UART_SetConfig+0xda>
 8005612:	d81b      	bhi.n	800564c <UART_SetConfig+0xe4>
 8005614:	2b02      	cmp	r3, #2
 8005616:	d00a      	beq.n	800562e <UART_SetConfig+0xc6>
 8005618:	d818      	bhi.n	800564c <UART_SetConfig+0xe4>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <UART_SetConfig+0xbc>
 800561e:	2b01      	cmp	r3, #1
 8005620:	d00a      	beq.n	8005638 <UART_SetConfig+0xd0>
 8005622:	e013      	b.n	800564c <UART_SetConfig+0xe4>
 8005624:	231b      	movs	r3, #27
 8005626:	18fb      	adds	r3, r7, r3
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	e058      	b.n	80056e0 <UART_SetConfig+0x178>
 800562e:	231b      	movs	r3, #27
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	2202      	movs	r2, #2
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	e053      	b.n	80056e0 <UART_SetConfig+0x178>
 8005638:	231b      	movs	r3, #27
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	2204      	movs	r2, #4
 800563e:	701a      	strb	r2, [r3, #0]
 8005640:	e04e      	b.n	80056e0 <UART_SetConfig+0x178>
 8005642:	231b      	movs	r3, #27
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	2208      	movs	r2, #8
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	e049      	b.n	80056e0 <UART_SetConfig+0x178>
 800564c:	231b      	movs	r3, #27
 800564e:	18fb      	adds	r3, r7, r3
 8005650:	2210      	movs	r2, #16
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	e044      	b.n	80056e0 <UART_SetConfig+0x178>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a90      	ldr	r2, [pc, #576]	@ (800589c <UART_SetConfig+0x334>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d127      	bne.n	80056b0 <UART_SetConfig+0x148>
 8005660:	4b8d      	ldr	r3, [pc, #564]	@ (8005898 <UART_SetConfig+0x330>)
 8005662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005664:	220c      	movs	r2, #12
 8005666:	4013      	ands	r3, r2
 8005668:	2b0c      	cmp	r3, #12
 800566a:	d017      	beq.n	800569c <UART_SetConfig+0x134>
 800566c:	d81b      	bhi.n	80056a6 <UART_SetConfig+0x13e>
 800566e:	2b08      	cmp	r3, #8
 8005670:	d00a      	beq.n	8005688 <UART_SetConfig+0x120>
 8005672:	d818      	bhi.n	80056a6 <UART_SetConfig+0x13e>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <UART_SetConfig+0x116>
 8005678:	2b04      	cmp	r3, #4
 800567a:	d00a      	beq.n	8005692 <UART_SetConfig+0x12a>
 800567c:	e013      	b.n	80056a6 <UART_SetConfig+0x13e>
 800567e:	231b      	movs	r3, #27
 8005680:	18fb      	adds	r3, r7, r3
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	e02b      	b.n	80056e0 <UART_SetConfig+0x178>
 8005688:	231b      	movs	r3, #27
 800568a:	18fb      	adds	r3, r7, r3
 800568c:	2202      	movs	r2, #2
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	e026      	b.n	80056e0 <UART_SetConfig+0x178>
 8005692:	231b      	movs	r3, #27
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	2204      	movs	r2, #4
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	e021      	b.n	80056e0 <UART_SetConfig+0x178>
 800569c:	231b      	movs	r3, #27
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	2208      	movs	r2, #8
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	e01c      	b.n	80056e0 <UART_SetConfig+0x178>
 80056a6:	231b      	movs	r3, #27
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	2210      	movs	r2, #16
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	e017      	b.n	80056e0 <UART_SetConfig+0x178>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a7a      	ldr	r2, [pc, #488]	@ (80058a0 <UART_SetConfig+0x338>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d104      	bne.n	80056c4 <UART_SetConfig+0x15c>
 80056ba:	231b      	movs	r3, #27
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	2200      	movs	r2, #0
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	e00d      	b.n	80056e0 <UART_SetConfig+0x178>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a76      	ldr	r2, [pc, #472]	@ (80058a4 <UART_SetConfig+0x33c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d104      	bne.n	80056d8 <UART_SetConfig+0x170>
 80056ce:	231b      	movs	r3, #27
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	e003      	b.n	80056e0 <UART_SetConfig+0x178>
 80056d8:	231b      	movs	r3, #27
 80056da:	18fb      	adds	r3, r7, r3
 80056dc:	2210      	movs	r2, #16
 80056de:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	2380      	movs	r3, #128	@ 0x80
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d000      	beq.n	80056ee <UART_SetConfig+0x186>
 80056ec:	e065      	b.n	80057ba <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80056ee:	231b      	movs	r3, #27
 80056f0:	18fb      	adds	r3, r7, r3
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d015      	beq.n	8005724 <UART_SetConfig+0x1bc>
 80056f8:	dc18      	bgt.n	800572c <UART_SetConfig+0x1c4>
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d00d      	beq.n	800571a <UART_SetConfig+0x1b2>
 80056fe:	dc15      	bgt.n	800572c <UART_SetConfig+0x1c4>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <UART_SetConfig+0x1a2>
 8005704:	2b02      	cmp	r3, #2
 8005706:	d005      	beq.n	8005714 <UART_SetConfig+0x1ac>
 8005708:	e010      	b.n	800572c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800570a:	f7ff f987 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 800570e:	0003      	movs	r3, r0
 8005710:	617b      	str	r3, [r7, #20]
        break;
 8005712:	e012      	b.n	800573a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005714:	4b64      	ldr	r3, [pc, #400]	@ (80058a8 <UART_SetConfig+0x340>)
 8005716:	617b      	str	r3, [r7, #20]
        break;
 8005718:	e00f      	b.n	800573a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571a:	f7ff f8f3 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 800571e:	0003      	movs	r3, r0
 8005720:	617b      	str	r3, [r7, #20]
        break;
 8005722:	e00a      	b.n	800573a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005724:	2380      	movs	r3, #128	@ 0x80
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	617b      	str	r3, [r7, #20]
        break;
 800572a:	e006      	b.n	800573a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005730:	231a      	movs	r3, #26
 8005732:	18fb      	adds	r3, r7, r3
 8005734:	2201      	movs	r2, #1
 8005736:	701a      	strb	r2, [r3, #0]
        break;
 8005738:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d100      	bne.n	8005742 <UART_SetConfig+0x1da>
 8005740:	e08d      	b.n	800585e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005746:	4b59      	ldr	r3, [pc, #356]	@ (80058ac <UART_SetConfig+0x344>)
 8005748:	0052      	lsls	r2, r2, #1
 800574a:	5ad3      	ldrh	r3, [r2, r3]
 800574c:	0019      	movs	r1, r3
 800574e:	6978      	ldr	r0, [r7, #20]
 8005750:	f7fa fcf2 	bl	8000138 <__udivsi3>
 8005754:	0003      	movs	r3, r0
 8005756:	005a      	lsls	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	18d2      	adds	r2, r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	0019      	movs	r1, r3
 8005766:	0010      	movs	r0, r2
 8005768:	f7fa fce6 	bl	8000138 <__udivsi3>
 800576c:	0003      	movs	r3, r0
 800576e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b0f      	cmp	r3, #15
 8005774:	d91c      	bls.n	80057b0 <UART_SetConfig+0x248>
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	2380      	movs	r3, #128	@ 0x80
 800577a:	025b      	lsls	r3, r3, #9
 800577c:	429a      	cmp	r2, r3
 800577e:	d217      	bcs.n	80057b0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	b29a      	uxth	r2, r3
 8005784:	200e      	movs	r0, #14
 8005786:	183b      	adds	r3, r7, r0
 8005788:	210f      	movs	r1, #15
 800578a:	438a      	bics	r2, r1
 800578c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	b29b      	uxth	r3, r3
 8005794:	2207      	movs	r2, #7
 8005796:	4013      	ands	r3, r2
 8005798:	b299      	uxth	r1, r3
 800579a:	183b      	adds	r3, r7, r0
 800579c:	183a      	adds	r2, r7, r0
 800579e:	8812      	ldrh	r2, [r2, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	183a      	adds	r2, r7, r0
 80057aa:	8812      	ldrh	r2, [r2, #0]
 80057ac:	60da      	str	r2, [r3, #12]
 80057ae:	e056      	b.n	800585e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80057b0:	231a      	movs	r3, #26
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	2201      	movs	r2, #1
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	e051      	b.n	800585e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057ba:	231b      	movs	r3, #27
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d015      	beq.n	80057f0 <UART_SetConfig+0x288>
 80057c4:	dc18      	bgt.n	80057f8 <UART_SetConfig+0x290>
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d00d      	beq.n	80057e6 <UART_SetConfig+0x27e>
 80057ca:	dc15      	bgt.n	80057f8 <UART_SetConfig+0x290>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <UART_SetConfig+0x26e>
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d005      	beq.n	80057e0 <UART_SetConfig+0x278>
 80057d4:	e010      	b.n	80057f8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d6:	f7ff f921 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 80057da:	0003      	movs	r3, r0
 80057dc:	617b      	str	r3, [r7, #20]
        break;
 80057de:	e012      	b.n	8005806 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e0:	4b31      	ldr	r3, [pc, #196]	@ (80058a8 <UART_SetConfig+0x340>)
 80057e2:	617b      	str	r3, [r7, #20]
        break;
 80057e4:	e00f      	b.n	8005806 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057e6:	f7ff f88d 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 80057ea:	0003      	movs	r3, r0
 80057ec:	617b      	str	r3, [r7, #20]
        break;
 80057ee:	e00a      	b.n	8005806 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057f0:	2380      	movs	r3, #128	@ 0x80
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	617b      	str	r3, [r7, #20]
        break;
 80057f6:	e006      	b.n	8005806 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057fc:	231a      	movs	r3, #26
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	2201      	movs	r2, #1
 8005802:	701a      	strb	r2, [r3, #0]
        break;
 8005804:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d028      	beq.n	800585e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005810:	4b26      	ldr	r3, [pc, #152]	@ (80058ac <UART_SetConfig+0x344>)
 8005812:	0052      	lsls	r2, r2, #1
 8005814:	5ad3      	ldrh	r3, [r2, r3]
 8005816:	0019      	movs	r1, r3
 8005818:	6978      	ldr	r0, [r7, #20]
 800581a:	f7fa fc8d 	bl	8000138 <__udivsi3>
 800581e:	0003      	movs	r3, r0
 8005820:	001a      	movs	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	18d2      	adds	r2, r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	0019      	movs	r1, r3
 8005830:	0010      	movs	r0, r2
 8005832:	f7fa fc81 	bl	8000138 <__udivsi3>
 8005836:	0003      	movs	r3, r0
 8005838:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b0f      	cmp	r3, #15
 800583e:	d90a      	bls.n	8005856 <UART_SetConfig+0x2ee>
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	2380      	movs	r3, #128	@ 0x80
 8005844:	025b      	lsls	r3, r3, #9
 8005846:	429a      	cmp	r2, r3
 8005848:	d205      	bcs.n	8005856 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	b29a      	uxth	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60da      	str	r2, [r3, #12]
 8005854:	e003      	b.n	800585e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005856:	231a      	movs	r3, #26
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	2201      	movs	r2, #1
 800585c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	226a      	movs	r2, #106	@ 0x6a
 8005862:	2101      	movs	r1, #1
 8005864:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2268      	movs	r2, #104	@ 0x68
 800586a:	2101      	movs	r1, #1
 800586c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800587a:	231a      	movs	r3, #26
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	781b      	ldrb	r3, [r3, #0]
}
 8005880:	0018      	movs	r0, r3
 8005882:	46bd      	mov	sp, r7
 8005884:	b008      	add	sp, #32
 8005886:	bd80      	pop	{r7, pc}
 8005888:	cfff69f3 	.word	0xcfff69f3
 800588c:	ffffcfff 	.word	0xffffcfff
 8005890:	11fff4ff 	.word	0x11fff4ff
 8005894:	40013800 	.word	0x40013800
 8005898:	40021000 	.word	0x40021000
 800589c:	40004400 	.word	0x40004400
 80058a0:	40004800 	.word	0x40004800
 80058a4:	40004c00 	.word	0x40004c00
 80058a8:	00f42400 	.word	0x00f42400
 80058ac:	08008e40 	.word	0x08008e40

080058b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058bc:	2208      	movs	r2, #8
 80058be:	4013      	ands	r3, r2
 80058c0:	d00b      	beq.n	80058da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4a4a      	ldr	r2, [pc, #296]	@ (80059f4 <UART_AdvFeatureConfig+0x144>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	0019      	movs	r1, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058de:	2201      	movs	r2, #1
 80058e0:	4013      	ands	r3, r2
 80058e2:	d00b      	beq.n	80058fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	4a43      	ldr	r2, [pc, #268]	@ (80059f8 <UART_AdvFeatureConfig+0x148>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	0019      	movs	r1, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005900:	2202      	movs	r2, #2
 8005902:	4013      	ands	r3, r2
 8005904:	d00b      	beq.n	800591e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4a3b      	ldr	r2, [pc, #236]	@ (80059fc <UART_AdvFeatureConfig+0x14c>)
 800590e:	4013      	ands	r3, r2
 8005910:	0019      	movs	r1, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005922:	2204      	movs	r2, #4
 8005924:	4013      	ands	r3, r2
 8005926:	d00b      	beq.n	8005940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	4a34      	ldr	r2, [pc, #208]	@ (8005a00 <UART_AdvFeatureConfig+0x150>)
 8005930:	4013      	ands	r3, r2
 8005932:	0019      	movs	r1, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005944:	2210      	movs	r2, #16
 8005946:	4013      	ands	r3, r2
 8005948:	d00b      	beq.n	8005962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4a2c      	ldr	r2, [pc, #176]	@ (8005a04 <UART_AdvFeatureConfig+0x154>)
 8005952:	4013      	ands	r3, r2
 8005954:	0019      	movs	r1, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005966:	2220      	movs	r2, #32
 8005968:	4013      	ands	r3, r2
 800596a:	d00b      	beq.n	8005984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	4a25      	ldr	r2, [pc, #148]	@ (8005a08 <UART_AdvFeatureConfig+0x158>)
 8005974:	4013      	ands	r3, r2
 8005976:	0019      	movs	r1, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005988:	2240      	movs	r2, #64	@ 0x40
 800598a:	4013      	ands	r3, r2
 800598c:	d01d      	beq.n	80059ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	4a1d      	ldr	r2, [pc, #116]	@ (8005a0c <UART_AdvFeatureConfig+0x15c>)
 8005996:	4013      	ands	r3, r2
 8005998:	0019      	movs	r1, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059aa:	2380      	movs	r3, #128	@ 0x80
 80059ac:	035b      	lsls	r3, r3, #13
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d10b      	bne.n	80059ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	4a15      	ldr	r2, [pc, #84]	@ (8005a10 <UART_AdvFeatureConfig+0x160>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	0019      	movs	r1, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ce:	2280      	movs	r2, #128	@ 0x80
 80059d0:	4013      	ands	r3, r2
 80059d2:	d00b      	beq.n	80059ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4a0e      	ldr	r2, [pc, #56]	@ (8005a14 <UART_AdvFeatureConfig+0x164>)
 80059dc:	4013      	ands	r3, r2
 80059de:	0019      	movs	r1, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	605a      	str	r2, [r3, #4]
  }
}
 80059ec:	46c0      	nop			@ (mov r8, r8)
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b002      	add	sp, #8
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	ffff7fff 	.word	0xffff7fff
 80059f8:	fffdffff 	.word	0xfffdffff
 80059fc:	fffeffff 	.word	0xfffeffff
 8005a00:	fffbffff 	.word	0xfffbffff
 8005a04:	ffffefff 	.word	0xffffefff
 8005a08:	ffffdfff 	.word	0xffffdfff
 8005a0c:	ffefffff 	.word	0xffefffff
 8005a10:	ff9fffff 	.word	0xff9fffff
 8005a14:	fff7ffff 	.word	0xfff7ffff

08005a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b092      	sub	sp, #72	@ 0x48
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2290      	movs	r2, #144	@ 0x90
 8005a24:	2100      	movs	r1, #0
 8005a26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a28:	f7fe f888 	bl	8003b3c <HAL_GetTick>
 8005a2c:	0003      	movs	r3, r0
 8005a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2208      	movs	r2, #8
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d12d      	bne.n	8005a9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a40:	2280      	movs	r2, #128	@ 0x80
 8005a42:	0391      	lsls	r1, r2, #14
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4a47      	ldr	r2, [pc, #284]	@ (8005b64 <UART_CheckIdleState+0x14c>)
 8005a48:	9200      	str	r2, [sp, #0]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f000 f88e 	bl	8005b6c <UART_WaitOnFlagUntilTimeout>
 8005a50:	1e03      	subs	r3, r0, #0
 8005a52:	d022      	beq.n	8005a9a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a54:	f3ef 8310 	mrs	r3, PRIMASK
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a5e:	2301      	movs	r3, #1
 8005a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a64:	f383 8810 	msr	PRIMASK, r3
}
 8005a68:	46c0      	nop			@ (mov r8, r8)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2180      	movs	r1, #128	@ 0x80
 8005a76:	438a      	bics	r2, r1
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a80:	f383 8810 	msr	PRIMASK, r3
}
 8005a84:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2288      	movs	r2, #136	@ 0x88
 8005a8a:	2120      	movs	r1, #32
 8005a8c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2284      	movs	r2, #132	@ 0x84
 8005a92:	2100      	movs	r1, #0
 8005a94:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e060      	b.n	8005b5c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2204      	movs	r2, #4
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d146      	bne.n	8005b36 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aaa:	2280      	movs	r2, #128	@ 0x80
 8005aac:	03d1      	lsls	r1, r2, #15
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	4a2c      	ldr	r2, [pc, #176]	@ (8005b64 <UART_CheckIdleState+0x14c>)
 8005ab2:	9200      	str	r2, [sp, #0]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f000 f859 	bl	8005b6c <UART_WaitOnFlagUntilTimeout>
 8005aba:	1e03      	subs	r3, r0, #0
 8005abc:	d03b      	beq.n	8005b36 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005abe:	f3ef 8310 	mrs	r3, PRIMASK
 8005ac2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ac8:	2301      	movs	r3, #1
 8005aca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f383 8810 	msr	PRIMASK, r3
}
 8005ad2:	46c0      	nop			@ (mov r8, r8)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4922      	ldr	r1, [pc, #136]	@ (8005b68 <UART_CheckIdleState+0x150>)
 8005ae0:	400a      	ands	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f383 8810 	msr	PRIMASK, r3
}
 8005aee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af0:	f3ef 8310 	mrs	r3, PRIMASK
 8005af4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005af6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005afa:	2301      	movs	r3, #1
 8005afc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	f383 8810 	msr	PRIMASK, r3
}
 8005b04:	46c0      	nop			@ (mov r8, r8)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2101      	movs	r1, #1
 8005b12:	438a      	bics	r2, r1
 8005b14:	609a      	str	r2, [r3, #8]
 8005b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f383 8810 	msr	PRIMASK, r3
}
 8005b20:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	228c      	movs	r2, #140	@ 0x8c
 8005b26:	2120      	movs	r1, #32
 8005b28:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2284      	movs	r2, #132	@ 0x84
 8005b2e:	2100      	movs	r1, #0
 8005b30:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e012      	b.n	8005b5c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2288      	movs	r2, #136	@ 0x88
 8005b3a:	2120      	movs	r1, #32
 8005b3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	228c      	movs	r2, #140	@ 0x8c
 8005b42:	2120      	movs	r1, #32
 8005b44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2284      	movs	r2, #132	@ 0x84
 8005b56:	2100      	movs	r1, #0
 8005b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b010      	add	sp, #64	@ 0x40
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	01ffffff 	.word	0x01ffffff
 8005b68:	fffffedf 	.word	0xfffffedf

08005b6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	1dfb      	adds	r3, r7, #7
 8005b7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b7c:	e051      	b.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	3301      	adds	r3, #1
 8005b82:	d04e      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b84:	f7fd ffda 	bl	8003b3c <HAL_GetTick>
 8005b88:	0002      	movs	r2, r0
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d302      	bcc.n	8005b9a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e051      	b.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2204      	movs	r2, #4
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d03b      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b80      	cmp	r3, #128	@ 0x80
 8005bae:	d038      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b40      	cmp	r3, #64	@ 0x40
 8005bb4:	d035      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	2208      	movs	r2, #8
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d111      	bne.n	8005be8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2208      	movs	r2, #8
 8005bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f000 f83c 	bl	8005c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2290      	movs	r2, #144	@ 0x90
 8005bd8:	2108      	movs	r1, #8
 8005bda:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2284      	movs	r2, #132	@ 0x84
 8005be0:	2100      	movs	r1, #0
 8005be2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e02c      	b.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69da      	ldr	r2, [r3, #28]
 8005bee:	2380      	movs	r3, #128	@ 0x80
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	2380      	movs	r3, #128	@ 0x80
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d112      	bne.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2280      	movs	r2, #128	@ 0x80
 8005c02:	0112      	lsls	r2, r2, #4
 8005c04:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f000 f81f 	bl	8005c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2290      	movs	r2, #144	@ 0x90
 8005c12:	2120      	movs	r1, #32
 8005c14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2284      	movs	r2, #132	@ 0x84
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e00f      	b.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	425a      	negs	r2, r3
 8005c32:	4153      	adcs	r3, r2
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	001a      	movs	r2, r3
 8005c38:	1dfb      	adds	r3, r7, #7
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d09e      	beq.n	8005b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	0018      	movs	r0, r3
 8005c44:	46bd      	mov	sp, r7
 8005c46:	b004      	add	sp, #16
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08e      	sub	sp, #56	@ 0x38
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c54:	f3ef 8310 	mrs	r3, PRIMASK
 8005c58:	617b      	str	r3, [r7, #20]
  return(result);
 8005c5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c5e:	2301      	movs	r3, #1
 8005c60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f383 8810 	msr	PRIMASK, r3
}
 8005c68:	46c0      	nop			@ (mov r8, r8)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4926      	ldr	r1, [pc, #152]	@ (8005d10 <UART_EndRxTransfer+0xc4>)
 8005c76:	400a      	ands	r2, r1
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	f383 8810 	msr	PRIMASK, r3
}
 8005c84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c86:	f3ef 8310 	mrs	r3, PRIMASK
 8005c8a:	623b      	str	r3, [r7, #32]
  return(result);
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c90:	2301      	movs	r3, #1
 8005c92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c96:	f383 8810 	msr	PRIMASK, r3
}
 8005c9a:	46c0      	nop			@ (mov r8, r8)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	491b      	ldr	r1, [pc, #108]	@ (8005d14 <UART_EndRxTransfer+0xc8>)
 8005ca8:	400a      	ands	r2, r1
 8005caa:	609a      	str	r2, [r3, #8]
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb2:	f383 8810 	msr	PRIMASK, r3
}
 8005cb6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d118      	bne.n	8005cf2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cca:	2301      	movs	r3, #1
 8005ccc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f383 8810 	msr	PRIMASK, r3
}
 8005cd4:	46c0      	nop			@ (mov r8, r8)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2110      	movs	r1, #16
 8005ce2:	438a      	bics	r2, r1
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f383 8810 	msr	PRIMASK, r3
}
 8005cf0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	228c      	movs	r2, #140	@ 0x8c
 8005cf6:	2120      	movs	r1, #32
 8005cf8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d06:	46c0      	nop			@ (mov r8, r8)
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	b00e      	add	sp, #56	@ 0x38
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	46c0      	nop			@ (mov r8, r8)
 8005d10:	fffffedf 	.word	0xfffffedf
 8005d14:	effffffe 	.word	0xeffffffe

08005d18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2284      	movs	r2, #132	@ 0x84
 8005d24:	5c9b      	ldrb	r3, [r3, r2]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_UARTEx_DisableFifoMode+0x16>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e027      	b.n	8005d7e <HAL_UARTEx_DisableFifoMode+0x66>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2284      	movs	r2, #132	@ 0x84
 8005d32:	2101      	movs	r1, #1
 8005d34:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2288      	movs	r2, #136	@ 0x88
 8005d3a:	2124      	movs	r1, #36	@ 0x24
 8005d3c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2101      	movs	r1, #1
 8005d52:	438a      	bics	r2, r1
 8005d54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4a0b      	ldr	r2, [pc, #44]	@ (8005d88 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2288      	movs	r2, #136	@ 0x88
 8005d70:	2120      	movs	r1, #32
 8005d72:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2284      	movs	r2, #132	@ 0x84
 8005d78:	2100      	movs	r1, #0
 8005d7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	0018      	movs	r0, r3
 8005d80:	46bd      	mov	sp, r7
 8005d82:	b004      	add	sp, #16
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	dfffffff 	.word	0xdfffffff

08005d8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2284      	movs	r2, #132	@ 0x84
 8005d9a:	5c9b      	ldrb	r3, [r3, r2]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e02e      	b.n	8005e02 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2284      	movs	r2, #132	@ 0x84
 8005da8:	2101      	movs	r1, #1
 8005daa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2288      	movs	r2, #136	@ 0x88
 8005db0:	2124      	movs	r1, #36	@ 0x24
 8005db2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	438a      	bics	r2, r1
 8005dca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	08d9      	lsrs	r1, r3, #3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	0018      	movs	r0, r3
 8005de4:	f000 f854 	bl	8005e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2288      	movs	r2, #136	@ 0x88
 8005df4:	2120      	movs	r1, #32
 8005df6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2284      	movs	r2, #132	@ 0x84
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	0018      	movs	r0, r3
 8005e04:	46bd      	mov	sp, r7
 8005e06:	b004      	add	sp, #16
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2284      	movs	r2, #132	@ 0x84
 8005e1a:	5c9b      	ldrb	r3, [r3, r2]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e02f      	b.n	8005e84 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2284      	movs	r2, #132	@ 0x84
 8005e28:	2101      	movs	r1, #1
 8005e2a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2288      	movs	r2, #136	@ 0x88
 8005e30:	2124      	movs	r1, #36	@ 0x24
 8005e32:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2101      	movs	r1, #1
 8005e48:	438a      	bics	r2, r1
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	4a0e      	ldr	r2, [pc, #56]	@ (8005e8c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	0019      	movs	r1, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	0018      	movs	r0, r3
 8005e66:	f000 f813 	bl	8005e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2288      	movs	r2, #136	@ 0x88
 8005e76:	2120      	movs	r1, #32
 8005e78:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2284      	movs	r2, #132	@ 0x84
 8005e7e:	2100      	movs	r1, #0
 8005e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	0018      	movs	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	b004      	add	sp, #16
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	f1ffffff 	.word	0xf1ffffff

08005e90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d108      	bne.n	8005eb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	226a      	movs	r2, #106	@ 0x6a
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2268      	movs	r2, #104	@ 0x68
 8005eac:	2101      	movs	r1, #1
 8005eae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005eb0:	e043      	b.n	8005f3a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005eb2:	260f      	movs	r6, #15
 8005eb4:	19bb      	adds	r3, r7, r6
 8005eb6:	2208      	movs	r2, #8
 8005eb8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005eba:	200e      	movs	r0, #14
 8005ebc:	183b      	adds	r3, r7, r0
 8005ebe:	2208      	movs	r2, #8
 8005ec0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	0e5b      	lsrs	r3, r3, #25
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	240d      	movs	r4, #13
 8005ece:	193b      	adds	r3, r7, r4
 8005ed0:	2107      	movs	r1, #7
 8005ed2:	400a      	ands	r2, r1
 8005ed4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	0f5b      	lsrs	r3, r3, #29
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	250c      	movs	r5, #12
 8005ee2:	197b      	adds	r3, r7, r5
 8005ee4:	2107      	movs	r1, #7
 8005ee6:	400a      	ands	r2, r1
 8005ee8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005eea:	183b      	adds	r3, r7, r0
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	197a      	adds	r2, r7, r5
 8005ef0:	7812      	ldrb	r2, [r2, #0]
 8005ef2:	4914      	ldr	r1, [pc, #80]	@ (8005f44 <UARTEx_SetNbDataToProcess+0xb4>)
 8005ef4:	5c8a      	ldrb	r2, [r1, r2]
 8005ef6:	435a      	muls	r2, r3
 8005ef8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005efa:	197b      	adds	r3, r7, r5
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	4a12      	ldr	r2, [pc, #72]	@ (8005f48 <UARTEx_SetNbDataToProcess+0xb8>)
 8005f00:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f02:	0019      	movs	r1, r3
 8005f04:	f7fa f9a2 	bl	800024c <__divsi3>
 8005f08:	0003      	movs	r3, r0
 8005f0a:	b299      	uxth	r1, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	226a      	movs	r2, #106	@ 0x6a
 8005f10:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f12:	19bb      	adds	r3, r7, r6
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	193a      	adds	r2, r7, r4
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	490a      	ldr	r1, [pc, #40]	@ (8005f44 <UARTEx_SetNbDataToProcess+0xb4>)
 8005f1c:	5c8a      	ldrb	r2, [r1, r2]
 8005f1e:	435a      	muls	r2, r3
 8005f20:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f22:	193b      	adds	r3, r7, r4
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	4a08      	ldr	r2, [pc, #32]	@ (8005f48 <UARTEx_SetNbDataToProcess+0xb8>)
 8005f28:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f2a:	0019      	movs	r1, r3
 8005f2c:	f7fa f98e 	bl	800024c <__divsi3>
 8005f30:	0003      	movs	r3, r0
 8005f32:	b299      	uxth	r1, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2268      	movs	r2, #104	@ 0x68
 8005f38:	5299      	strh	r1, [r3, r2]
}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b005      	add	sp, #20
 8005f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f42:	46c0      	nop			@ (mov r8, r8)
 8005f44:	08008e58 	.word	0x08008e58
 8005f48:	08008e60 	.word	0x08008e60

08005f4c <__cvt>:
 8005f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4e:	001f      	movs	r7, r3
 8005f50:	2300      	movs	r3, #0
 8005f52:	0016      	movs	r6, r2
 8005f54:	b08b      	sub	sp, #44	@ 0x2c
 8005f56:	429f      	cmp	r7, r3
 8005f58:	da04      	bge.n	8005f64 <__cvt+0x18>
 8005f5a:	2180      	movs	r1, #128	@ 0x80
 8005f5c:	0609      	lsls	r1, r1, #24
 8005f5e:	187b      	adds	r3, r7, r1
 8005f60:	001f      	movs	r7, r3
 8005f62:	232d      	movs	r3, #45	@ 0x2d
 8005f64:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005f66:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005f68:	7013      	strb	r3, [r2, #0]
 8005f6a:	2320      	movs	r3, #32
 8005f6c:	2203      	movs	r2, #3
 8005f6e:	439d      	bics	r5, r3
 8005f70:	2d46      	cmp	r5, #70	@ 0x46
 8005f72:	d007      	beq.n	8005f84 <__cvt+0x38>
 8005f74:	002b      	movs	r3, r5
 8005f76:	3b45      	subs	r3, #69	@ 0x45
 8005f78:	4259      	negs	r1, r3
 8005f7a:	414b      	adcs	r3, r1
 8005f7c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005f7e:	3a01      	subs	r2, #1
 8005f80:	18cb      	adds	r3, r1, r3
 8005f82:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f84:	ab09      	add	r3, sp, #36	@ 0x24
 8005f86:	9304      	str	r3, [sp, #16]
 8005f88:	ab08      	add	r3, sp, #32
 8005f8a:	9303      	str	r3, [sp, #12]
 8005f8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f8e:	9200      	str	r2, [sp, #0]
 8005f90:	9302      	str	r3, [sp, #8]
 8005f92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f94:	0032      	movs	r2, r6
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	003b      	movs	r3, r7
 8005f9a:	f000 fe89 	bl	8006cb0 <_dtoa_r>
 8005f9e:	0004      	movs	r4, r0
 8005fa0:	2d47      	cmp	r5, #71	@ 0x47
 8005fa2:	d11b      	bne.n	8005fdc <__cvt+0x90>
 8005fa4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005fa6:	07db      	lsls	r3, r3, #31
 8005fa8:	d511      	bpl.n	8005fce <__cvt+0x82>
 8005faa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005fac:	18c3      	adds	r3, r0, r3
 8005fae:	9307      	str	r3, [sp, #28]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	0030      	movs	r0, r6
 8005fb6:	0039      	movs	r1, r7
 8005fb8:	f7fa fa44 	bl	8000444 <__aeabi_dcmpeq>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d001      	beq.n	8005fc4 <__cvt+0x78>
 8005fc0:	9b07      	ldr	r3, [sp, #28]
 8005fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fc4:	2230      	movs	r2, #48	@ 0x30
 8005fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fc8:	9907      	ldr	r1, [sp, #28]
 8005fca:	428b      	cmp	r3, r1
 8005fcc:	d320      	bcc.n	8006010 <__cvt+0xc4>
 8005fce:	0020      	movs	r0, r4
 8005fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005fd4:	1b1b      	subs	r3, r3, r4
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	b00b      	add	sp, #44	@ 0x2c
 8005fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fdc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005fde:	18c3      	adds	r3, r0, r3
 8005fe0:	9307      	str	r3, [sp, #28]
 8005fe2:	2d46      	cmp	r5, #70	@ 0x46
 8005fe4:	d1e4      	bne.n	8005fb0 <__cvt+0x64>
 8005fe6:	7803      	ldrb	r3, [r0, #0]
 8005fe8:	2b30      	cmp	r3, #48	@ 0x30
 8005fea:	d10c      	bne.n	8006006 <__cvt+0xba>
 8005fec:	2200      	movs	r2, #0
 8005fee:	2300      	movs	r3, #0
 8005ff0:	0030      	movs	r0, r6
 8005ff2:	0039      	movs	r1, r7
 8005ff4:	f7fa fa26 	bl	8000444 <__aeabi_dcmpeq>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d104      	bne.n	8006006 <__cvt+0xba>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006008:	9a07      	ldr	r2, [sp, #28]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	18d3      	adds	r3, r2, r3
 800600e:	e7ce      	b.n	8005fae <__cvt+0x62>
 8006010:	1c59      	adds	r1, r3, #1
 8006012:	9109      	str	r1, [sp, #36]	@ 0x24
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e7d6      	b.n	8005fc6 <__cvt+0x7a>

08006018 <__exponent>:
 8006018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800601a:	232b      	movs	r3, #43	@ 0x2b
 800601c:	0005      	movs	r5, r0
 800601e:	000c      	movs	r4, r1
 8006020:	b085      	sub	sp, #20
 8006022:	7002      	strb	r2, [r0, #0]
 8006024:	2900      	cmp	r1, #0
 8006026:	da01      	bge.n	800602c <__exponent+0x14>
 8006028:	424c      	negs	r4, r1
 800602a:	3302      	adds	r3, #2
 800602c:	706b      	strb	r3, [r5, #1]
 800602e:	2c09      	cmp	r4, #9
 8006030:	dd2c      	ble.n	800608c <__exponent+0x74>
 8006032:	ab02      	add	r3, sp, #8
 8006034:	1dde      	adds	r6, r3, #7
 8006036:	0020      	movs	r0, r4
 8006038:	210a      	movs	r1, #10
 800603a:	f7fa f9ed 	bl	8000418 <__aeabi_idivmod>
 800603e:	0037      	movs	r7, r6
 8006040:	3130      	adds	r1, #48	@ 0x30
 8006042:	3e01      	subs	r6, #1
 8006044:	0020      	movs	r0, r4
 8006046:	7031      	strb	r1, [r6, #0]
 8006048:	210a      	movs	r1, #10
 800604a:	9401      	str	r4, [sp, #4]
 800604c:	f7fa f8fe 	bl	800024c <__divsi3>
 8006050:	9b01      	ldr	r3, [sp, #4]
 8006052:	0004      	movs	r4, r0
 8006054:	2b63      	cmp	r3, #99	@ 0x63
 8006056:	dcee      	bgt.n	8006036 <__exponent+0x1e>
 8006058:	1eba      	subs	r2, r7, #2
 800605a:	1ca8      	adds	r0, r5, #2
 800605c:	0001      	movs	r1, r0
 800605e:	0013      	movs	r3, r2
 8006060:	3430      	adds	r4, #48	@ 0x30
 8006062:	7014      	strb	r4, [r2, #0]
 8006064:	ac02      	add	r4, sp, #8
 8006066:	3407      	adds	r4, #7
 8006068:	429c      	cmp	r4, r3
 800606a:	d80a      	bhi.n	8006082 <__exponent+0x6a>
 800606c:	2300      	movs	r3, #0
 800606e:	42a2      	cmp	r2, r4
 8006070:	d803      	bhi.n	800607a <__exponent+0x62>
 8006072:	3309      	adds	r3, #9
 8006074:	aa02      	add	r2, sp, #8
 8006076:	189b      	adds	r3, r3, r2
 8006078:	1bdb      	subs	r3, r3, r7
 800607a:	18c0      	adds	r0, r0, r3
 800607c:	1b40      	subs	r0, r0, r5
 800607e:	b005      	add	sp, #20
 8006080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006082:	781c      	ldrb	r4, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	700c      	strb	r4, [r1, #0]
 8006088:	3101      	adds	r1, #1
 800608a:	e7eb      	b.n	8006064 <__exponent+0x4c>
 800608c:	2330      	movs	r3, #48	@ 0x30
 800608e:	18e4      	adds	r4, r4, r3
 8006090:	70ab      	strb	r3, [r5, #2]
 8006092:	1d28      	adds	r0, r5, #4
 8006094:	70ec      	strb	r4, [r5, #3]
 8006096:	e7f1      	b.n	800607c <__exponent+0x64>

08006098 <_printf_float>:
 8006098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609a:	b097      	sub	sp, #92	@ 0x5c
 800609c:	000d      	movs	r5, r1
 800609e:	920a      	str	r2, [sp, #40]	@ 0x28
 80060a0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80060a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80060a6:	f000 fceb 	bl	8006a80 <_localeconv_r>
 80060aa:	6803      	ldr	r3, [r0, #0]
 80060ac:	0018      	movs	r0, r3
 80060ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80060b0:	f7fa f826 	bl	8000100 <strlen>
 80060b4:	2300      	movs	r3, #0
 80060b6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80060b8:	9314      	str	r3, [sp, #80]	@ 0x50
 80060ba:	7e2b      	ldrb	r3, [r5, #24]
 80060bc:	2207      	movs	r2, #7
 80060be:	930c      	str	r3, [sp, #48]	@ 0x30
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	930e      	str	r3, [sp, #56]	@ 0x38
 80060c4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	05c9      	lsls	r1, r1, #23
 80060ca:	d545      	bpl.n	8006158 <_printf_float+0xc0>
 80060cc:	189b      	adds	r3, r3, r2
 80060ce:	4393      	bics	r3, r2
 80060d0:	001a      	movs	r2, r3
 80060d2:	3208      	adds	r2, #8
 80060d4:	6022      	str	r2, [r4, #0]
 80060d6:	2201      	movs	r2, #1
 80060d8:	681e      	ldr	r6, [r3, #0]
 80060da:	685f      	ldr	r7, [r3, #4]
 80060dc:	007b      	lsls	r3, r7, #1
 80060de:	085b      	lsrs	r3, r3, #1
 80060e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80060e2:	9610      	str	r6, [sp, #64]	@ 0x40
 80060e4:	64ae      	str	r6, [r5, #72]	@ 0x48
 80060e6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80060e8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80060ea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80060ec:	4ba7      	ldr	r3, [pc, #668]	@ (800638c <_printf_float+0x2f4>)
 80060ee:	4252      	negs	r2, r2
 80060f0:	f7fc f96c 	bl	80023cc <__aeabi_dcmpun>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d131      	bne.n	800615c <_printf_float+0xc4>
 80060f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80060fa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80060fc:	2201      	movs	r2, #1
 80060fe:	4ba3      	ldr	r3, [pc, #652]	@ (800638c <_printf_float+0x2f4>)
 8006100:	4252      	negs	r2, r2
 8006102:	f7fa f9af 	bl	8000464 <__aeabi_dcmple>
 8006106:	2800      	cmp	r0, #0
 8006108:	d128      	bne.n	800615c <_printf_float+0xc4>
 800610a:	2200      	movs	r2, #0
 800610c:	2300      	movs	r3, #0
 800610e:	0030      	movs	r0, r6
 8006110:	0039      	movs	r1, r7
 8006112:	f7fa f99d 	bl	8000450 <__aeabi_dcmplt>
 8006116:	2800      	cmp	r0, #0
 8006118:	d003      	beq.n	8006122 <_printf_float+0x8a>
 800611a:	002b      	movs	r3, r5
 800611c:	222d      	movs	r2, #45	@ 0x2d
 800611e:	3343      	adds	r3, #67	@ 0x43
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006124:	4f9a      	ldr	r7, [pc, #616]	@ (8006390 <_printf_float+0x2f8>)
 8006126:	2b47      	cmp	r3, #71	@ 0x47
 8006128:	d900      	bls.n	800612c <_printf_float+0x94>
 800612a:	4f9a      	ldr	r7, [pc, #616]	@ (8006394 <_printf_float+0x2fc>)
 800612c:	2303      	movs	r3, #3
 800612e:	2400      	movs	r4, #0
 8006130:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006132:	612b      	str	r3, [r5, #16]
 8006134:	3301      	adds	r3, #1
 8006136:	439a      	bics	r2, r3
 8006138:	602a      	str	r2, [r5, #0]
 800613a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800613c:	0029      	movs	r1, r5
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006142:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006144:	aa15      	add	r2, sp, #84	@ 0x54
 8006146:	f000 f9e5 	bl	8006514 <_printf_common>
 800614a:	3001      	adds	r0, #1
 800614c:	d000      	beq.n	8006150 <_printf_float+0xb8>
 800614e:	e09f      	b.n	8006290 <_printf_float+0x1f8>
 8006150:	2001      	movs	r0, #1
 8006152:	4240      	negs	r0, r0
 8006154:	b017      	add	sp, #92	@ 0x5c
 8006156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006158:	3307      	adds	r3, #7
 800615a:	e7b8      	b.n	80060ce <_printf_float+0x36>
 800615c:	0032      	movs	r2, r6
 800615e:	003b      	movs	r3, r7
 8006160:	0030      	movs	r0, r6
 8006162:	0039      	movs	r1, r7
 8006164:	f7fc f932 	bl	80023cc <__aeabi_dcmpun>
 8006168:	2800      	cmp	r0, #0
 800616a:	d00b      	beq.n	8006184 <_printf_float+0xec>
 800616c:	2f00      	cmp	r7, #0
 800616e:	da03      	bge.n	8006178 <_printf_float+0xe0>
 8006170:	002b      	movs	r3, r5
 8006172:	222d      	movs	r2, #45	@ 0x2d
 8006174:	3343      	adds	r3, #67	@ 0x43
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800617a:	4f87      	ldr	r7, [pc, #540]	@ (8006398 <_printf_float+0x300>)
 800617c:	2b47      	cmp	r3, #71	@ 0x47
 800617e:	d9d5      	bls.n	800612c <_printf_float+0x94>
 8006180:	4f86      	ldr	r7, [pc, #536]	@ (800639c <_printf_float+0x304>)
 8006182:	e7d3      	b.n	800612c <_printf_float+0x94>
 8006184:	2220      	movs	r2, #32
 8006186:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006188:	686b      	ldr	r3, [r5, #4]
 800618a:	4394      	bics	r4, r2
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	d146      	bne.n	800621e <_printf_float+0x186>
 8006190:	3307      	adds	r3, #7
 8006192:	606b      	str	r3, [r5, #4]
 8006194:	2380      	movs	r3, #128	@ 0x80
 8006196:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	4313      	orrs	r3, r2
 800619c:	2200      	movs	r2, #0
 800619e:	602b      	str	r3, [r5, #0]
 80061a0:	9206      	str	r2, [sp, #24]
 80061a2:	aa14      	add	r2, sp, #80	@ 0x50
 80061a4:	9205      	str	r2, [sp, #20]
 80061a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80061a8:	a90a      	add	r1, sp, #40	@ 0x28
 80061aa:	9204      	str	r2, [sp, #16]
 80061ac:	aa13      	add	r2, sp, #76	@ 0x4c
 80061ae:	9203      	str	r2, [sp, #12]
 80061b0:	2223      	movs	r2, #35	@ 0x23
 80061b2:	1852      	adds	r2, r2, r1
 80061b4:	9202      	str	r2, [sp, #8]
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	686b      	ldr	r3, [r5, #4]
 80061ba:	0032      	movs	r2, r6
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061c0:	003b      	movs	r3, r7
 80061c2:	f7ff fec3 	bl	8005f4c <__cvt>
 80061c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80061c8:	0007      	movs	r7, r0
 80061ca:	2c47      	cmp	r4, #71	@ 0x47
 80061cc:	d12d      	bne.n	800622a <_printf_float+0x192>
 80061ce:	1cd3      	adds	r3, r2, #3
 80061d0:	db02      	blt.n	80061d8 <_printf_float+0x140>
 80061d2:	686b      	ldr	r3, [r5, #4]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	dd48      	ble.n	800626a <_printf_float+0x1d2>
 80061d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061da:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80061dc:	3b02      	subs	r3, #2
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80061e2:	0028      	movs	r0, r5
 80061e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80061e6:	3901      	subs	r1, #1
 80061e8:	3050      	adds	r0, #80	@ 0x50
 80061ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 80061ec:	f7ff ff14 	bl	8006018 <__exponent>
 80061f0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80061f2:	0004      	movs	r4, r0
 80061f4:	1813      	adds	r3, r2, r0
 80061f6:	612b      	str	r3, [r5, #16]
 80061f8:	2a01      	cmp	r2, #1
 80061fa:	dc02      	bgt.n	8006202 <_printf_float+0x16a>
 80061fc:	682a      	ldr	r2, [r5, #0]
 80061fe:	07d2      	lsls	r2, r2, #31
 8006200:	d501      	bpl.n	8006206 <_printf_float+0x16e>
 8006202:	3301      	adds	r3, #1
 8006204:	612b      	str	r3, [r5, #16]
 8006206:	2323      	movs	r3, #35	@ 0x23
 8006208:	aa0a      	add	r2, sp, #40	@ 0x28
 800620a:	189b      	adds	r3, r3, r2
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d100      	bne.n	8006214 <_printf_float+0x17c>
 8006212:	e792      	b.n	800613a <_printf_float+0xa2>
 8006214:	002b      	movs	r3, r5
 8006216:	222d      	movs	r2, #45	@ 0x2d
 8006218:	3343      	adds	r3, #67	@ 0x43
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	e78d      	b.n	800613a <_printf_float+0xa2>
 800621e:	2c47      	cmp	r4, #71	@ 0x47
 8006220:	d1b8      	bne.n	8006194 <_printf_float+0xfc>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1b6      	bne.n	8006194 <_printf_float+0xfc>
 8006226:	3301      	adds	r3, #1
 8006228:	e7b3      	b.n	8006192 <_printf_float+0xfa>
 800622a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800622c:	0011      	movs	r1, r2
 800622e:	2b65      	cmp	r3, #101	@ 0x65
 8006230:	d9d7      	bls.n	80061e2 <_printf_float+0x14a>
 8006232:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006234:	2b66      	cmp	r3, #102	@ 0x66
 8006236:	d11a      	bne.n	800626e <_printf_float+0x1d6>
 8006238:	686b      	ldr	r3, [r5, #4]
 800623a:	2a00      	cmp	r2, #0
 800623c:	dd09      	ble.n	8006252 <_printf_float+0x1ba>
 800623e:	612a      	str	r2, [r5, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d102      	bne.n	800624a <_printf_float+0x1b2>
 8006244:	6829      	ldr	r1, [r5, #0]
 8006246:	07c9      	lsls	r1, r1, #31
 8006248:	d50b      	bpl.n	8006262 <_printf_float+0x1ca>
 800624a:	3301      	adds	r3, #1
 800624c:	189b      	adds	r3, r3, r2
 800624e:	612b      	str	r3, [r5, #16]
 8006250:	e007      	b.n	8006262 <_printf_float+0x1ca>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d103      	bne.n	800625e <_printf_float+0x1c6>
 8006256:	2201      	movs	r2, #1
 8006258:	6829      	ldr	r1, [r5, #0]
 800625a:	4211      	tst	r1, r2
 800625c:	d000      	beq.n	8006260 <_printf_float+0x1c8>
 800625e:	1c9a      	adds	r2, r3, #2
 8006260:	612a      	str	r2, [r5, #16]
 8006262:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006264:	2400      	movs	r4, #0
 8006266:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006268:	e7cd      	b.n	8006206 <_printf_float+0x16e>
 800626a:	2367      	movs	r3, #103	@ 0x67
 800626c:	930c      	str	r3, [sp, #48]	@ 0x30
 800626e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006270:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006272:	4299      	cmp	r1, r3
 8006274:	db06      	blt.n	8006284 <_printf_float+0x1ec>
 8006276:	682b      	ldr	r3, [r5, #0]
 8006278:	6129      	str	r1, [r5, #16]
 800627a:	07db      	lsls	r3, r3, #31
 800627c:	d5f1      	bpl.n	8006262 <_printf_float+0x1ca>
 800627e:	3101      	adds	r1, #1
 8006280:	6129      	str	r1, [r5, #16]
 8006282:	e7ee      	b.n	8006262 <_printf_float+0x1ca>
 8006284:	2201      	movs	r2, #1
 8006286:	2900      	cmp	r1, #0
 8006288:	dce0      	bgt.n	800624c <_printf_float+0x1b4>
 800628a:	1892      	adds	r2, r2, r2
 800628c:	1a52      	subs	r2, r2, r1
 800628e:	e7dd      	b.n	800624c <_printf_float+0x1b4>
 8006290:	682a      	ldr	r2, [r5, #0]
 8006292:	0553      	lsls	r3, r2, #21
 8006294:	d408      	bmi.n	80062a8 <_printf_float+0x210>
 8006296:	692b      	ldr	r3, [r5, #16]
 8006298:	003a      	movs	r2, r7
 800629a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800629c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800629e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80062a0:	47a0      	blx	r4
 80062a2:	3001      	adds	r0, #1
 80062a4:	d129      	bne.n	80062fa <_printf_float+0x262>
 80062a6:	e753      	b.n	8006150 <_printf_float+0xb8>
 80062a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062aa:	2b65      	cmp	r3, #101	@ 0x65
 80062ac:	d800      	bhi.n	80062b0 <_printf_float+0x218>
 80062ae:	e0da      	b.n	8006466 <_printf_float+0x3ce>
 80062b0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80062b2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80062b4:	2200      	movs	r2, #0
 80062b6:	2300      	movs	r3, #0
 80062b8:	f7fa f8c4 	bl	8000444 <__aeabi_dcmpeq>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d033      	beq.n	8006328 <_printf_float+0x290>
 80062c0:	2301      	movs	r3, #1
 80062c2:	4a37      	ldr	r2, [pc, #220]	@ (80063a0 <_printf_float+0x308>)
 80062c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062c8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80062ca:	47a0      	blx	r4
 80062cc:	3001      	adds	r0, #1
 80062ce:	d100      	bne.n	80062d2 <_printf_float+0x23a>
 80062d0:	e73e      	b.n	8006150 <_printf_float+0xb8>
 80062d2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80062d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062d6:	42b3      	cmp	r3, r6
 80062d8:	db02      	blt.n	80062e0 <_printf_float+0x248>
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	07db      	lsls	r3, r3, #31
 80062de:	d50c      	bpl.n	80062fa <_printf_float+0x262>
 80062e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80062e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80062e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062ea:	47a0      	blx	r4
 80062ec:	2400      	movs	r4, #0
 80062ee:	3001      	adds	r0, #1
 80062f0:	d100      	bne.n	80062f4 <_printf_float+0x25c>
 80062f2:	e72d      	b.n	8006150 <_printf_float+0xb8>
 80062f4:	1e73      	subs	r3, r6, #1
 80062f6:	42a3      	cmp	r3, r4
 80062f8:	dc0a      	bgt.n	8006310 <_printf_float+0x278>
 80062fa:	682b      	ldr	r3, [r5, #0]
 80062fc:	079b      	lsls	r3, r3, #30
 80062fe:	d500      	bpl.n	8006302 <_printf_float+0x26a>
 8006300:	e105      	b.n	800650e <_printf_float+0x476>
 8006302:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006304:	68e8      	ldr	r0, [r5, #12]
 8006306:	4298      	cmp	r0, r3
 8006308:	db00      	blt.n	800630c <_printf_float+0x274>
 800630a:	e723      	b.n	8006154 <_printf_float+0xbc>
 800630c:	0018      	movs	r0, r3
 800630e:	e721      	b.n	8006154 <_printf_float+0xbc>
 8006310:	002a      	movs	r2, r5
 8006312:	2301      	movs	r3, #1
 8006314:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006318:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800631a:	321a      	adds	r2, #26
 800631c:	47b8      	blx	r7
 800631e:	3001      	adds	r0, #1
 8006320:	d100      	bne.n	8006324 <_printf_float+0x28c>
 8006322:	e715      	b.n	8006150 <_printf_float+0xb8>
 8006324:	3401      	adds	r4, #1
 8006326:	e7e5      	b.n	80062f4 <_printf_float+0x25c>
 8006328:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800632a:	2b00      	cmp	r3, #0
 800632c:	dc3a      	bgt.n	80063a4 <_printf_float+0x30c>
 800632e:	2301      	movs	r3, #1
 8006330:	4a1b      	ldr	r2, [pc, #108]	@ (80063a0 <_printf_float+0x308>)
 8006332:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006334:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006336:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006338:	47a0      	blx	r4
 800633a:	3001      	adds	r0, #1
 800633c:	d100      	bne.n	8006340 <_printf_float+0x2a8>
 800633e:	e707      	b.n	8006150 <_printf_float+0xb8>
 8006340:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006342:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006344:	4333      	orrs	r3, r6
 8006346:	d102      	bne.n	800634e <_printf_float+0x2b6>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	07db      	lsls	r3, r3, #31
 800634c:	d5d5      	bpl.n	80062fa <_printf_float+0x262>
 800634e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006350:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006352:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006354:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006356:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006358:	47a0      	blx	r4
 800635a:	2300      	movs	r3, #0
 800635c:	3001      	adds	r0, #1
 800635e:	d100      	bne.n	8006362 <_printf_float+0x2ca>
 8006360:	e6f6      	b.n	8006150 <_printf_float+0xb8>
 8006362:	930c      	str	r3, [sp, #48]	@ 0x30
 8006364:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006366:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006368:	425b      	negs	r3, r3
 800636a:	4293      	cmp	r3, r2
 800636c:	dc01      	bgt.n	8006372 <_printf_float+0x2da>
 800636e:	0033      	movs	r3, r6
 8006370:	e792      	b.n	8006298 <_printf_float+0x200>
 8006372:	002a      	movs	r2, r5
 8006374:	2301      	movs	r3, #1
 8006376:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006378:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800637a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800637c:	321a      	adds	r2, #26
 800637e:	47a0      	blx	r4
 8006380:	3001      	adds	r0, #1
 8006382:	d100      	bne.n	8006386 <_printf_float+0x2ee>
 8006384:	e6e4      	b.n	8006150 <_printf_float+0xb8>
 8006386:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006388:	3301      	adds	r3, #1
 800638a:	e7ea      	b.n	8006362 <_printf_float+0x2ca>
 800638c:	7fefffff 	.word	0x7fefffff
 8006390:	08008e68 	.word	0x08008e68
 8006394:	08008e6c 	.word	0x08008e6c
 8006398:	08008e70 	.word	0x08008e70
 800639c:	08008e74 	.word	0x08008e74
 80063a0:	08008e78 	.word	0x08008e78
 80063a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80063a6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80063a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80063aa:	429e      	cmp	r6, r3
 80063ac:	dd00      	ble.n	80063b0 <_printf_float+0x318>
 80063ae:	001e      	movs	r6, r3
 80063b0:	2e00      	cmp	r6, #0
 80063b2:	dc31      	bgt.n	8006418 <_printf_float+0x380>
 80063b4:	43f3      	mvns	r3, r6
 80063b6:	2400      	movs	r4, #0
 80063b8:	17db      	asrs	r3, r3, #31
 80063ba:	4033      	ands	r3, r6
 80063bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80063be:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80063c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063c2:	1af3      	subs	r3, r6, r3
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	dc30      	bgt.n	800642a <_printf_float+0x392>
 80063c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063ca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80063cc:	429a      	cmp	r2, r3
 80063ce:	dc38      	bgt.n	8006442 <_printf_float+0x3aa>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	07db      	lsls	r3, r3, #31
 80063d4:	d435      	bmi.n	8006442 <_printf_float+0x3aa>
 80063d6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80063d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80063dc:	1b9b      	subs	r3, r3, r6
 80063de:	1b14      	subs	r4, r2, r4
 80063e0:	429c      	cmp	r4, r3
 80063e2:	dd00      	ble.n	80063e6 <_printf_float+0x34e>
 80063e4:	001c      	movs	r4, r3
 80063e6:	2c00      	cmp	r4, #0
 80063e8:	dc34      	bgt.n	8006454 <_printf_float+0x3bc>
 80063ea:	43e3      	mvns	r3, r4
 80063ec:	2600      	movs	r6, #0
 80063ee:	17db      	asrs	r3, r3, #31
 80063f0:	401c      	ands	r4, r3
 80063f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	1b1b      	subs	r3, r3, r4
 80063fa:	42b3      	cmp	r3, r6
 80063fc:	dc00      	bgt.n	8006400 <_printf_float+0x368>
 80063fe:	e77c      	b.n	80062fa <_printf_float+0x262>
 8006400:	002a      	movs	r2, r5
 8006402:	2301      	movs	r3, #1
 8006404:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006408:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800640a:	321a      	adds	r2, #26
 800640c:	47b8      	blx	r7
 800640e:	3001      	adds	r0, #1
 8006410:	d100      	bne.n	8006414 <_printf_float+0x37c>
 8006412:	e69d      	b.n	8006150 <_printf_float+0xb8>
 8006414:	3601      	adds	r6, #1
 8006416:	e7ec      	b.n	80063f2 <_printf_float+0x35a>
 8006418:	0033      	movs	r3, r6
 800641a:	003a      	movs	r2, r7
 800641c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800641e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006420:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006422:	47a0      	blx	r4
 8006424:	3001      	adds	r0, #1
 8006426:	d1c5      	bne.n	80063b4 <_printf_float+0x31c>
 8006428:	e692      	b.n	8006150 <_printf_float+0xb8>
 800642a:	002a      	movs	r2, r5
 800642c:	2301      	movs	r3, #1
 800642e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006430:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006432:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006434:	321a      	adds	r2, #26
 8006436:	47b0      	blx	r6
 8006438:	3001      	adds	r0, #1
 800643a:	d100      	bne.n	800643e <_printf_float+0x3a6>
 800643c:	e688      	b.n	8006150 <_printf_float+0xb8>
 800643e:	3401      	adds	r4, #1
 8006440:	e7bd      	b.n	80063be <_printf_float+0x326>
 8006442:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006444:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006446:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006448:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800644a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800644c:	47a0      	blx	r4
 800644e:	3001      	adds	r0, #1
 8006450:	d1c1      	bne.n	80063d6 <_printf_float+0x33e>
 8006452:	e67d      	b.n	8006150 <_printf_float+0xb8>
 8006454:	19ba      	adds	r2, r7, r6
 8006456:	0023      	movs	r3, r4
 8006458:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800645a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800645c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800645e:	47b0      	blx	r6
 8006460:	3001      	adds	r0, #1
 8006462:	d1c2      	bne.n	80063ea <_printf_float+0x352>
 8006464:	e674      	b.n	8006150 <_printf_float+0xb8>
 8006466:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006468:	930c      	str	r3, [sp, #48]	@ 0x30
 800646a:	2b01      	cmp	r3, #1
 800646c:	dc02      	bgt.n	8006474 <_printf_float+0x3dc>
 800646e:	2301      	movs	r3, #1
 8006470:	421a      	tst	r2, r3
 8006472:	d039      	beq.n	80064e8 <_printf_float+0x450>
 8006474:	2301      	movs	r3, #1
 8006476:	003a      	movs	r2, r7
 8006478:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800647a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800647c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800647e:	47b0      	blx	r6
 8006480:	3001      	adds	r0, #1
 8006482:	d100      	bne.n	8006486 <_printf_float+0x3ee>
 8006484:	e664      	b.n	8006150 <_printf_float+0xb8>
 8006486:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006488:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800648a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800648c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800648e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006490:	47b0      	blx	r6
 8006492:	3001      	adds	r0, #1
 8006494:	d100      	bne.n	8006498 <_printf_float+0x400>
 8006496:	e65b      	b.n	8006150 <_printf_float+0xb8>
 8006498:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800649a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800649c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800649e:	2200      	movs	r2, #0
 80064a0:	3b01      	subs	r3, #1
 80064a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80064a4:	2300      	movs	r3, #0
 80064a6:	f7f9 ffcd 	bl	8000444 <__aeabi_dcmpeq>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d11a      	bne.n	80064e4 <_printf_float+0x44c>
 80064ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80064b0:	1c7a      	adds	r2, r7, #1
 80064b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064b6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80064b8:	47b0      	blx	r6
 80064ba:	3001      	adds	r0, #1
 80064bc:	d10e      	bne.n	80064dc <_printf_float+0x444>
 80064be:	e647      	b.n	8006150 <_printf_float+0xb8>
 80064c0:	002a      	movs	r2, r5
 80064c2:	2301      	movs	r3, #1
 80064c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064c8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80064ca:	321a      	adds	r2, #26
 80064cc:	47b8      	blx	r7
 80064ce:	3001      	adds	r0, #1
 80064d0:	d100      	bne.n	80064d4 <_printf_float+0x43c>
 80064d2:	e63d      	b.n	8006150 <_printf_float+0xb8>
 80064d4:	3601      	adds	r6, #1
 80064d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80064d8:	429e      	cmp	r6, r3
 80064da:	dbf1      	blt.n	80064c0 <_printf_float+0x428>
 80064dc:	002a      	movs	r2, r5
 80064de:	0023      	movs	r3, r4
 80064e0:	3250      	adds	r2, #80	@ 0x50
 80064e2:	e6da      	b.n	800629a <_printf_float+0x202>
 80064e4:	2600      	movs	r6, #0
 80064e6:	e7f6      	b.n	80064d6 <_printf_float+0x43e>
 80064e8:	003a      	movs	r2, r7
 80064ea:	e7e2      	b.n	80064b2 <_printf_float+0x41a>
 80064ec:	002a      	movs	r2, r5
 80064ee:	2301      	movs	r3, #1
 80064f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80064f6:	3219      	adds	r2, #25
 80064f8:	47b0      	blx	r6
 80064fa:	3001      	adds	r0, #1
 80064fc:	d100      	bne.n	8006500 <_printf_float+0x468>
 80064fe:	e627      	b.n	8006150 <_printf_float+0xb8>
 8006500:	3401      	adds	r4, #1
 8006502:	68eb      	ldr	r3, [r5, #12]
 8006504:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006506:	1a9b      	subs	r3, r3, r2
 8006508:	42a3      	cmp	r3, r4
 800650a:	dcef      	bgt.n	80064ec <_printf_float+0x454>
 800650c:	e6f9      	b.n	8006302 <_printf_float+0x26a>
 800650e:	2400      	movs	r4, #0
 8006510:	e7f7      	b.n	8006502 <_printf_float+0x46a>
 8006512:	46c0      	nop			@ (mov r8, r8)

08006514 <_printf_common>:
 8006514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006516:	0016      	movs	r6, r2
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	688a      	ldr	r2, [r1, #8]
 800651c:	690b      	ldr	r3, [r1, #16]
 800651e:	000c      	movs	r4, r1
 8006520:	9000      	str	r0, [sp, #0]
 8006522:	4293      	cmp	r3, r2
 8006524:	da00      	bge.n	8006528 <_printf_common+0x14>
 8006526:	0013      	movs	r3, r2
 8006528:	0022      	movs	r2, r4
 800652a:	6033      	str	r3, [r6, #0]
 800652c:	3243      	adds	r2, #67	@ 0x43
 800652e:	7812      	ldrb	r2, [r2, #0]
 8006530:	2a00      	cmp	r2, #0
 8006532:	d001      	beq.n	8006538 <_printf_common+0x24>
 8006534:	3301      	adds	r3, #1
 8006536:	6033      	str	r3, [r6, #0]
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	069b      	lsls	r3, r3, #26
 800653c:	d502      	bpl.n	8006544 <_printf_common+0x30>
 800653e:	6833      	ldr	r3, [r6, #0]
 8006540:	3302      	adds	r3, #2
 8006542:	6033      	str	r3, [r6, #0]
 8006544:	6822      	ldr	r2, [r4, #0]
 8006546:	2306      	movs	r3, #6
 8006548:	0015      	movs	r5, r2
 800654a:	401d      	ands	r5, r3
 800654c:	421a      	tst	r2, r3
 800654e:	d027      	beq.n	80065a0 <_printf_common+0x8c>
 8006550:	0023      	movs	r3, r4
 8006552:	3343      	adds	r3, #67	@ 0x43
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	1e5a      	subs	r2, r3, #1
 8006558:	4193      	sbcs	r3, r2
 800655a:	6822      	ldr	r2, [r4, #0]
 800655c:	0692      	lsls	r2, r2, #26
 800655e:	d430      	bmi.n	80065c2 <_printf_common+0xae>
 8006560:	0022      	movs	r2, r4
 8006562:	9901      	ldr	r1, [sp, #4]
 8006564:	9800      	ldr	r0, [sp, #0]
 8006566:	9d08      	ldr	r5, [sp, #32]
 8006568:	3243      	adds	r2, #67	@ 0x43
 800656a:	47a8      	blx	r5
 800656c:	3001      	adds	r0, #1
 800656e:	d025      	beq.n	80065bc <_printf_common+0xa8>
 8006570:	2206      	movs	r2, #6
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	2500      	movs	r5, #0
 8006576:	4013      	ands	r3, r2
 8006578:	2b04      	cmp	r3, #4
 800657a:	d105      	bne.n	8006588 <_printf_common+0x74>
 800657c:	6833      	ldr	r3, [r6, #0]
 800657e:	68e5      	ldr	r5, [r4, #12]
 8006580:	1aed      	subs	r5, r5, r3
 8006582:	43eb      	mvns	r3, r5
 8006584:	17db      	asrs	r3, r3, #31
 8006586:	401d      	ands	r5, r3
 8006588:	68a3      	ldr	r3, [r4, #8]
 800658a:	6922      	ldr	r2, [r4, #16]
 800658c:	4293      	cmp	r3, r2
 800658e:	dd01      	ble.n	8006594 <_printf_common+0x80>
 8006590:	1a9b      	subs	r3, r3, r2
 8006592:	18ed      	adds	r5, r5, r3
 8006594:	2600      	movs	r6, #0
 8006596:	42b5      	cmp	r5, r6
 8006598:	d120      	bne.n	80065dc <_printf_common+0xc8>
 800659a:	2000      	movs	r0, #0
 800659c:	e010      	b.n	80065c0 <_printf_common+0xac>
 800659e:	3501      	adds	r5, #1
 80065a0:	68e3      	ldr	r3, [r4, #12]
 80065a2:	6832      	ldr	r2, [r6, #0]
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	42ab      	cmp	r3, r5
 80065a8:	ddd2      	ble.n	8006550 <_printf_common+0x3c>
 80065aa:	0022      	movs	r2, r4
 80065ac:	2301      	movs	r3, #1
 80065ae:	9901      	ldr	r1, [sp, #4]
 80065b0:	9800      	ldr	r0, [sp, #0]
 80065b2:	9f08      	ldr	r7, [sp, #32]
 80065b4:	3219      	adds	r2, #25
 80065b6:	47b8      	blx	r7
 80065b8:	3001      	adds	r0, #1
 80065ba:	d1f0      	bne.n	800659e <_printf_common+0x8a>
 80065bc:	2001      	movs	r0, #1
 80065be:	4240      	negs	r0, r0
 80065c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065c2:	2030      	movs	r0, #48	@ 0x30
 80065c4:	18e1      	adds	r1, r4, r3
 80065c6:	3143      	adds	r1, #67	@ 0x43
 80065c8:	7008      	strb	r0, [r1, #0]
 80065ca:	0021      	movs	r1, r4
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	3145      	adds	r1, #69	@ 0x45
 80065d0:	7809      	ldrb	r1, [r1, #0]
 80065d2:	18a2      	adds	r2, r4, r2
 80065d4:	3243      	adds	r2, #67	@ 0x43
 80065d6:	3302      	adds	r3, #2
 80065d8:	7011      	strb	r1, [r2, #0]
 80065da:	e7c1      	b.n	8006560 <_printf_common+0x4c>
 80065dc:	0022      	movs	r2, r4
 80065de:	2301      	movs	r3, #1
 80065e0:	9901      	ldr	r1, [sp, #4]
 80065e2:	9800      	ldr	r0, [sp, #0]
 80065e4:	9f08      	ldr	r7, [sp, #32]
 80065e6:	321a      	adds	r2, #26
 80065e8:	47b8      	blx	r7
 80065ea:	3001      	adds	r0, #1
 80065ec:	d0e6      	beq.n	80065bc <_printf_common+0xa8>
 80065ee:	3601      	adds	r6, #1
 80065f0:	e7d1      	b.n	8006596 <_printf_common+0x82>
	...

080065f4 <_printf_i>:
 80065f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065f6:	b08b      	sub	sp, #44	@ 0x2c
 80065f8:	9206      	str	r2, [sp, #24]
 80065fa:	000a      	movs	r2, r1
 80065fc:	3243      	adds	r2, #67	@ 0x43
 80065fe:	9307      	str	r3, [sp, #28]
 8006600:	9005      	str	r0, [sp, #20]
 8006602:	9203      	str	r2, [sp, #12]
 8006604:	7e0a      	ldrb	r2, [r1, #24]
 8006606:	000c      	movs	r4, r1
 8006608:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800660a:	2a78      	cmp	r2, #120	@ 0x78
 800660c:	d809      	bhi.n	8006622 <_printf_i+0x2e>
 800660e:	2a62      	cmp	r2, #98	@ 0x62
 8006610:	d80b      	bhi.n	800662a <_printf_i+0x36>
 8006612:	2a00      	cmp	r2, #0
 8006614:	d100      	bne.n	8006618 <_printf_i+0x24>
 8006616:	e0bc      	b.n	8006792 <_printf_i+0x19e>
 8006618:	497b      	ldr	r1, [pc, #492]	@ (8006808 <_printf_i+0x214>)
 800661a:	9104      	str	r1, [sp, #16]
 800661c:	2a58      	cmp	r2, #88	@ 0x58
 800661e:	d100      	bne.n	8006622 <_printf_i+0x2e>
 8006620:	e090      	b.n	8006744 <_printf_i+0x150>
 8006622:	0025      	movs	r5, r4
 8006624:	3542      	adds	r5, #66	@ 0x42
 8006626:	702a      	strb	r2, [r5, #0]
 8006628:	e022      	b.n	8006670 <_printf_i+0x7c>
 800662a:	0010      	movs	r0, r2
 800662c:	3863      	subs	r0, #99	@ 0x63
 800662e:	2815      	cmp	r0, #21
 8006630:	d8f7      	bhi.n	8006622 <_printf_i+0x2e>
 8006632:	f7f9 fd77 	bl	8000124 <__gnu_thumb1_case_shi>
 8006636:	0016      	.short	0x0016
 8006638:	fff6001f 	.word	0xfff6001f
 800663c:	fff6fff6 	.word	0xfff6fff6
 8006640:	001ffff6 	.word	0x001ffff6
 8006644:	fff6fff6 	.word	0xfff6fff6
 8006648:	fff6fff6 	.word	0xfff6fff6
 800664c:	003600a1 	.word	0x003600a1
 8006650:	fff60080 	.word	0xfff60080
 8006654:	00b2fff6 	.word	0x00b2fff6
 8006658:	0036fff6 	.word	0x0036fff6
 800665c:	fff6fff6 	.word	0xfff6fff6
 8006660:	0084      	.short	0x0084
 8006662:	0025      	movs	r5, r4
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	3542      	adds	r5, #66	@ 0x42
 8006668:	1d11      	adds	r1, r2, #4
 800666a:	6019      	str	r1, [r3, #0]
 800666c:	6813      	ldr	r3, [r2, #0]
 800666e:	702b      	strb	r3, [r5, #0]
 8006670:	2301      	movs	r3, #1
 8006672:	e0a0      	b.n	80067b6 <_printf_i+0x1c2>
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	6809      	ldr	r1, [r1, #0]
 8006678:	1d02      	adds	r2, r0, #4
 800667a:	060d      	lsls	r5, r1, #24
 800667c:	d50b      	bpl.n	8006696 <_printf_i+0xa2>
 800667e:	6806      	ldr	r6, [r0, #0]
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	2e00      	cmp	r6, #0
 8006684:	da03      	bge.n	800668e <_printf_i+0x9a>
 8006686:	232d      	movs	r3, #45	@ 0x2d
 8006688:	9a03      	ldr	r2, [sp, #12]
 800668a:	4276      	negs	r6, r6
 800668c:	7013      	strb	r3, [r2, #0]
 800668e:	4b5e      	ldr	r3, [pc, #376]	@ (8006808 <_printf_i+0x214>)
 8006690:	270a      	movs	r7, #10
 8006692:	9304      	str	r3, [sp, #16]
 8006694:	e018      	b.n	80066c8 <_printf_i+0xd4>
 8006696:	6806      	ldr	r6, [r0, #0]
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	0649      	lsls	r1, r1, #25
 800669c:	d5f1      	bpl.n	8006682 <_printf_i+0x8e>
 800669e:	b236      	sxth	r6, r6
 80066a0:	e7ef      	b.n	8006682 <_printf_i+0x8e>
 80066a2:	6808      	ldr	r0, [r1, #0]
 80066a4:	6819      	ldr	r1, [r3, #0]
 80066a6:	c940      	ldmia	r1!, {r6}
 80066a8:	0605      	lsls	r5, r0, #24
 80066aa:	d402      	bmi.n	80066b2 <_printf_i+0xbe>
 80066ac:	0640      	lsls	r0, r0, #25
 80066ae:	d500      	bpl.n	80066b2 <_printf_i+0xbe>
 80066b0:	b2b6      	uxth	r6, r6
 80066b2:	6019      	str	r1, [r3, #0]
 80066b4:	4b54      	ldr	r3, [pc, #336]	@ (8006808 <_printf_i+0x214>)
 80066b6:	270a      	movs	r7, #10
 80066b8:	9304      	str	r3, [sp, #16]
 80066ba:	2a6f      	cmp	r2, #111	@ 0x6f
 80066bc:	d100      	bne.n	80066c0 <_printf_i+0xcc>
 80066be:	3f02      	subs	r7, #2
 80066c0:	0023      	movs	r3, r4
 80066c2:	2200      	movs	r2, #0
 80066c4:	3343      	adds	r3, #67	@ 0x43
 80066c6:	701a      	strb	r2, [r3, #0]
 80066c8:	6863      	ldr	r3, [r4, #4]
 80066ca:	60a3      	str	r3, [r4, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	db03      	blt.n	80066d8 <_printf_i+0xe4>
 80066d0:	2104      	movs	r1, #4
 80066d2:	6822      	ldr	r2, [r4, #0]
 80066d4:	438a      	bics	r2, r1
 80066d6:	6022      	str	r2, [r4, #0]
 80066d8:	2e00      	cmp	r6, #0
 80066da:	d102      	bne.n	80066e2 <_printf_i+0xee>
 80066dc:	9d03      	ldr	r5, [sp, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00c      	beq.n	80066fc <_printf_i+0x108>
 80066e2:	9d03      	ldr	r5, [sp, #12]
 80066e4:	0030      	movs	r0, r6
 80066e6:	0039      	movs	r1, r7
 80066e8:	f7f9 fdac 	bl	8000244 <__aeabi_uidivmod>
 80066ec:	9b04      	ldr	r3, [sp, #16]
 80066ee:	3d01      	subs	r5, #1
 80066f0:	5c5b      	ldrb	r3, [r3, r1]
 80066f2:	702b      	strb	r3, [r5, #0]
 80066f4:	0033      	movs	r3, r6
 80066f6:	0006      	movs	r6, r0
 80066f8:	429f      	cmp	r7, r3
 80066fa:	d9f3      	bls.n	80066e4 <_printf_i+0xf0>
 80066fc:	2f08      	cmp	r7, #8
 80066fe:	d109      	bne.n	8006714 <_printf_i+0x120>
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	07db      	lsls	r3, r3, #31
 8006704:	d506      	bpl.n	8006714 <_printf_i+0x120>
 8006706:	6862      	ldr	r2, [r4, #4]
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	429a      	cmp	r2, r3
 800670c:	dc02      	bgt.n	8006714 <_printf_i+0x120>
 800670e:	2330      	movs	r3, #48	@ 0x30
 8006710:	3d01      	subs	r5, #1
 8006712:	702b      	strb	r3, [r5, #0]
 8006714:	9b03      	ldr	r3, [sp, #12]
 8006716:	1b5b      	subs	r3, r3, r5
 8006718:	6123      	str	r3, [r4, #16]
 800671a:	9b07      	ldr	r3, [sp, #28]
 800671c:	0021      	movs	r1, r4
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	9805      	ldr	r0, [sp, #20]
 8006722:	9b06      	ldr	r3, [sp, #24]
 8006724:	aa09      	add	r2, sp, #36	@ 0x24
 8006726:	f7ff fef5 	bl	8006514 <_printf_common>
 800672a:	3001      	adds	r0, #1
 800672c:	d148      	bne.n	80067c0 <_printf_i+0x1cc>
 800672e:	2001      	movs	r0, #1
 8006730:	4240      	negs	r0, r0
 8006732:	b00b      	add	sp, #44	@ 0x2c
 8006734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006736:	2220      	movs	r2, #32
 8006738:	6809      	ldr	r1, [r1, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	6022      	str	r2, [r4, #0]
 800673e:	2278      	movs	r2, #120	@ 0x78
 8006740:	4932      	ldr	r1, [pc, #200]	@ (800680c <_printf_i+0x218>)
 8006742:	9104      	str	r1, [sp, #16]
 8006744:	0021      	movs	r1, r4
 8006746:	3145      	adds	r1, #69	@ 0x45
 8006748:	700a      	strb	r2, [r1, #0]
 800674a:	6819      	ldr	r1, [r3, #0]
 800674c:	6822      	ldr	r2, [r4, #0]
 800674e:	c940      	ldmia	r1!, {r6}
 8006750:	0610      	lsls	r0, r2, #24
 8006752:	d402      	bmi.n	800675a <_printf_i+0x166>
 8006754:	0650      	lsls	r0, r2, #25
 8006756:	d500      	bpl.n	800675a <_printf_i+0x166>
 8006758:	b2b6      	uxth	r6, r6
 800675a:	6019      	str	r1, [r3, #0]
 800675c:	07d3      	lsls	r3, r2, #31
 800675e:	d502      	bpl.n	8006766 <_printf_i+0x172>
 8006760:	2320      	movs	r3, #32
 8006762:	4313      	orrs	r3, r2
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	2e00      	cmp	r6, #0
 8006768:	d001      	beq.n	800676e <_printf_i+0x17a>
 800676a:	2710      	movs	r7, #16
 800676c:	e7a8      	b.n	80066c0 <_printf_i+0xcc>
 800676e:	2220      	movs	r2, #32
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	4393      	bics	r3, r2
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	e7f8      	b.n	800676a <_printf_i+0x176>
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	680d      	ldr	r5, [r1, #0]
 800677c:	1d10      	adds	r0, r2, #4
 800677e:	6949      	ldr	r1, [r1, #20]
 8006780:	6018      	str	r0, [r3, #0]
 8006782:	6813      	ldr	r3, [r2, #0]
 8006784:	062e      	lsls	r6, r5, #24
 8006786:	d501      	bpl.n	800678c <_printf_i+0x198>
 8006788:	6019      	str	r1, [r3, #0]
 800678a:	e002      	b.n	8006792 <_printf_i+0x19e>
 800678c:	066d      	lsls	r5, r5, #25
 800678e:	d5fb      	bpl.n	8006788 <_printf_i+0x194>
 8006790:	8019      	strh	r1, [r3, #0]
 8006792:	2300      	movs	r3, #0
 8006794:	9d03      	ldr	r5, [sp, #12]
 8006796:	6123      	str	r3, [r4, #16]
 8006798:	e7bf      	b.n	800671a <_printf_i+0x126>
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	1d11      	adds	r1, r2, #4
 800679e:	6019      	str	r1, [r3, #0]
 80067a0:	6815      	ldr	r5, [r2, #0]
 80067a2:	2100      	movs	r1, #0
 80067a4:	0028      	movs	r0, r5
 80067a6:	6862      	ldr	r2, [r4, #4]
 80067a8:	f000 f9e9 	bl	8006b7e <memchr>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d001      	beq.n	80067b4 <_printf_i+0x1c0>
 80067b0:	1b40      	subs	r0, r0, r5
 80067b2:	6060      	str	r0, [r4, #4]
 80067b4:	6863      	ldr	r3, [r4, #4]
 80067b6:	6123      	str	r3, [r4, #16]
 80067b8:	2300      	movs	r3, #0
 80067ba:	9a03      	ldr	r2, [sp, #12]
 80067bc:	7013      	strb	r3, [r2, #0]
 80067be:	e7ac      	b.n	800671a <_printf_i+0x126>
 80067c0:	002a      	movs	r2, r5
 80067c2:	6923      	ldr	r3, [r4, #16]
 80067c4:	9906      	ldr	r1, [sp, #24]
 80067c6:	9805      	ldr	r0, [sp, #20]
 80067c8:	9d07      	ldr	r5, [sp, #28]
 80067ca:	47a8      	blx	r5
 80067cc:	3001      	adds	r0, #1
 80067ce:	d0ae      	beq.n	800672e <_printf_i+0x13a>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	079b      	lsls	r3, r3, #30
 80067d4:	d415      	bmi.n	8006802 <_printf_i+0x20e>
 80067d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d8:	68e0      	ldr	r0, [r4, #12]
 80067da:	4298      	cmp	r0, r3
 80067dc:	daa9      	bge.n	8006732 <_printf_i+0x13e>
 80067de:	0018      	movs	r0, r3
 80067e0:	e7a7      	b.n	8006732 <_printf_i+0x13e>
 80067e2:	0022      	movs	r2, r4
 80067e4:	2301      	movs	r3, #1
 80067e6:	9906      	ldr	r1, [sp, #24]
 80067e8:	9805      	ldr	r0, [sp, #20]
 80067ea:	9e07      	ldr	r6, [sp, #28]
 80067ec:	3219      	adds	r2, #25
 80067ee:	47b0      	blx	r6
 80067f0:	3001      	adds	r0, #1
 80067f2:	d09c      	beq.n	800672e <_printf_i+0x13a>
 80067f4:	3501      	adds	r5, #1
 80067f6:	68e3      	ldr	r3, [r4, #12]
 80067f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	42ab      	cmp	r3, r5
 80067fe:	dcf0      	bgt.n	80067e2 <_printf_i+0x1ee>
 8006800:	e7e9      	b.n	80067d6 <_printf_i+0x1e2>
 8006802:	2500      	movs	r5, #0
 8006804:	e7f7      	b.n	80067f6 <_printf_i+0x202>
 8006806:	46c0      	nop			@ (mov r8, r8)
 8006808:	08008e7a 	.word	0x08008e7a
 800680c:	08008e8b 	.word	0x08008e8b

08006810 <std>:
 8006810:	2300      	movs	r3, #0
 8006812:	b510      	push	{r4, lr}
 8006814:	0004      	movs	r4, r0
 8006816:	6003      	str	r3, [r0, #0]
 8006818:	6043      	str	r3, [r0, #4]
 800681a:	6083      	str	r3, [r0, #8]
 800681c:	8181      	strh	r1, [r0, #12]
 800681e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006820:	81c2      	strh	r2, [r0, #14]
 8006822:	6103      	str	r3, [r0, #16]
 8006824:	6143      	str	r3, [r0, #20]
 8006826:	6183      	str	r3, [r0, #24]
 8006828:	0019      	movs	r1, r3
 800682a:	2208      	movs	r2, #8
 800682c:	305c      	adds	r0, #92	@ 0x5c
 800682e:	f000 f91f 	bl	8006a70 <memset>
 8006832:	4b0b      	ldr	r3, [pc, #44]	@ (8006860 <std+0x50>)
 8006834:	6224      	str	r4, [r4, #32]
 8006836:	6263      	str	r3, [r4, #36]	@ 0x24
 8006838:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <std+0x54>)
 800683a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800683c:	4b0a      	ldr	r3, [pc, #40]	@ (8006868 <std+0x58>)
 800683e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006840:	4b0a      	ldr	r3, [pc, #40]	@ (800686c <std+0x5c>)
 8006842:	6323      	str	r3, [r4, #48]	@ 0x30
 8006844:	4b0a      	ldr	r3, [pc, #40]	@ (8006870 <std+0x60>)
 8006846:	429c      	cmp	r4, r3
 8006848:	d005      	beq.n	8006856 <std+0x46>
 800684a:	4b0a      	ldr	r3, [pc, #40]	@ (8006874 <std+0x64>)
 800684c:	429c      	cmp	r4, r3
 800684e:	d002      	beq.n	8006856 <std+0x46>
 8006850:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <std+0x68>)
 8006852:	429c      	cmp	r4, r3
 8006854:	d103      	bne.n	800685e <std+0x4e>
 8006856:	0020      	movs	r0, r4
 8006858:	3058      	adds	r0, #88	@ 0x58
 800685a:	f000 f98d 	bl	8006b78 <__retarget_lock_init_recursive>
 800685e:	bd10      	pop	{r4, pc}
 8006860:	080069d9 	.word	0x080069d9
 8006864:	08006a01 	.word	0x08006a01
 8006868:	08006a39 	.word	0x08006a39
 800686c:	08006a65 	.word	0x08006a65
 8006870:	20000408 	.word	0x20000408
 8006874:	20000470 	.word	0x20000470
 8006878:	200004d8 	.word	0x200004d8

0800687c <stdio_exit_handler>:
 800687c:	b510      	push	{r4, lr}
 800687e:	4a03      	ldr	r2, [pc, #12]	@ (800688c <stdio_exit_handler+0x10>)
 8006880:	4903      	ldr	r1, [pc, #12]	@ (8006890 <stdio_exit_handler+0x14>)
 8006882:	4804      	ldr	r0, [pc, #16]	@ (8006894 <stdio_exit_handler+0x18>)
 8006884:	f000 f86c 	bl	8006960 <_fwalk_sglue>
 8006888:	bd10      	pop	{r4, pc}
 800688a:	46c0      	nop			@ (mov r8, r8)
 800688c:	2000000c 	.word	0x2000000c
 8006890:	080085b5 	.word	0x080085b5
 8006894:	2000001c 	.word	0x2000001c

08006898 <cleanup_stdio>:
 8006898:	6841      	ldr	r1, [r0, #4]
 800689a:	4b0b      	ldr	r3, [pc, #44]	@ (80068c8 <cleanup_stdio+0x30>)
 800689c:	b510      	push	{r4, lr}
 800689e:	0004      	movs	r4, r0
 80068a0:	4299      	cmp	r1, r3
 80068a2:	d001      	beq.n	80068a8 <cleanup_stdio+0x10>
 80068a4:	f001 fe86 	bl	80085b4 <_fflush_r>
 80068a8:	68a1      	ldr	r1, [r4, #8]
 80068aa:	4b08      	ldr	r3, [pc, #32]	@ (80068cc <cleanup_stdio+0x34>)
 80068ac:	4299      	cmp	r1, r3
 80068ae:	d002      	beq.n	80068b6 <cleanup_stdio+0x1e>
 80068b0:	0020      	movs	r0, r4
 80068b2:	f001 fe7f 	bl	80085b4 <_fflush_r>
 80068b6:	68e1      	ldr	r1, [r4, #12]
 80068b8:	4b05      	ldr	r3, [pc, #20]	@ (80068d0 <cleanup_stdio+0x38>)
 80068ba:	4299      	cmp	r1, r3
 80068bc:	d002      	beq.n	80068c4 <cleanup_stdio+0x2c>
 80068be:	0020      	movs	r0, r4
 80068c0:	f001 fe78 	bl	80085b4 <_fflush_r>
 80068c4:	bd10      	pop	{r4, pc}
 80068c6:	46c0      	nop			@ (mov r8, r8)
 80068c8:	20000408 	.word	0x20000408
 80068cc:	20000470 	.word	0x20000470
 80068d0:	200004d8 	.word	0x200004d8

080068d4 <global_stdio_init.part.0>:
 80068d4:	b510      	push	{r4, lr}
 80068d6:	4b09      	ldr	r3, [pc, #36]	@ (80068fc <global_stdio_init.part.0+0x28>)
 80068d8:	4a09      	ldr	r2, [pc, #36]	@ (8006900 <global_stdio_init.part.0+0x2c>)
 80068da:	2104      	movs	r1, #4
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	4809      	ldr	r0, [pc, #36]	@ (8006904 <global_stdio_init.part.0+0x30>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	f7ff ff95 	bl	8006810 <std>
 80068e6:	2201      	movs	r2, #1
 80068e8:	2109      	movs	r1, #9
 80068ea:	4807      	ldr	r0, [pc, #28]	@ (8006908 <global_stdio_init.part.0+0x34>)
 80068ec:	f7ff ff90 	bl	8006810 <std>
 80068f0:	2202      	movs	r2, #2
 80068f2:	2112      	movs	r1, #18
 80068f4:	4805      	ldr	r0, [pc, #20]	@ (800690c <global_stdio_init.part.0+0x38>)
 80068f6:	f7ff ff8b 	bl	8006810 <std>
 80068fa:	bd10      	pop	{r4, pc}
 80068fc:	20000540 	.word	0x20000540
 8006900:	0800687d 	.word	0x0800687d
 8006904:	20000408 	.word	0x20000408
 8006908:	20000470 	.word	0x20000470
 800690c:	200004d8 	.word	0x200004d8

08006910 <__sfp_lock_acquire>:
 8006910:	b510      	push	{r4, lr}
 8006912:	4802      	ldr	r0, [pc, #8]	@ (800691c <__sfp_lock_acquire+0xc>)
 8006914:	f000 f931 	bl	8006b7a <__retarget_lock_acquire_recursive>
 8006918:	bd10      	pop	{r4, pc}
 800691a:	46c0      	nop			@ (mov r8, r8)
 800691c:	20000549 	.word	0x20000549

08006920 <__sfp_lock_release>:
 8006920:	b510      	push	{r4, lr}
 8006922:	4802      	ldr	r0, [pc, #8]	@ (800692c <__sfp_lock_release+0xc>)
 8006924:	f000 f92a 	bl	8006b7c <__retarget_lock_release_recursive>
 8006928:	bd10      	pop	{r4, pc}
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	20000549 	.word	0x20000549

08006930 <__sinit>:
 8006930:	b510      	push	{r4, lr}
 8006932:	0004      	movs	r4, r0
 8006934:	f7ff ffec 	bl	8006910 <__sfp_lock_acquire>
 8006938:	6a23      	ldr	r3, [r4, #32]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <__sinit+0x14>
 800693e:	f7ff ffef 	bl	8006920 <__sfp_lock_release>
 8006942:	bd10      	pop	{r4, pc}
 8006944:	4b04      	ldr	r3, [pc, #16]	@ (8006958 <__sinit+0x28>)
 8006946:	6223      	str	r3, [r4, #32]
 8006948:	4b04      	ldr	r3, [pc, #16]	@ (800695c <__sinit+0x2c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f6      	bne.n	800693e <__sinit+0xe>
 8006950:	f7ff ffc0 	bl	80068d4 <global_stdio_init.part.0>
 8006954:	e7f3      	b.n	800693e <__sinit+0xe>
 8006956:	46c0      	nop			@ (mov r8, r8)
 8006958:	08006899 	.word	0x08006899
 800695c:	20000540 	.word	0x20000540

08006960 <_fwalk_sglue>:
 8006960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006962:	0014      	movs	r4, r2
 8006964:	2600      	movs	r6, #0
 8006966:	9000      	str	r0, [sp, #0]
 8006968:	9101      	str	r1, [sp, #4]
 800696a:	68a5      	ldr	r5, [r4, #8]
 800696c:	6867      	ldr	r7, [r4, #4]
 800696e:	3f01      	subs	r7, #1
 8006970:	d504      	bpl.n	800697c <_fwalk_sglue+0x1c>
 8006972:	6824      	ldr	r4, [r4, #0]
 8006974:	2c00      	cmp	r4, #0
 8006976:	d1f8      	bne.n	800696a <_fwalk_sglue+0xa>
 8006978:	0030      	movs	r0, r6
 800697a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800697c:	89ab      	ldrh	r3, [r5, #12]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d908      	bls.n	8006994 <_fwalk_sglue+0x34>
 8006982:	220e      	movs	r2, #14
 8006984:	5eab      	ldrsh	r3, [r5, r2]
 8006986:	3301      	adds	r3, #1
 8006988:	d004      	beq.n	8006994 <_fwalk_sglue+0x34>
 800698a:	0029      	movs	r1, r5
 800698c:	9800      	ldr	r0, [sp, #0]
 800698e:	9b01      	ldr	r3, [sp, #4]
 8006990:	4798      	blx	r3
 8006992:	4306      	orrs	r6, r0
 8006994:	3568      	adds	r5, #104	@ 0x68
 8006996:	e7ea      	b.n	800696e <_fwalk_sglue+0xe>

08006998 <siprintf>:
 8006998:	b40e      	push	{r1, r2, r3}
 800699a:	b500      	push	{lr}
 800699c:	490b      	ldr	r1, [pc, #44]	@ (80069cc <siprintf+0x34>)
 800699e:	b09c      	sub	sp, #112	@ 0x70
 80069a0:	ab1d      	add	r3, sp, #116	@ 0x74
 80069a2:	9002      	str	r0, [sp, #8]
 80069a4:	9006      	str	r0, [sp, #24]
 80069a6:	9107      	str	r1, [sp, #28]
 80069a8:	9104      	str	r1, [sp, #16]
 80069aa:	4809      	ldr	r0, [pc, #36]	@ (80069d0 <siprintf+0x38>)
 80069ac:	4909      	ldr	r1, [pc, #36]	@ (80069d4 <siprintf+0x3c>)
 80069ae:	cb04      	ldmia	r3!, {r2}
 80069b0:	9105      	str	r1, [sp, #20]
 80069b2:	6800      	ldr	r0, [r0, #0]
 80069b4:	a902      	add	r1, sp, #8
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	f001 fc78 	bl	80082ac <_svfiprintf_r>
 80069bc:	2200      	movs	r2, #0
 80069be:	9b02      	ldr	r3, [sp, #8]
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	b01c      	add	sp, #112	@ 0x70
 80069c4:	bc08      	pop	{r3}
 80069c6:	b003      	add	sp, #12
 80069c8:	4718      	bx	r3
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	7fffffff 	.word	0x7fffffff
 80069d0:	20000018 	.word	0x20000018
 80069d4:	ffff0208 	.word	0xffff0208

080069d8 <__sread>:
 80069d8:	b570      	push	{r4, r5, r6, lr}
 80069da:	000c      	movs	r4, r1
 80069dc:	250e      	movs	r5, #14
 80069de:	5f49      	ldrsh	r1, [r1, r5]
 80069e0:	f000 f878 	bl	8006ad4 <_read_r>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	db03      	blt.n	80069f0 <__sread+0x18>
 80069e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80069ea:	181b      	adds	r3, r3, r0
 80069ec:	6563      	str	r3, [r4, #84]	@ 0x54
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	89a3      	ldrh	r3, [r4, #12]
 80069f2:	4a02      	ldr	r2, [pc, #8]	@ (80069fc <__sread+0x24>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	81a3      	strh	r3, [r4, #12]
 80069f8:	e7f9      	b.n	80069ee <__sread+0x16>
 80069fa:	46c0      	nop			@ (mov r8, r8)
 80069fc:	ffffefff 	.word	0xffffefff

08006a00 <__swrite>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	001f      	movs	r7, r3
 8006a04:	898b      	ldrh	r3, [r1, #12]
 8006a06:	0005      	movs	r5, r0
 8006a08:	000c      	movs	r4, r1
 8006a0a:	0016      	movs	r6, r2
 8006a0c:	05db      	lsls	r3, r3, #23
 8006a0e:	d505      	bpl.n	8006a1c <__swrite+0x1c>
 8006a10:	230e      	movs	r3, #14
 8006a12:	5ec9      	ldrsh	r1, [r1, r3]
 8006a14:	2200      	movs	r2, #0
 8006a16:	2302      	movs	r3, #2
 8006a18:	f000 f848 	bl	8006aac <_lseek_r>
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	4a05      	ldr	r2, [pc, #20]	@ (8006a34 <__swrite+0x34>)
 8006a20:	0028      	movs	r0, r5
 8006a22:	4013      	ands	r3, r2
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	0032      	movs	r2, r6
 8006a28:	230e      	movs	r3, #14
 8006a2a:	5ee1      	ldrsh	r1, [r4, r3]
 8006a2c:	003b      	movs	r3, r7
 8006a2e:	f000 f865 	bl	8006afc <_write_r>
 8006a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a34:	ffffefff 	.word	0xffffefff

08006a38 <__sseek>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	000c      	movs	r4, r1
 8006a3c:	250e      	movs	r5, #14
 8006a3e:	5f49      	ldrsh	r1, [r1, r5]
 8006a40:	f000 f834 	bl	8006aac <_lseek_r>
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	1c42      	adds	r2, r0, #1
 8006a48:	d103      	bne.n	8006a52 <__sseek+0x1a>
 8006a4a:	4a05      	ldr	r2, [pc, #20]	@ (8006a60 <__sseek+0x28>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	81a3      	strh	r3, [r4, #12]
 8006a50:	bd70      	pop	{r4, r5, r6, pc}
 8006a52:	2280      	movs	r2, #128	@ 0x80
 8006a54:	0152      	lsls	r2, r2, #5
 8006a56:	4313      	orrs	r3, r2
 8006a58:	81a3      	strh	r3, [r4, #12]
 8006a5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a5c:	e7f8      	b.n	8006a50 <__sseek+0x18>
 8006a5e:	46c0      	nop			@ (mov r8, r8)
 8006a60:	ffffefff 	.word	0xffffefff

08006a64 <__sclose>:
 8006a64:	b510      	push	{r4, lr}
 8006a66:	230e      	movs	r3, #14
 8006a68:	5ec9      	ldrsh	r1, [r1, r3]
 8006a6a:	f000 f80d 	bl	8006a88 <_close_r>
 8006a6e:	bd10      	pop	{r4, pc}

08006a70 <memset>:
 8006a70:	0003      	movs	r3, r0
 8006a72:	1882      	adds	r2, r0, r2
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d100      	bne.n	8006a7a <memset+0xa>
 8006a78:	4770      	bx	lr
 8006a7a:	7019      	strb	r1, [r3, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	e7f9      	b.n	8006a74 <memset+0x4>

08006a80 <_localeconv_r>:
 8006a80:	4800      	ldr	r0, [pc, #0]	@ (8006a84 <_localeconv_r+0x4>)
 8006a82:	4770      	bx	lr
 8006a84:	20000158 	.word	0x20000158

08006a88 <_close_r>:
 8006a88:	2300      	movs	r3, #0
 8006a8a:	b570      	push	{r4, r5, r6, lr}
 8006a8c:	4d06      	ldr	r5, [pc, #24]	@ (8006aa8 <_close_r+0x20>)
 8006a8e:	0004      	movs	r4, r0
 8006a90:	0008      	movs	r0, r1
 8006a92:	602b      	str	r3, [r5, #0]
 8006a94:	f7fc ff43 	bl	800391e <_close>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d103      	bne.n	8006aa4 <_close_r+0x1c>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d000      	beq.n	8006aa4 <_close_r+0x1c>
 8006aa2:	6023      	str	r3, [r4, #0]
 8006aa4:	bd70      	pop	{r4, r5, r6, pc}
 8006aa6:	46c0      	nop			@ (mov r8, r8)
 8006aa8:	20000544 	.word	0x20000544

08006aac <_lseek_r>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	0004      	movs	r4, r0
 8006ab0:	0008      	movs	r0, r1
 8006ab2:	0011      	movs	r1, r2
 8006ab4:	001a      	movs	r2, r3
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	4d05      	ldr	r5, [pc, #20]	@ (8006ad0 <_lseek_r+0x24>)
 8006aba:	602b      	str	r3, [r5, #0]
 8006abc:	f7fc ff50 	bl	8003960 <_lseek>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d103      	bne.n	8006acc <_lseek_r+0x20>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d000      	beq.n	8006acc <_lseek_r+0x20>
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
 8006ace:	46c0      	nop			@ (mov r8, r8)
 8006ad0:	20000544 	.word	0x20000544

08006ad4 <_read_r>:
 8006ad4:	b570      	push	{r4, r5, r6, lr}
 8006ad6:	0004      	movs	r4, r0
 8006ad8:	0008      	movs	r0, r1
 8006ada:	0011      	movs	r1, r2
 8006adc:	001a      	movs	r2, r3
 8006ade:	2300      	movs	r3, #0
 8006ae0:	4d05      	ldr	r5, [pc, #20]	@ (8006af8 <_read_r+0x24>)
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	f7fc fee2 	bl	80038ac <_read>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d103      	bne.n	8006af4 <_read_r+0x20>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d000      	beq.n	8006af4 <_read_r+0x20>
 8006af2:	6023      	str	r3, [r4, #0]
 8006af4:	bd70      	pop	{r4, r5, r6, pc}
 8006af6:	46c0      	nop			@ (mov r8, r8)
 8006af8:	20000544 	.word	0x20000544

08006afc <_write_r>:
 8006afc:	b570      	push	{r4, r5, r6, lr}
 8006afe:	0004      	movs	r4, r0
 8006b00:	0008      	movs	r0, r1
 8006b02:	0011      	movs	r1, r2
 8006b04:	001a      	movs	r2, r3
 8006b06:	2300      	movs	r3, #0
 8006b08:	4d05      	ldr	r5, [pc, #20]	@ (8006b20 <_write_r+0x24>)
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	f7fc feeb 	bl	80038e6 <_write>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d103      	bne.n	8006b1c <_write_r+0x20>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d000      	beq.n	8006b1c <_write_r+0x20>
 8006b1a:	6023      	str	r3, [r4, #0]
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	46c0      	nop			@ (mov r8, r8)
 8006b20:	20000544 	.word	0x20000544

08006b24 <__errno>:
 8006b24:	4b01      	ldr	r3, [pc, #4]	@ (8006b2c <__errno+0x8>)
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	4770      	bx	lr
 8006b2a:	46c0      	nop			@ (mov r8, r8)
 8006b2c:	20000018 	.word	0x20000018

08006b30 <__libc_init_array>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	2600      	movs	r6, #0
 8006b34:	4c0c      	ldr	r4, [pc, #48]	@ (8006b68 <__libc_init_array+0x38>)
 8006b36:	4d0d      	ldr	r5, [pc, #52]	@ (8006b6c <__libc_init_array+0x3c>)
 8006b38:	1b64      	subs	r4, r4, r5
 8006b3a:	10a4      	asrs	r4, r4, #2
 8006b3c:	42a6      	cmp	r6, r4
 8006b3e:	d109      	bne.n	8006b54 <__libc_init_array+0x24>
 8006b40:	2600      	movs	r6, #0
 8006b42:	f002 f907 	bl	8008d54 <_init>
 8006b46:	4c0a      	ldr	r4, [pc, #40]	@ (8006b70 <__libc_init_array+0x40>)
 8006b48:	4d0a      	ldr	r5, [pc, #40]	@ (8006b74 <__libc_init_array+0x44>)
 8006b4a:	1b64      	subs	r4, r4, r5
 8006b4c:	10a4      	asrs	r4, r4, #2
 8006b4e:	42a6      	cmp	r6, r4
 8006b50:	d105      	bne.n	8006b5e <__libc_init_array+0x2e>
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	00b3      	lsls	r3, r6, #2
 8006b56:	58eb      	ldr	r3, [r5, r3]
 8006b58:	4798      	blx	r3
 8006b5a:	3601      	adds	r6, #1
 8006b5c:	e7ee      	b.n	8006b3c <__libc_init_array+0xc>
 8006b5e:	00b3      	lsls	r3, r6, #2
 8006b60:	58eb      	ldr	r3, [r5, r3]
 8006b62:	4798      	blx	r3
 8006b64:	3601      	adds	r6, #1
 8006b66:	e7f2      	b.n	8006b4e <__libc_init_array+0x1e>
 8006b68:	080091d8 	.word	0x080091d8
 8006b6c:	080091d8 	.word	0x080091d8
 8006b70:	080091dc 	.word	0x080091dc
 8006b74:	080091d8 	.word	0x080091d8

08006b78 <__retarget_lock_init_recursive>:
 8006b78:	4770      	bx	lr

08006b7a <__retarget_lock_acquire_recursive>:
 8006b7a:	4770      	bx	lr

08006b7c <__retarget_lock_release_recursive>:
 8006b7c:	4770      	bx	lr

08006b7e <memchr>:
 8006b7e:	b2c9      	uxtb	r1, r1
 8006b80:	1882      	adds	r2, r0, r2
 8006b82:	4290      	cmp	r0, r2
 8006b84:	d101      	bne.n	8006b8a <memchr+0xc>
 8006b86:	2000      	movs	r0, #0
 8006b88:	4770      	bx	lr
 8006b8a:	7803      	ldrb	r3, [r0, #0]
 8006b8c:	428b      	cmp	r3, r1
 8006b8e:	d0fb      	beq.n	8006b88 <memchr+0xa>
 8006b90:	3001      	adds	r0, #1
 8006b92:	e7f6      	b.n	8006b82 <memchr+0x4>

08006b94 <quorem>:
 8006b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b96:	6902      	ldr	r2, [r0, #16]
 8006b98:	690f      	ldr	r7, [r1, #16]
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	0006      	movs	r6, r0
 8006b9e:	000b      	movs	r3, r1
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	9102      	str	r1, [sp, #8]
 8006ba4:	42ba      	cmp	r2, r7
 8006ba6:	db6d      	blt.n	8006c84 <quorem+0xf0>
 8006ba8:	3f01      	subs	r7, #1
 8006baa:	00bc      	lsls	r4, r7, #2
 8006bac:	3314      	adds	r3, #20
 8006bae:	9305      	str	r3, [sp, #20]
 8006bb0:	191b      	adds	r3, r3, r4
 8006bb2:	9303      	str	r3, [sp, #12]
 8006bb4:	0033      	movs	r3, r6
 8006bb6:	3314      	adds	r3, #20
 8006bb8:	191c      	adds	r4, r3, r4
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	9304      	str	r3, [sp, #16]
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	9804      	ldr	r0, [sp, #16]
 8006bc4:	681d      	ldr	r5, [r3, #0]
 8006bc6:	3501      	adds	r5, #1
 8006bc8:	0029      	movs	r1, r5
 8006bca:	f7f9 fab5 	bl	8000138 <__udivsi3>
 8006bce:	9b04      	ldr	r3, [sp, #16]
 8006bd0:	9000      	str	r0, [sp, #0]
 8006bd2:	42ab      	cmp	r3, r5
 8006bd4:	d32b      	bcc.n	8006c2e <quorem+0x9a>
 8006bd6:	9b05      	ldr	r3, [sp, #20]
 8006bd8:	9d01      	ldr	r5, [sp, #4]
 8006bda:	469c      	mov	ip, r3
 8006bdc:	2300      	movs	r3, #0
 8006bde:	9305      	str	r3, [sp, #20]
 8006be0:	9304      	str	r3, [sp, #16]
 8006be2:	4662      	mov	r2, ip
 8006be4:	ca08      	ldmia	r2!, {r3}
 8006be6:	6828      	ldr	r0, [r5, #0]
 8006be8:	4694      	mov	ip, r2
 8006bea:	9a00      	ldr	r2, [sp, #0]
 8006bec:	b299      	uxth	r1, r3
 8006bee:	4351      	muls	r1, r2
 8006bf0:	9a05      	ldr	r2, [sp, #20]
 8006bf2:	0c1b      	lsrs	r3, r3, #16
 8006bf4:	1889      	adds	r1, r1, r2
 8006bf6:	9a00      	ldr	r2, [sp, #0]
 8006bf8:	4353      	muls	r3, r2
 8006bfa:	0c0a      	lsrs	r2, r1, #16
 8006bfc:	189b      	adds	r3, r3, r2
 8006bfe:	0c1a      	lsrs	r2, r3, #16
 8006c00:	b289      	uxth	r1, r1
 8006c02:	9205      	str	r2, [sp, #20]
 8006c04:	b282      	uxth	r2, r0
 8006c06:	1a52      	subs	r2, r2, r1
 8006c08:	9904      	ldr	r1, [sp, #16]
 8006c0a:	0c00      	lsrs	r0, r0, #16
 8006c0c:	1852      	adds	r2, r2, r1
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	1411      	asrs	r1, r2, #16
 8006c12:	1ac3      	subs	r3, r0, r3
 8006c14:	185b      	adds	r3, r3, r1
 8006c16:	1419      	asrs	r1, r3, #16
 8006c18:	b292      	uxth	r2, r2
 8006c1a:	041b      	lsls	r3, r3, #16
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	9104      	str	r1, [sp, #16]
 8006c22:	c504      	stmia	r5!, {r2}
 8006c24:	4563      	cmp	r3, ip
 8006c26:	d2dc      	bcs.n	8006be2 <quorem+0x4e>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d030      	beq.n	8006c90 <quorem+0xfc>
 8006c2e:	0030      	movs	r0, r6
 8006c30:	9902      	ldr	r1, [sp, #8]
 8006c32:	f001 f9c5 	bl	8007fc0 <__mcmp>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	db23      	blt.n	8006c82 <quorem+0xee>
 8006c3a:	0034      	movs	r4, r6
 8006c3c:	2500      	movs	r5, #0
 8006c3e:	9902      	ldr	r1, [sp, #8]
 8006c40:	3414      	adds	r4, #20
 8006c42:	3114      	adds	r1, #20
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	c901      	ldmia	r1!, {r0}
 8006c48:	9302      	str	r3, [sp, #8]
 8006c4a:	466b      	mov	r3, sp
 8006c4c:	891b      	ldrh	r3, [r3, #8]
 8006c4e:	b282      	uxth	r2, r0
 8006c50:	1a9a      	subs	r2, r3, r2
 8006c52:	9b02      	ldr	r3, [sp, #8]
 8006c54:	1952      	adds	r2, r2, r5
 8006c56:	0c00      	lsrs	r0, r0, #16
 8006c58:	0c1b      	lsrs	r3, r3, #16
 8006c5a:	1a1b      	subs	r3, r3, r0
 8006c5c:	1410      	asrs	r0, r2, #16
 8006c5e:	181b      	adds	r3, r3, r0
 8006c60:	141d      	asrs	r5, r3, #16
 8006c62:	b292      	uxth	r2, r2
 8006c64:	041b      	lsls	r3, r3, #16
 8006c66:	431a      	orrs	r2, r3
 8006c68:	9b03      	ldr	r3, [sp, #12]
 8006c6a:	c404      	stmia	r4!, {r2}
 8006c6c:	428b      	cmp	r3, r1
 8006c6e:	d2e9      	bcs.n	8006c44 <quorem+0xb0>
 8006c70:	9a01      	ldr	r2, [sp, #4]
 8006c72:	00bb      	lsls	r3, r7, #2
 8006c74:	18d3      	adds	r3, r2, r3
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	2a00      	cmp	r2, #0
 8006c7a:	d013      	beq.n	8006ca4 <quorem+0x110>
 8006c7c:	9b00      	ldr	r3, [sp, #0]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	9800      	ldr	r0, [sp, #0]
 8006c84:	b007      	add	sp, #28
 8006c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d104      	bne.n	8006c98 <quorem+0x104>
 8006c8e:	3f01      	subs	r7, #1
 8006c90:	9b01      	ldr	r3, [sp, #4]
 8006c92:	3c04      	subs	r4, #4
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	d3f7      	bcc.n	8006c88 <quorem+0xf4>
 8006c98:	6137      	str	r7, [r6, #16]
 8006c9a:	e7c8      	b.n	8006c2e <quorem+0x9a>
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	2a00      	cmp	r2, #0
 8006ca0:	d104      	bne.n	8006cac <quorem+0x118>
 8006ca2:	3f01      	subs	r7, #1
 8006ca4:	9a01      	ldr	r2, [sp, #4]
 8006ca6:	3b04      	subs	r3, #4
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d3f7      	bcc.n	8006c9c <quorem+0x108>
 8006cac:	6137      	str	r7, [r6, #16]
 8006cae:	e7e5      	b.n	8006c7c <quorem+0xe8>

08006cb0 <_dtoa_r>:
 8006cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb2:	0014      	movs	r4, r2
 8006cb4:	001d      	movs	r5, r3
 8006cb6:	69c6      	ldr	r6, [r0, #28]
 8006cb8:	b09d      	sub	sp, #116	@ 0x74
 8006cba:	940a      	str	r4, [sp, #40]	@ 0x28
 8006cbc:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006cbe:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006cc0:	9003      	str	r0, [sp, #12]
 8006cc2:	2e00      	cmp	r6, #0
 8006cc4:	d10f      	bne.n	8006ce6 <_dtoa_r+0x36>
 8006cc6:	2010      	movs	r0, #16
 8006cc8:	f000 fe30 	bl	800792c <malloc>
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	1e02      	subs	r2, r0, #0
 8006cd0:	61d8      	str	r0, [r3, #28]
 8006cd2:	d104      	bne.n	8006cde <_dtoa_r+0x2e>
 8006cd4:	21ef      	movs	r1, #239	@ 0xef
 8006cd6:	4bc7      	ldr	r3, [pc, #796]	@ (8006ff4 <_dtoa_r+0x344>)
 8006cd8:	48c7      	ldr	r0, [pc, #796]	@ (8006ff8 <_dtoa_r+0x348>)
 8006cda:	f001 fcc5 	bl	8008668 <__assert_func>
 8006cde:	6046      	str	r6, [r0, #4]
 8006ce0:	6086      	str	r6, [r0, #8]
 8006ce2:	6006      	str	r6, [r0, #0]
 8006ce4:	60c6      	str	r6, [r0, #12]
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	6819      	ldr	r1, [r3, #0]
 8006cec:	2900      	cmp	r1, #0
 8006cee:	d00b      	beq.n	8006d08 <_dtoa_r+0x58>
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	4093      	lsls	r3, r2
 8006cf6:	604a      	str	r2, [r1, #4]
 8006cf8:	608b      	str	r3, [r1, #8]
 8006cfa:	9803      	ldr	r0, [sp, #12]
 8006cfc:	f000 ff16 	bl	8007b2c <_Bfree>
 8006d00:	2200      	movs	r2, #0
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	2d00      	cmp	r5, #0
 8006d0a:	da1e      	bge.n	8006d4a <_dtoa_r+0x9a>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	603b      	str	r3, [r7, #0]
 8006d10:	006b      	lsls	r3, r5, #1
 8006d12:	085b      	lsrs	r3, r3, #1
 8006d14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d16:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006d18:	4bb8      	ldr	r3, [pc, #736]	@ (8006ffc <_dtoa_r+0x34c>)
 8006d1a:	4ab8      	ldr	r2, [pc, #736]	@ (8006ffc <_dtoa_r+0x34c>)
 8006d1c:	403b      	ands	r3, r7
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d116      	bne.n	8006d50 <_dtoa_r+0xa0>
 8006d22:	4bb7      	ldr	r3, [pc, #732]	@ (8007000 <_dtoa_r+0x350>)
 8006d24:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	033b      	lsls	r3, r7, #12
 8006d2a:	0b1b      	lsrs	r3, r3, #12
 8006d2c:	4323      	orrs	r3, r4
 8006d2e:	d101      	bne.n	8006d34 <_dtoa_r+0x84>
 8006d30:	f000 fd83 	bl	800783a <_dtoa_r+0xb8a>
 8006d34:	4bb3      	ldr	r3, [pc, #716]	@ (8007004 <_dtoa_r+0x354>)
 8006d36:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d38:	9308      	str	r3, [sp, #32]
 8006d3a:	2a00      	cmp	r2, #0
 8006d3c:	d002      	beq.n	8006d44 <_dtoa_r+0x94>
 8006d3e:	4bb2      	ldr	r3, [pc, #712]	@ (8007008 <_dtoa_r+0x358>)
 8006d40:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	9808      	ldr	r0, [sp, #32]
 8006d46:	b01d      	add	sp, #116	@ 0x74
 8006d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	603b      	str	r3, [r7, #0]
 8006d4e:	e7e2      	b.n	8006d16 <_dtoa_r+0x66>
 8006d50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d54:	9212      	str	r2, [sp, #72]	@ 0x48
 8006d56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d58:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006d5a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f7f9 fb70 	bl	8000444 <__aeabi_dcmpeq>
 8006d64:	1e06      	subs	r6, r0, #0
 8006d66:	d00b      	beq.n	8006d80 <_dtoa_r+0xd0>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <_dtoa_r+0xca>
 8006d74:	4ba5      	ldr	r3, [pc, #660]	@ (800700c <_dtoa_r+0x35c>)
 8006d76:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	4ba5      	ldr	r3, [pc, #660]	@ (8007010 <_dtoa_r+0x360>)
 8006d7c:	9308      	str	r3, [sp, #32]
 8006d7e:	e7e1      	b.n	8006d44 <_dtoa_r+0x94>
 8006d80:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	9803      	ldr	r0, [sp, #12]
 8006d8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006d8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d8e:	f001 f9cd 	bl	800812c <__d2b>
 8006d92:	007a      	lsls	r2, r7, #1
 8006d94:	9005      	str	r0, [sp, #20]
 8006d96:	0d52      	lsrs	r2, r2, #21
 8006d98:	d100      	bne.n	8006d9c <_dtoa_r+0xec>
 8006d9a:	e07b      	b.n	8006e94 <_dtoa_r+0x1e4>
 8006d9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d9e:	9618      	str	r6, [sp, #96]	@ 0x60
 8006da0:	0319      	lsls	r1, r3, #12
 8006da2:	4b9c      	ldr	r3, [pc, #624]	@ (8007014 <_dtoa_r+0x364>)
 8006da4:	0b09      	lsrs	r1, r1, #12
 8006da6:	430b      	orrs	r3, r1
 8006da8:	499b      	ldr	r1, [pc, #620]	@ (8007018 <_dtoa_r+0x368>)
 8006daa:	1857      	adds	r7, r2, r1
 8006dac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006dae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006db0:	0019      	movs	r1, r3
 8006db2:	2200      	movs	r2, #0
 8006db4:	4b99      	ldr	r3, [pc, #612]	@ (800701c <_dtoa_r+0x36c>)
 8006db6:	f7fa ff6d 	bl	8001c94 <__aeabi_dsub>
 8006dba:	4a99      	ldr	r2, [pc, #612]	@ (8007020 <_dtoa_r+0x370>)
 8006dbc:	4b99      	ldr	r3, [pc, #612]	@ (8007024 <_dtoa_r+0x374>)
 8006dbe:	f7fa fca1 	bl	8001704 <__aeabi_dmul>
 8006dc2:	4a99      	ldr	r2, [pc, #612]	@ (8007028 <_dtoa_r+0x378>)
 8006dc4:	4b99      	ldr	r3, [pc, #612]	@ (800702c <_dtoa_r+0x37c>)
 8006dc6:	f7f9 fcf5 	bl	80007b4 <__aeabi_dadd>
 8006dca:	0004      	movs	r4, r0
 8006dcc:	0038      	movs	r0, r7
 8006dce:	000d      	movs	r5, r1
 8006dd0:	f7fb fb5a 	bl	8002488 <__aeabi_i2d>
 8006dd4:	4a96      	ldr	r2, [pc, #600]	@ (8007030 <_dtoa_r+0x380>)
 8006dd6:	4b97      	ldr	r3, [pc, #604]	@ (8007034 <_dtoa_r+0x384>)
 8006dd8:	f7fa fc94 	bl	8001704 <__aeabi_dmul>
 8006ddc:	0002      	movs	r2, r0
 8006dde:	000b      	movs	r3, r1
 8006de0:	0020      	movs	r0, r4
 8006de2:	0029      	movs	r1, r5
 8006de4:	f7f9 fce6 	bl	80007b4 <__aeabi_dadd>
 8006de8:	0004      	movs	r4, r0
 8006dea:	000d      	movs	r5, r1
 8006dec:	f7fb fb10 	bl	8002410 <__aeabi_d2iz>
 8006df0:	2200      	movs	r2, #0
 8006df2:	9004      	str	r0, [sp, #16]
 8006df4:	2300      	movs	r3, #0
 8006df6:	0020      	movs	r0, r4
 8006df8:	0029      	movs	r1, r5
 8006dfa:	f7f9 fb29 	bl	8000450 <__aeabi_dcmplt>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d00b      	beq.n	8006e1a <_dtoa_r+0x16a>
 8006e02:	9804      	ldr	r0, [sp, #16]
 8006e04:	f7fb fb40 	bl	8002488 <__aeabi_i2d>
 8006e08:	002b      	movs	r3, r5
 8006e0a:	0022      	movs	r2, r4
 8006e0c:	f7f9 fb1a 	bl	8000444 <__aeabi_dcmpeq>
 8006e10:	4243      	negs	r3, r0
 8006e12:	4158      	adcs	r0, r3
 8006e14:	9b04      	ldr	r3, [sp, #16]
 8006e16:	1a1b      	subs	r3, r3, r0
 8006e18:	9304      	str	r3, [sp, #16]
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e1e:	9b04      	ldr	r3, [sp, #16]
 8006e20:	2b16      	cmp	r3, #22
 8006e22:	d810      	bhi.n	8006e46 <_dtoa_r+0x196>
 8006e24:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006e26:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006e28:	9a04      	ldr	r2, [sp, #16]
 8006e2a:	4b83      	ldr	r3, [pc, #524]	@ (8007038 <_dtoa_r+0x388>)
 8006e2c:	00d2      	lsls	r2, r2, #3
 8006e2e:	189b      	adds	r3, r3, r2
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f7f9 fb0c 	bl	8000450 <__aeabi_dcmplt>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d047      	beq.n	8006ecc <_dtoa_r+0x21c>
 8006e3c:	9b04      	ldr	r3, [sp, #16]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	9304      	str	r3, [sp, #16]
 8006e42:	2300      	movs	r3, #0
 8006e44:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e46:	2200      	movs	r2, #0
 8006e48:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006e4a:	9206      	str	r2, [sp, #24]
 8006e4c:	1bdb      	subs	r3, r3, r7
 8006e4e:	1e5a      	subs	r2, r3, #1
 8006e50:	d53e      	bpl.n	8006ed0 <_dtoa_r+0x220>
 8006e52:	2201      	movs	r2, #1
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	9306      	str	r3, [sp, #24]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e5c:	9b04      	ldr	r3, [sp, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	db38      	blt.n	8006ed4 <_dtoa_r+0x224>
 8006e62:	9a04      	ldr	r2, [sp, #16]
 8006e64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e66:	4694      	mov	ip, r2
 8006e68:	4463      	add	r3, ip
 8006e6a:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e70:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e72:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e74:	2401      	movs	r4, #1
 8006e76:	2b09      	cmp	r3, #9
 8006e78:	d867      	bhi.n	8006f4a <_dtoa_r+0x29a>
 8006e7a:	2b05      	cmp	r3, #5
 8006e7c:	dd02      	ble.n	8006e84 <_dtoa_r+0x1d4>
 8006e7e:	2400      	movs	r4, #0
 8006e80:	3b04      	subs	r3, #4
 8006e82:	9322      	str	r3, [sp, #136]	@ 0x88
 8006e84:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e86:	1e98      	subs	r0, r3, #2
 8006e88:	2803      	cmp	r0, #3
 8006e8a:	d867      	bhi.n	8006f5c <_dtoa_r+0x2ac>
 8006e8c:	f7f9 f940 	bl	8000110 <__gnu_thumb1_case_uqi>
 8006e90:	5b383a2b 	.word	0x5b383a2b
 8006e94:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006e96:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006e98:	18f6      	adds	r6, r6, r3
 8006e9a:	4b68      	ldr	r3, [pc, #416]	@ (800703c <_dtoa_r+0x38c>)
 8006e9c:	18f2      	adds	r2, r6, r3
 8006e9e:	2a20      	cmp	r2, #32
 8006ea0:	dd0f      	ble.n	8006ec2 <_dtoa_r+0x212>
 8006ea2:	2340      	movs	r3, #64	@ 0x40
 8006ea4:	1a9b      	subs	r3, r3, r2
 8006ea6:	409f      	lsls	r7, r3
 8006ea8:	4b65      	ldr	r3, [pc, #404]	@ (8007040 <_dtoa_r+0x390>)
 8006eaa:	0038      	movs	r0, r7
 8006eac:	18f3      	adds	r3, r6, r3
 8006eae:	40dc      	lsrs	r4, r3
 8006eb0:	4320      	orrs	r0, r4
 8006eb2:	f7fb fb17 	bl	80024e4 <__aeabi_ui2d>
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4b62      	ldr	r3, [pc, #392]	@ (8007044 <_dtoa_r+0x394>)
 8006eba:	1e77      	subs	r7, r6, #1
 8006ebc:	18cb      	adds	r3, r1, r3
 8006ebe:	9218      	str	r2, [sp, #96]	@ 0x60
 8006ec0:	e776      	b.n	8006db0 <_dtoa_r+0x100>
 8006ec2:	2320      	movs	r3, #32
 8006ec4:	0020      	movs	r0, r4
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	4098      	lsls	r0, r3
 8006eca:	e7f2      	b.n	8006eb2 <_dtoa_r+0x202>
 8006ecc:	9015      	str	r0, [sp, #84]	@ 0x54
 8006ece:	e7ba      	b.n	8006e46 <_dtoa_r+0x196>
 8006ed0:	920d      	str	r2, [sp, #52]	@ 0x34
 8006ed2:	e7c3      	b.n	8006e5c <_dtoa_r+0x1ac>
 8006ed4:	9b06      	ldr	r3, [sp, #24]
 8006ed6:	9a04      	ldr	r2, [sp, #16]
 8006ed8:	1a9b      	subs	r3, r3, r2
 8006eda:	9306      	str	r3, [sp, #24]
 8006edc:	4253      	negs	r3, r2
 8006ede:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	9314      	str	r3, [sp, #80]	@ 0x50
 8006ee4:	e7c5      	b.n	8006e72 <_dtoa_r+0x1c2>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006eea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006eec:	930e      	str	r3, [sp, #56]	@ 0x38
 8006eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	dc13      	bgt.n	8006f1c <_dtoa_r+0x26c>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	001a      	movs	r2, r3
 8006ef8:	930e      	str	r3, [sp, #56]	@ 0x38
 8006efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006efc:	9223      	str	r2, [sp, #140]	@ 0x8c
 8006efe:	e00d      	b.n	8006f1c <_dtoa_r+0x26c>
 8006f00:	2301      	movs	r3, #1
 8006f02:	e7f1      	b.n	8006ee8 <_dtoa_r+0x238>
 8006f04:	2300      	movs	r3, #0
 8006f06:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f08:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f0a:	4694      	mov	ip, r2
 8006f0c:	9b04      	ldr	r3, [sp, #16]
 8006f0e:	4463      	add	r3, ip
 8006f10:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f12:	3301      	adds	r3, #1
 8006f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	dc00      	bgt.n	8006f1c <_dtoa_r+0x26c>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	9a03      	ldr	r2, [sp, #12]
 8006f1e:	2100      	movs	r1, #0
 8006f20:	69d0      	ldr	r0, [r2, #28]
 8006f22:	2204      	movs	r2, #4
 8006f24:	0015      	movs	r5, r2
 8006f26:	3514      	adds	r5, #20
 8006f28:	429d      	cmp	r5, r3
 8006f2a:	d91b      	bls.n	8006f64 <_dtoa_r+0x2b4>
 8006f2c:	6041      	str	r1, [r0, #4]
 8006f2e:	9803      	ldr	r0, [sp, #12]
 8006f30:	f000 fdb8 	bl	8007aa4 <_Balloc>
 8006f34:	9008      	str	r0, [sp, #32]
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d117      	bne.n	8006f6a <_dtoa_r+0x2ba>
 8006f3a:	21b0      	movs	r1, #176	@ 0xb0
 8006f3c:	4b42      	ldr	r3, [pc, #264]	@ (8007048 <_dtoa_r+0x398>)
 8006f3e:	482e      	ldr	r0, [pc, #184]	@ (8006ff8 <_dtoa_r+0x348>)
 8006f40:	9a08      	ldr	r2, [sp, #32]
 8006f42:	31ff      	adds	r1, #255	@ 0xff
 8006f44:	e6c9      	b.n	8006cda <_dtoa_r+0x2a>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e7dd      	b.n	8006f06 <_dtoa_r+0x256>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9410      	str	r4, [sp, #64]	@ 0x40
 8006f4e:	9322      	str	r3, [sp, #136]	@ 0x88
 8006f50:	3b01      	subs	r3, #1
 8006f52:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f56:	2200      	movs	r2, #0
 8006f58:	3313      	adds	r3, #19
 8006f5a:	e7cf      	b.n	8006efc <_dtoa_r+0x24c>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f60:	3b02      	subs	r3, #2
 8006f62:	e7f6      	b.n	8006f52 <_dtoa_r+0x2a2>
 8006f64:	3101      	adds	r1, #1
 8006f66:	0052      	lsls	r2, r2, #1
 8006f68:	e7dc      	b.n	8006f24 <_dtoa_r+0x274>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	9a08      	ldr	r2, [sp, #32]
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f74:	2b0e      	cmp	r3, #14
 8006f76:	d900      	bls.n	8006f7a <_dtoa_r+0x2ca>
 8006f78:	e0d9      	b.n	800712e <_dtoa_r+0x47e>
 8006f7a:	2c00      	cmp	r4, #0
 8006f7c:	d100      	bne.n	8006f80 <_dtoa_r+0x2d0>
 8006f7e:	e0d6      	b.n	800712e <_dtoa_r+0x47e>
 8006f80:	9b04      	ldr	r3, [sp, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	dd64      	ble.n	8007050 <_dtoa_r+0x3a0>
 8006f86:	210f      	movs	r1, #15
 8006f88:	9a04      	ldr	r2, [sp, #16]
 8006f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8007038 <_dtoa_r+0x388>)
 8006f8c:	400a      	ands	r2, r1
 8006f8e:	00d2      	lsls	r2, r2, #3
 8006f90:	189b      	adds	r3, r3, r2
 8006f92:	681e      	ldr	r6, [r3, #0]
 8006f94:	685f      	ldr	r7, [r3, #4]
 8006f96:	9b04      	ldr	r3, [sp, #16]
 8006f98:	2402      	movs	r4, #2
 8006f9a:	111d      	asrs	r5, r3, #4
 8006f9c:	05db      	lsls	r3, r3, #23
 8006f9e:	d50a      	bpl.n	8006fb6 <_dtoa_r+0x306>
 8006fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800704c <_dtoa_r+0x39c>)
 8006fa2:	400d      	ands	r5, r1
 8006fa4:	6a1a      	ldr	r2, [r3, #32]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006faa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006fac:	f7f9 ff66 	bl	8000e7c <__aeabi_ddiv>
 8006fb0:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fb2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006fb4:	3401      	adds	r4, #1
 8006fb6:	4b25      	ldr	r3, [pc, #148]	@ (800704c <_dtoa_r+0x39c>)
 8006fb8:	930c      	str	r3, [sp, #48]	@ 0x30
 8006fba:	2d00      	cmp	r5, #0
 8006fbc:	d108      	bne.n	8006fd0 <_dtoa_r+0x320>
 8006fbe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006fc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fc2:	0032      	movs	r2, r6
 8006fc4:	003b      	movs	r3, r7
 8006fc6:	f7f9 ff59 	bl	8000e7c <__aeabi_ddiv>
 8006fca:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fcc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006fce:	e05a      	b.n	8007086 <_dtoa_r+0x3d6>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	421d      	tst	r5, r3
 8006fd4:	d009      	beq.n	8006fea <_dtoa_r+0x33a>
 8006fd6:	18e4      	adds	r4, r4, r3
 8006fd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fda:	0030      	movs	r0, r6
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	0039      	movs	r1, r7
 8006fe2:	f7fa fb8f 	bl	8001704 <__aeabi_dmul>
 8006fe6:	0006      	movs	r6, r0
 8006fe8:	000f      	movs	r7, r1
 8006fea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fec:	106d      	asrs	r5, r5, #1
 8006fee:	3308      	adds	r3, #8
 8006ff0:	e7e2      	b.n	8006fb8 <_dtoa_r+0x308>
 8006ff2:	46c0      	nop			@ (mov r8, r8)
 8006ff4:	08008ea9 	.word	0x08008ea9
 8006ff8:	08008ec0 	.word	0x08008ec0
 8006ffc:	7ff00000 	.word	0x7ff00000
 8007000:	0000270f 	.word	0x0000270f
 8007004:	08008ea5 	.word	0x08008ea5
 8007008:	08008ea8 	.word	0x08008ea8
 800700c:	08008e79 	.word	0x08008e79
 8007010:	08008e78 	.word	0x08008e78
 8007014:	3ff00000 	.word	0x3ff00000
 8007018:	fffffc01 	.word	0xfffffc01
 800701c:	3ff80000 	.word	0x3ff80000
 8007020:	636f4361 	.word	0x636f4361
 8007024:	3fd287a7 	.word	0x3fd287a7
 8007028:	8b60c8b3 	.word	0x8b60c8b3
 800702c:	3fc68a28 	.word	0x3fc68a28
 8007030:	509f79fb 	.word	0x509f79fb
 8007034:	3fd34413 	.word	0x3fd34413
 8007038:	08008fb8 	.word	0x08008fb8
 800703c:	00000432 	.word	0x00000432
 8007040:	00000412 	.word	0x00000412
 8007044:	fe100000 	.word	0xfe100000
 8007048:	08008f18 	.word	0x08008f18
 800704c:	08008f90 	.word	0x08008f90
 8007050:	9b04      	ldr	r3, [sp, #16]
 8007052:	2402      	movs	r4, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d016      	beq.n	8007086 <_dtoa_r+0x3d6>
 8007058:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800705a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800705c:	220f      	movs	r2, #15
 800705e:	425d      	negs	r5, r3
 8007060:	402a      	ands	r2, r5
 8007062:	4bd7      	ldr	r3, [pc, #860]	@ (80073c0 <_dtoa_r+0x710>)
 8007064:	00d2      	lsls	r2, r2, #3
 8007066:	189b      	adds	r3, r3, r2
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f7fa fb4a 	bl	8001704 <__aeabi_dmul>
 8007070:	2701      	movs	r7, #1
 8007072:	2300      	movs	r3, #0
 8007074:	900a      	str	r0, [sp, #40]	@ 0x28
 8007076:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007078:	4ed2      	ldr	r6, [pc, #840]	@ (80073c4 <_dtoa_r+0x714>)
 800707a:	112d      	asrs	r5, r5, #4
 800707c:	2d00      	cmp	r5, #0
 800707e:	d000      	beq.n	8007082 <_dtoa_r+0x3d2>
 8007080:	e0ba      	b.n	80071f8 <_dtoa_r+0x548>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1a1      	bne.n	8006fca <_dtoa_r+0x31a>
 8007086:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007088:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800708a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800708c:	2b00      	cmp	r3, #0
 800708e:	d100      	bne.n	8007092 <_dtoa_r+0x3e2>
 8007090:	e0bd      	b.n	800720e <_dtoa_r+0x55e>
 8007092:	2200      	movs	r2, #0
 8007094:	0030      	movs	r0, r6
 8007096:	0039      	movs	r1, r7
 8007098:	4bcb      	ldr	r3, [pc, #812]	@ (80073c8 <_dtoa_r+0x718>)
 800709a:	f7f9 f9d9 	bl	8000450 <__aeabi_dcmplt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d100      	bne.n	80070a4 <_dtoa_r+0x3f4>
 80070a2:	e0b4      	b.n	800720e <_dtoa_r+0x55e>
 80070a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d100      	bne.n	80070ac <_dtoa_r+0x3fc>
 80070aa:	e0b0      	b.n	800720e <_dtoa_r+0x55e>
 80070ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	dd39      	ble.n	8007126 <_dtoa_r+0x476>
 80070b2:	9b04      	ldr	r3, [sp, #16]
 80070b4:	2200      	movs	r2, #0
 80070b6:	3b01      	subs	r3, #1
 80070b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80070ba:	0030      	movs	r0, r6
 80070bc:	4bc3      	ldr	r3, [pc, #780]	@ (80073cc <_dtoa_r+0x71c>)
 80070be:	0039      	movs	r1, r7
 80070c0:	f7fa fb20 	bl	8001704 <__aeabi_dmul>
 80070c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80070c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80070c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ca:	3401      	adds	r4, #1
 80070cc:	0020      	movs	r0, r4
 80070ce:	9311      	str	r3, [sp, #68]	@ 0x44
 80070d0:	f7fb f9da 	bl	8002488 <__aeabi_i2d>
 80070d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070d8:	f7fa fb14 	bl	8001704 <__aeabi_dmul>
 80070dc:	4bbc      	ldr	r3, [pc, #752]	@ (80073d0 <_dtoa_r+0x720>)
 80070de:	2200      	movs	r2, #0
 80070e0:	f7f9 fb68 	bl	80007b4 <__aeabi_dadd>
 80070e4:	4bbb      	ldr	r3, [pc, #748]	@ (80073d4 <_dtoa_r+0x724>)
 80070e6:	0006      	movs	r6, r0
 80070e8:	18cf      	adds	r7, r1, r3
 80070ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d000      	beq.n	80070f2 <_dtoa_r+0x442>
 80070f0:	e091      	b.n	8007216 <_dtoa_r+0x566>
 80070f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80070f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070f6:	2200      	movs	r2, #0
 80070f8:	4bb7      	ldr	r3, [pc, #732]	@ (80073d8 <_dtoa_r+0x728>)
 80070fa:	f7fa fdcb 	bl	8001c94 <__aeabi_dsub>
 80070fe:	0032      	movs	r2, r6
 8007100:	003b      	movs	r3, r7
 8007102:	0004      	movs	r4, r0
 8007104:	000d      	movs	r5, r1
 8007106:	f7f9 f9b7 	bl	8000478 <__aeabi_dcmpgt>
 800710a:	2800      	cmp	r0, #0
 800710c:	d000      	beq.n	8007110 <_dtoa_r+0x460>
 800710e:	e29d      	b.n	800764c <_dtoa_r+0x99c>
 8007110:	2180      	movs	r1, #128	@ 0x80
 8007112:	0609      	lsls	r1, r1, #24
 8007114:	187b      	adds	r3, r7, r1
 8007116:	0032      	movs	r2, r6
 8007118:	0020      	movs	r0, r4
 800711a:	0029      	movs	r1, r5
 800711c:	f7f9 f998 	bl	8000450 <__aeabi_dcmplt>
 8007120:	2800      	cmp	r0, #0
 8007122:	d000      	beq.n	8007126 <_dtoa_r+0x476>
 8007124:	e130      	b.n	8007388 <_dtoa_r+0x6d8>
 8007126:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007128:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800712a:	930a      	str	r3, [sp, #40]	@ 0x28
 800712c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800712e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007130:	2b00      	cmp	r3, #0
 8007132:	da00      	bge.n	8007136 <_dtoa_r+0x486>
 8007134:	e177      	b.n	8007426 <_dtoa_r+0x776>
 8007136:	9a04      	ldr	r2, [sp, #16]
 8007138:	2a0e      	cmp	r2, #14
 800713a:	dd00      	ble.n	800713e <_dtoa_r+0x48e>
 800713c:	e173      	b.n	8007426 <_dtoa_r+0x776>
 800713e:	4ba0      	ldr	r3, [pc, #640]	@ (80073c0 <_dtoa_r+0x710>)
 8007140:	00d2      	lsls	r2, r2, #3
 8007142:	189b      	adds	r3, r3, r2
 8007144:	685c      	ldr	r4, [r3, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	9306      	str	r3, [sp, #24]
 800714a:	9407      	str	r4, [sp, #28]
 800714c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800714e:	2b00      	cmp	r3, #0
 8007150:	da03      	bge.n	800715a <_dtoa_r+0x4aa>
 8007152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007154:	2b00      	cmp	r3, #0
 8007156:	dc00      	bgt.n	800715a <_dtoa_r+0x4aa>
 8007158:	e106      	b.n	8007368 <_dtoa_r+0x6b8>
 800715a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800715c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800715e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007160:	9d08      	ldr	r5, [sp, #32]
 8007162:	3b01      	subs	r3, #1
 8007164:	195b      	adds	r3, r3, r5
 8007166:	930a      	str	r3, [sp, #40]	@ 0x28
 8007168:	9a06      	ldr	r2, [sp, #24]
 800716a:	9b07      	ldr	r3, [sp, #28]
 800716c:	0030      	movs	r0, r6
 800716e:	0039      	movs	r1, r7
 8007170:	f7f9 fe84 	bl	8000e7c <__aeabi_ddiv>
 8007174:	f7fb f94c 	bl	8002410 <__aeabi_d2iz>
 8007178:	9009      	str	r0, [sp, #36]	@ 0x24
 800717a:	f7fb f985 	bl	8002488 <__aeabi_i2d>
 800717e:	9a06      	ldr	r2, [sp, #24]
 8007180:	9b07      	ldr	r3, [sp, #28]
 8007182:	f7fa fabf 	bl	8001704 <__aeabi_dmul>
 8007186:	0002      	movs	r2, r0
 8007188:	000b      	movs	r3, r1
 800718a:	0030      	movs	r0, r6
 800718c:	0039      	movs	r1, r7
 800718e:	f7fa fd81 	bl	8001c94 <__aeabi_dsub>
 8007192:	002b      	movs	r3, r5
 8007194:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007196:	3501      	adds	r5, #1
 8007198:	3230      	adds	r2, #48	@ 0x30
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800719e:	002c      	movs	r4, r5
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d000      	beq.n	80071a6 <_dtoa_r+0x4f6>
 80071a4:	e131      	b.n	800740a <_dtoa_r+0x75a>
 80071a6:	0002      	movs	r2, r0
 80071a8:	000b      	movs	r3, r1
 80071aa:	f7f9 fb03 	bl	80007b4 <__aeabi_dadd>
 80071ae:	9a06      	ldr	r2, [sp, #24]
 80071b0:	9b07      	ldr	r3, [sp, #28]
 80071b2:	0006      	movs	r6, r0
 80071b4:	000f      	movs	r7, r1
 80071b6:	f7f9 f95f 	bl	8000478 <__aeabi_dcmpgt>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d000      	beq.n	80071c0 <_dtoa_r+0x510>
 80071be:	e10f      	b.n	80073e0 <_dtoa_r+0x730>
 80071c0:	9a06      	ldr	r2, [sp, #24]
 80071c2:	9b07      	ldr	r3, [sp, #28]
 80071c4:	0030      	movs	r0, r6
 80071c6:	0039      	movs	r1, r7
 80071c8:	f7f9 f93c 	bl	8000444 <__aeabi_dcmpeq>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	d003      	beq.n	80071d8 <_dtoa_r+0x528>
 80071d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d2:	07dd      	lsls	r5, r3, #31
 80071d4:	d500      	bpl.n	80071d8 <_dtoa_r+0x528>
 80071d6:	e103      	b.n	80073e0 <_dtoa_r+0x730>
 80071d8:	9905      	ldr	r1, [sp, #20]
 80071da:	9803      	ldr	r0, [sp, #12]
 80071dc:	f000 fca6 	bl	8007b2c <_Bfree>
 80071e0:	2300      	movs	r3, #0
 80071e2:	7023      	strb	r3, [r4, #0]
 80071e4:	9b04      	ldr	r3, [sp, #16]
 80071e6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80071e8:	3301      	adds	r3, #1
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d100      	bne.n	80071f4 <_dtoa_r+0x544>
 80071f2:	e5a7      	b.n	8006d44 <_dtoa_r+0x94>
 80071f4:	601c      	str	r4, [r3, #0]
 80071f6:	e5a5      	b.n	8006d44 <_dtoa_r+0x94>
 80071f8:	423d      	tst	r5, r7
 80071fa:	d005      	beq.n	8007208 <_dtoa_r+0x558>
 80071fc:	6832      	ldr	r2, [r6, #0]
 80071fe:	6873      	ldr	r3, [r6, #4]
 8007200:	f7fa fa80 	bl	8001704 <__aeabi_dmul>
 8007204:	003b      	movs	r3, r7
 8007206:	3401      	adds	r4, #1
 8007208:	106d      	asrs	r5, r5, #1
 800720a:	3608      	adds	r6, #8
 800720c:	e736      	b.n	800707c <_dtoa_r+0x3cc>
 800720e:	9b04      	ldr	r3, [sp, #16]
 8007210:	930c      	str	r3, [sp, #48]	@ 0x30
 8007212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007214:	e75a      	b.n	80070cc <_dtoa_r+0x41c>
 8007216:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007218:	4b69      	ldr	r3, [pc, #420]	@ (80073c0 <_dtoa_r+0x710>)
 800721a:	3a01      	subs	r2, #1
 800721c:	00d2      	lsls	r2, r2, #3
 800721e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007220:	189b      	adds	r3, r3, r2
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2900      	cmp	r1, #0
 8007228:	d04c      	beq.n	80072c4 <_dtoa_r+0x614>
 800722a:	2000      	movs	r0, #0
 800722c:	496b      	ldr	r1, [pc, #428]	@ (80073dc <_dtoa_r+0x72c>)
 800722e:	f7f9 fe25 	bl	8000e7c <__aeabi_ddiv>
 8007232:	0032      	movs	r2, r6
 8007234:	003b      	movs	r3, r7
 8007236:	f7fa fd2d 	bl	8001c94 <__aeabi_dsub>
 800723a:	9a08      	ldr	r2, [sp, #32]
 800723c:	0006      	movs	r6, r0
 800723e:	4694      	mov	ip, r2
 8007240:	000f      	movs	r7, r1
 8007242:	9b08      	ldr	r3, [sp, #32]
 8007244:	9316      	str	r3, [sp, #88]	@ 0x58
 8007246:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007248:	4463      	add	r3, ip
 800724a:	9311      	str	r3, [sp, #68]	@ 0x44
 800724c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800724e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007250:	f7fb f8de 	bl	8002410 <__aeabi_d2iz>
 8007254:	0005      	movs	r5, r0
 8007256:	f7fb f917 	bl	8002488 <__aeabi_i2d>
 800725a:	0002      	movs	r2, r0
 800725c:	000b      	movs	r3, r1
 800725e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007260:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007262:	f7fa fd17 	bl	8001c94 <__aeabi_dsub>
 8007266:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007268:	3530      	adds	r5, #48	@ 0x30
 800726a:	1c5c      	adds	r4, r3, #1
 800726c:	701d      	strb	r5, [r3, #0]
 800726e:	0032      	movs	r2, r6
 8007270:	003b      	movs	r3, r7
 8007272:	900a      	str	r0, [sp, #40]	@ 0x28
 8007274:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007276:	f7f9 f8eb 	bl	8000450 <__aeabi_dcmplt>
 800727a:	2800      	cmp	r0, #0
 800727c:	d16a      	bne.n	8007354 <_dtoa_r+0x6a4>
 800727e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007280:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007282:	2000      	movs	r0, #0
 8007284:	4950      	ldr	r1, [pc, #320]	@ (80073c8 <_dtoa_r+0x718>)
 8007286:	f7fa fd05 	bl	8001c94 <__aeabi_dsub>
 800728a:	0032      	movs	r2, r6
 800728c:	003b      	movs	r3, r7
 800728e:	f7f9 f8df 	bl	8000450 <__aeabi_dcmplt>
 8007292:	2800      	cmp	r0, #0
 8007294:	d000      	beq.n	8007298 <_dtoa_r+0x5e8>
 8007296:	e0a5      	b.n	80073e4 <_dtoa_r+0x734>
 8007298:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800729a:	42a3      	cmp	r3, r4
 800729c:	d100      	bne.n	80072a0 <_dtoa_r+0x5f0>
 800729e:	e742      	b.n	8007126 <_dtoa_r+0x476>
 80072a0:	2200      	movs	r2, #0
 80072a2:	0030      	movs	r0, r6
 80072a4:	0039      	movs	r1, r7
 80072a6:	4b49      	ldr	r3, [pc, #292]	@ (80073cc <_dtoa_r+0x71c>)
 80072a8:	f7fa fa2c 	bl	8001704 <__aeabi_dmul>
 80072ac:	2200      	movs	r2, #0
 80072ae:	0006      	movs	r6, r0
 80072b0:	000f      	movs	r7, r1
 80072b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072b6:	4b45      	ldr	r3, [pc, #276]	@ (80073cc <_dtoa_r+0x71c>)
 80072b8:	f7fa fa24 	bl	8001704 <__aeabi_dmul>
 80072bc:	9416      	str	r4, [sp, #88]	@ 0x58
 80072be:	900a      	str	r0, [sp, #40]	@ 0x28
 80072c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80072c2:	e7c3      	b.n	800724c <_dtoa_r+0x59c>
 80072c4:	0030      	movs	r0, r6
 80072c6:	0039      	movs	r1, r7
 80072c8:	f7fa fa1c 	bl	8001704 <__aeabi_dmul>
 80072cc:	9d08      	ldr	r5, [sp, #32]
 80072ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80072d0:	002b      	movs	r3, r5
 80072d2:	4694      	mov	ip, r2
 80072d4:	9016      	str	r0, [sp, #88]	@ 0x58
 80072d6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80072d8:	4463      	add	r3, ip
 80072da:	9319      	str	r3, [sp, #100]	@ 0x64
 80072dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072e0:	f7fb f896 	bl	8002410 <__aeabi_d2iz>
 80072e4:	0004      	movs	r4, r0
 80072e6:	f7fb f8cf 	bl	8002488 <__aeabi_i2d>
 80072ea:	000b      	movs	r3, r1
 80072ec:	0002      	movs	r2, r0
 80072ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072f2:	f7fa fccf 	bl	8001c94 <__aeabi_dsub>
 80072f6:	3430      	adds	r4, #48	@ 0x30
 80072f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072fa:	702c      	strb	r4, [r5, #0]
 80072fc:	3501      	adds	r5, #1
 80072fe:	0006      	movs	r6, r0
 8007300:	000f      	movs	r7, r1
 8007302:	42ab      	cmp	r3, r5
 8007304:	d129      	bne.n	800735a <_dtoa_r+0x6aa>
 8007306:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007308:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800730a:	9b08      	ldr	r3, [sp, #32]
 800730c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800730e:	469c      	mov	ip, r3
 8007310:	2200      	movs	r2, #0
 8007312:	4b32      	ldr	r3, [pc, #200]	@ (80073dc <_dtoa_r+0x72c>)
 8007314:	4464      	add	r4, ip
 8007316:	f7f9 fa4d 	bl	80007b4 <__aeabi_dadd>
 800731a:	0002      	movs	r2, r0
 800731c:	000b      	movs	r3, r1
 800731e:	0030      	movs	r0, r6
 8007320:	0039      	movs	r1, r7
 8007322:	f7f9 f8a9 	bl	8000478 <__aeabi_dcmpgt>
 8007326:	2800      	cmp	r0, #0
 8007328:	d15c      	bne.n	80073e4 <_dtoa_r+0x734>
 800732a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800732c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800732e:	2000      	movs	r0, #0
 8007330:	492a      	ldr	r1, [pc, #168]	@ (80073dc <_dtoa_r+0x72c>)
 8007332:	f7fa fcaf 	bl	8001c94 <__aeabi_dsub>
 8007336:	0002      	movs	r2, r0
 8007338:	000b      	movs	r3, r1
 800733a:	0030      	movs	r0, r6
 800733c:	0039      	movs	r1, r7
 800733e:	f7f9 f887 	bl	8000450 <__aeabi_dcmplt>
 8007342:	2800      	cmp	r0, #0
 8007344:	d100      	bne.n	8007348 <_dtoa_r+0x698>
 8007346:	e6ee      	b.n	8007126 <_dtoa_r+0x476>
 8007348:	0023      	movs	r3, r4
 800734a:	3c01      	subs	r4, #1
 800734c:	7822      	ldrb	r2, [r4, #0]
 800734e:	2a30      	cmp	r2, #48	@ 0x30
 8007350:	d0fa      	beq.n	8007348 <_dtoa_r+0x698>
 8007352:	001c      	movs	r4, r3
 8007354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007356:	9304      	str	r3, [sp, #16]
 8007358:	e73e      	b.n	80071d8 <_dtoa_r+0x528>
 800735a:	2200      	movs	r2, #0
 800735c:	4b1b      	ldr	r3, [pc, #108]	@ (80073cc <_dtoa_r+0x71c>)
 800735e:	f7fa f9d1 	bl	8001704 <__aeabi_dmul>
 8007362:	900a      	str	r0, [sp, #40]	@ 0x28
 8007364:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007366:	e7b9      	b.n	80072dc <_dtoa_r+0x62c>
 8007368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10c      	bne.n	8007388 <_dtoa_r+0x6d8>
 800736e:	9806      	ldr	r0, [sp, #24]
 8007370:	9907      	ldr	r1, [sp, #28]
 8007372:	2200      	movs	r2, #0
 8007374:	4b18      	ldr	r3, [pc, #96]	@ (80073d8 <_dtoa_r+0x728>)
 8007376:	f7fa f9c5 	bl	8001704 <__aeabi_dmul>
 800737a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800737c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800737e:	f7f9 f885 	bl	800048c <__aeabi_dcmpge>
 8007382:	2800      	cmp	r0, #0
 8007384:	d100      	bne.n	8007388 <_dtoa_r+0x6d8>
 8007386:	e164      	b.n	8007652 <_dtoa_r+0x9a2>
 8007388:	2600      	movs	r6, #0
 800738a:	0037      	movs	r7, r6
 800738c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800738e:	9c08      	ldr	r4, [sp, #32]
 8007390:	43db      	mvns	r3, r3
 8007392:	930c      	str	r3, [sp, #48]	@ 0x30
 8007394:	2300      	movs	r3, #0
 8007396:	9304      	str	r3, [sp, #16]
 8007398:	0031      	movs	r1, r6
 800739a:	9803      	ldr	r0, [sp, #12]
 800739c:	f000 fbc6 	bl	8007b2c <_Bfree>
 80073a0:	2f00      	cmp	r7, #0
 80073a2:	d0d7      	beq.n	8007354 <_dtoa_r+0x6a4>
 80073a4:	9b04      	ldr	r3, [sp, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d005      	beq.n	80073b6 <_dtoa_r+0x706>
 80073aa:	42bb      	cmp	r3, r7
 80073ac:	d003      	beq.n	80073b6 <_dtoa_r+0x706>
 80073ae:	0019      	movs	r1, r3
 80073b0:	9803      	ldr	r0, [sp, #12]
 80073b2:	f000 fbbb 	bl	8007b2c <_Bfree>
 80073b6:	0039      	movs	r1, r7
 80073b8:	9803      	ldr	r0, [sp, #12]
 80073ba:	f000 fbb7 	bl	8007b2c <_Bfree>
 80073be:	e7c9      	b.n	8007354 <_dtoa_r+0x6a4>
 80073c0:	08008fb8 	.word	0x08008fb8
 80073c4:	08008f90 	.word	0x08008f90
 80073c8:	3ff00000 	.word	0x3ff00000
 80073cc:	40240000 	.word	0x40240000
 80073d0:	401c0000 	.word	0x401c0000
 80073d4:	fcc00000 	.word	0xfcc00000
 80073d8:	40140000 	.word	0x40140000
 80073dc:	3fe00000 	.word	0x3fe00000
 80073e0:	9b04      	ldr	r3, [sp, #16]
 80073e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80073e4:	0023      	movs	r3, r4
 80073e6:	001c      	movs	r4, r3
 80073e8:	3b01      	subs	r3, #1
 80073ea:	781a      	ldrb	r2, [r3, #0]
 80073ec:	2a39      	cmp	r2, #57	@ 0x39
 80073ee:	d108      	bne.n	8007402 <_dtoa_r+0x752>
 80073f0:	9a08      	ldr	r2, [sp, #32]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d1f7      	bne.n	80073e6 <_dtoa_r+0x736>
 80073f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80073f8:	9908      	ldr	r1, [sp, #32]
 80073fa:	3201      	adds	r2, #1
 80073fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80073fe:	2230      	movs	r2, #48	@ 0x30
 8007400:	700a      	strb	r2, [r1, #0]
 8007402:	781a      	ldrb	r2, [r3, #0]
 8007404:	3201      	adds	r2, #1
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	e7a4      	b.n	8007354 <_dtoa_r+0x6a4>
 800740a:	2200      	movs	r2, #0
 800740c:	4bc6      	ldr	r3, [pc, #792]	@ (8007728 <_dtoa_r+0xa78>)
 800740e:	f7fa f979 	bl	8001704 <__aeabi_dmul>
 8007412:	2200      	movs	r2, #0
 8007414:	2300      	movs	r3, #0
 8007416:	0006      	movs	r6, r0
 8007418:	000f      	movs	r7, r1
 800741a:	f7f9 f813 	bl	8000444 <__aeabi_dcmpeq>
 800741e:	2800      	cmp	r0, #0
 8007420:	d100      	bne.n	8007424 <_dtoa_r+0x774>
 8007422:	e6a1      	b.n	8007168 <_dtoa_r+0x4b8>
 8007424:	e6d8      	b.n	80071d8 <_dtoa_r+0x528>
 8007426:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007428:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800742a:	9c06      	ldr	r4, [sp, #24]
 800742c:	2f00      	cmp	r7, #0
 800742e:	d014      	beq.n	800745a <_dtoa_r+0x7aa>
 8007430:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007432:	2a01      	cmp	r2, #1
 8007434:	dd00      	ble.n	8007438 <_dtoa_r+0x788>
 8007436:	e0c8      	b.n	80075ca <_dtoa_r+0x91a>
 8007438:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800743a:	2a00      	cmp	r2, #0
 800743c:	d100      	bne.n	8007440 <_dtoa_r+0x790>
 800743e:	e0be      	b.n	80075be <_dtoa_r+0x90e>
 8007440:	4aba      	ldr	r2, [pc, #744]	@ (800772c <_dtoa_r+0xa7c>)
 8007442:	189b      	adds	r3, r3, r2
 8007444:	9a06      	ldr	r2, [sp, #24]
 8007446:	2101      	movs	r1, #1
 8007448:	18d2      	adds	r2, r2, r3
 800744a:	9206      	str	r2, [sp, #24]
 800744c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800744e:	9803      	ldr	r0, [sp, #12]
 8007450:	18d3      	adds	r3, r2, r3
 8007452:	930d      	str	r3, [sp, #52]	@ 0x34
 8007454:	f000 fc22 	bl	8007c9c <__i2b>
 8007458:	0007      	movs	r7, r0
 800745a:	2c00      	cmp	r4, #0
 800745c:	d00e      	beq.n	800747c <_dtoa_r+0x7cc>
 800745e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007460:	2b00      	cmp	r3, #0
 8007462:	dd0b      	ble.n	800747c <_dtoa_r+0x7cc>
 8007464:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007466:	0023      	movs	r3, r4
 8007468:	4294      	cmp	r4, r2
 800746a:	dd00      	ble.n	800746e <_dtoa_r+0x7be>
 800746c:	0013      	movs	r3, r2
 800746e:	9a06      	ldr	r2, [sp, #24]
 8007470:	1ae4      	subs	r4, r4, r3
 8007472:	1ad2      	subs	r2, r2, r3
 8007474:	9206      	str	r2, [sp, #24]
 8007476:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	930d      	str	r3, [sp, #52]	@ 0x34
 800747c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d01f      	beq.n	80074c2 <_dtoa_r+0x812>
 8007482:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007484:	2b00      	cmp	r3, #0
 8007486:	d100      	bne.n	800748a <_dtoa_r+0x7da>
 8007488:	e0b5      	b.n	80075f6 <_dtoa_r+0x946>
 800748a:	2d00      	cmp	r5, #0
 800748c:	d010      	beq.n	80074b0 <_dtoa_r+0x800>
 800748e:	0039      	movs	r1, r7
 8007490:	002a      	movs	r2, r5
 8007492:	9803      	ldr	r0, [sp, #12]
 8007494:	f000 fccc 	bl	8007e30 <__pow5mult>
 8007498:	9a05      	ldr	r2, [sp, #20]
 800749a:	0001      	movs	r1, r0
 800749c:	0007      	movs	r7, r0
 800749e:	9803      	ldr	r0, [sp, #12]
 80074a0:	f000 fc14 	bl	8007ccc <__multiply>
 80074a4:	0006      	movs	r6, r0
 80074a6:	9905      	ldr	r1, [sp, #20]
 80074a8:	9803      	ldr	r0, [sp, #12]
 80074aa:	f000 fb3f 	bl	8007b2c <_Bfree>
 80074ae:	9605      	str	r6, [sp, #20]
 80074b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074b2:	1b5a      	subs	r2, r3, r5
 80074b4:	42ab      	cmp	r3, r5
 80074b6:	d004      	beq.n	80074c2 <_dtoa_r+0x812>
 80074b8:	9905      	ldr	r1, [sp, #20]
 80074ba:	9803      	ldr	r0, [sp, #12]
 80074bc:	f000 fcb8 	bl	8007e30 <__pow5mult>
 80074c0:	9005      	str	r0, [sp, #20]
 80074c2:	2101      	movs	r1, #1
 80074c4:	9803      	ldr	r0, [sp, #12]
 80074c6:	f000 fbe9 	bl	8007c9c <__i2b>
 80074ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074cc:	0006      	movs	r6, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d100      	bne.n	80074d4 <_dtoa_r+0x824>
 80074d2:	e1bc      	b.n	800784e <_dtoa_r+0xb9e>
 80074d4:	001a      	movs	r2, r3
 80074d6:	0001      	movs	r1, r0
 80074d8:	9803      	ldr	r0, [sp, #12]
 80074da:	f000 fca9 	bl	8007e30 <__pow5mult>
 80074de:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80074e0:	0006      	movs	r6, r0
 80074e2:	2500      	movs	r5, #0
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	dc16      	bgt.n	8007516 <_dtoa_r+0x866>
 80074e8:	2500      	movs	r5, #0
 80074ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ec:	42ab      	cmp	r3, r5
 80074ee:	d10e      	bne.n	800750e <_dtoa_r+0x85e>
 80074f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074f2:	031b      	lsls	r3, r3, #12
 80074f4:	42ab      	cmp	r3, r5
 80074f6:	d10a      	bne.n	800750e <_dtoa_r+0x85e>
 80074f8:	4b8d      	ldr	r3, [pc, #564]	@ (8007730 <_dtoa_r+0xa80>)
 80074fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80074fc:	4213      	tst	r3, r2
 80074fe:	d006      	beq.n	800750e <_dtoa_r+0x85e>
 8007500:	9b06      	ldr	r3, [sp, #24]
 8007502:	3501      	adds	r5, #1
 8007504:	3301      	adds	r3, #1
 8007506:	9306      	str	r3, [sp, #24]
 8007508:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800750a:	3301      	adds	r3, #1
 800750c:	930d      	str	r3, [sp, #52]	@ 0x34
 800750e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007510:	2001      	movs	r0, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d008      	beq.n	8007528 <_dtoa_r+0x878>
 8007516:	6933      	ldr	r3, [r6, #16]
 8007518:	3303      	adds	r3, #3
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	18f3      	adds	r3, r6, r3
 800751e:	6858      	ldr	r0, [r3, #4]
 8007520:	f000 fb6c 	bl	8007bfc <__hi0bits>
 8007524:	2320      	movs	r3, #32
 8007526:	1a18      	subs	r0, r3, r0
 8007528:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800752a:	1818      	adds	r0, r3, r0
 800752c:	0002      	movs	r2, r0
 800752e:	231f      	movs	r3, #31
 8007530:	401a      	ands	r2, r3
 8007532:	4218      	tst	r0, r3
 8007534:	d065      	beq.n	8007602 <_dtoa_r+0x952>
 8007536:	3301      	adds	r3, #1
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	2b04      	cmp	r3, #4
 800753c:	dd5d      	ble.n	80075fa <_dtoa_r+0x94a>
 800753e:	231c      	movs	r3, #28
 8007540:	1a9b      	subs	r3, r3, r2
 8007542:	9a06      	ldr	r2, [sp, #24]
 8007544:	18e4      	adds	r4, r4, r3
 8007546:	18d2      	adds	r2, r2, r3
 8007548:	9206      	str	r2, [sp, #24]
 800754a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800754c:	18d3      	adds	r3, r2, r3
 800754e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007550:	9b06      	ldr	r3, [sp, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	dd05      	ble.n	8007562 <_dtoa_r+0x8b2>
 8007556:	001a      	movs	r2, r3
 8007558:	9905      	ldr	r1, [sp, #20]
 800755a:	9803      	ldr	r0, [sp, #12]
 800755c:	f000 fcc4 	bl	8007ee8 <__lshift>
 8007560:	9005      	str	r0, [sp, #20]
 8007562:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007564:	2b00      	cmp	r3, #0
 8007566:	dd05      	ble.n	8007574 <_dtoa_r+0x8c4>
 8007568:	0031      	movs	r1, r6
 800756a:	001a      	movs	r2, r3
 800756c:	9803      	ldr	r0, [sp, #12]
 800756e:	f000 fcbb 	bl	8007ee8 <__lshift>
 8007572:	0006      	movs	r6, r0
 8007574:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007576:	2b00      	cmp	r3, #0
 8007578:	d045      	beq.n	8007606 <_dtoa_r+0x956>
 800757a:	0031      	movs	r1, r6
 800757c:	9805      	ldr	r0, [sp, #20]
 800757e:	f000 fd1f 	bl	8007fc0 <__mcmp>
 8007582:	2800      	cmp	r0, #0
 8007584:	da3f      	bge.n	8007606 <_dtoa_r+0x956>
 8007586:	9b04      	ldr	r3, [sp, #16]
 8007588:	220a      	movs	r2, #10
 800758a:	3b01      	subs	r3, #1
 800758c:	930c      	str	r3, [sp, #48]	@ 0x30
 800758e:	9905      	ldr	r1, [sp, #20]
 8007590:	2300      	movs	r3, #0
 8007592:	9803      	ldr	r0, [sp, #12]
 8007594:	f000 faee 	bl	8007b74 <__multadd>
 8007598:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800759a:	9005      	str	r0, [sp, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d100      	bne.n	80075a2 <_dtoa_r+0x8f2>
 80075a0:	e15c      	b.n	800785c <_dtoa_r+0xbac>
 80075a2:	2300      	movs	r3, #0
 80075a4:	0039      	movs	r1, r7
 80075a6:	220a      	movs	r2, #10
 80075a8:	9803      	ldr	r0, [sp, #12]
 80075aa:	f000 fae3 	bl	8007b74 <__multadd>
 80075ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075b0:	0007      	movs	r7, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dc55      	bgt.n	8007662 <_dtoa_r+0x9b2>
 80075b6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	dc2d      	bgt.n	8007618 <_dtoa_r+0x968>
 80075bc:	e051      	b.n	8007662 <_dtoa_r+0x9b2>
 80075be:	2336      	movs	r3, #54	@ 0x36
 80075c0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80075c2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80075c4:	9c06      	ldr	r4, [sp, #24]
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	e73c      	b.n	8007444 <_dtoa_r+0x794>
 80075ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075cc:	1e5d      	subs	r5, r3, #1
 80075ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075d0:	42ab      	cmp	r3, r5
 80075d2:	db08      	blt.n	80075e6 <_dtoa_r+0x936>
 80075d4:	1b5d      	subs	r5, r3, r5
 80075d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d8:	9c06      	ldr	r4, [sp, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	db00      	blt.n	80075e0 <_dtoa_r+0x930>
 80075de:	e731      	b.n	8007444 <_dtoa_r+0x794>
 80075e0:	1ae4      	subs	r4, r4, r3
 80075e2:	2300      	movs	r3, #0
 80075e4:	e72e      	b.n	8007444 <_dtoa_r+0x794>
 80075e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80075ea:	1aeb      	subs	r3, r5, r3
 80075ec:	18d3      	adds	r3, r2, r3
 80075ee:	950f      	str	r5, [sp, #60]	@ 0x3c
 80075f0:	9314      	str	r3, [sp, #80]	@ 0x50
 80075f2:	2500      	movs	r5, #0
 80075f4:	e7ef      	b.n	80075d6 <_dtoa_r+0x926>
 80075f6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80075f8:	e75e      	b.n	80074b8 <_dtoa_r+0x808>
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	d0a8      	beq.n	8007550 <_dtoa_r+0x8a0>
 80075fe:	331c      	adds	r3, #28
 8007600:	e79f      	b.n	8007542 <_dtoa_r+0x892>
 8007602:	0013      	movs	r3, r2
 8007604:	e7fb      	b.n	80075fe <_dtoa_r+0x94e>
 8007606:	9b04      	ldr	r3, [sp, #16]
 8007608:	930c      	str	r3, [sp, #48]	@ 0x30
 800760a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800760c:	930e      	str	r3, [sp, #56]	@ 0x38
 800760e:	2b00      	cmp	r3, #0
 8007610:	dc23      	bgt.n	800765a <_dtoa_r+0x9aa>
 8007612:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007614:	2b02      	cmp	r3, #2
 8007616:	dd20      	ble.n	800765a <_dtoa_r+0x9aa>
 8007618:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800761a:	2b00      	cmp	r3, #0
 800761c:	d000      	beq.n	8007620 <_dtoa_r+0x970>
 800761e:	e6b5      	b.n	800738c <_dtoa_r+0x6dc>
 8007620:	0031      	movs	r1, r6
 8007622:	2205      	movs	r2, #5
 8007624:	9803      	ldr	r0, [sp, #12]
 8007626:	f000 faa5 	bl	8007b74 <__multadd>
 800762a:	0006      	movs	r6, r0
 800762c:	0001      	movs	r1, r0
 800762e:	9805      	ldr	r0, [sp, #20]
 8007630:	f000 fcc6 	bl	8007fc0 <__mcmp>
 8007634:	2800      	cmp	r0, #0
 8007636:	dc00      	bgt.n	800763a <_dtoa_r+0x98a>
 8007638:	e6a8      	b.n	800738c <_dtoa_r+0x6dc>
 800763a:	9b08      	ldr	r3, [sp, #32]
 800763c:	9a08      	ldr	r2, [sp, #32]
 800763e:	1c5c      	adds	r4, r3, #1
 8007640:	2331      	movs	r3, #49	@ 0x31
 8007642:	7013      	strb	r3, [r2, #0]
 8007644:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007646:	3301      	adds	r3, #1
 8007648:	930c      	str	r3, [sp, #48]	@ 0x30
 800764a:	e6a3      	b.n	8007394 <_dtoa_r+0x6e4>
 800764c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800764e:	0037      	movs	r7, r6
 8007650:	e7f3      	b.n	800763a <_dtoa_r+0x98a>
 8007652:	9b04      	ldr	r3, [sp, #16]
 8007654:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007656:	930c      	str	r3, [sp, #48]	@ 0x30
 8007658:	e7f9      	b.n	800764e <_dtoa_r+0x99e>
 800765a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800765c:	2b00      	cmp	r3, #0
 800765e:	d100      	bne.n	8007662 <_dtoa_r+0x9b2>
 8007660:	e100      	b.n	8007864 <_dtoa_r+0xbb4>
 8007662:	2c00      	cmp	r4, #0
 8007664:	dd05      	ble.n	8007672 <_dtoa_r+0x9c2>
 8007666:	0039      	movs	r1, r7
 8007668:	0022      	movs	r2, r4
 800766a:	9803      	ldr	r0, [sp, #12]
 800766c:	f000 fc3c 	bl	8007ee8 <__lshift>
 8007670:	0007      	movs	r7, r0
 8007672:	0038      	movs	r0, r7
 8007674:	2d00      	cmp	r5, #0
 8007676:	d018      	beq.n	80076aa <_dtoa_r+0x9fa>
 8007678:	6879      	ldr	r1, [r7, #4]
 800767a:	9803      	ldr	r0, [sp, #12]
 800767c:	f000 fa12 	bl	8007aa4 <_Balloc>
 8007680:	1e04      	subs	r4, r0, #0
 8007682:	d105      	bne.n	8007690 <_dtoa_r+0x9e0>
 8007684:	0022      	movs	r2, r4
 8007686:	4b2b      	ldr	r3, [pc, #172]	@ (8007734 <_dtoa_r+0xa84>)
 8007688:	482b      	ldr	r0, [pc, #172]	@ (8007738 <_dtoa_r+0xa88>)
 800768a:	492c      	ldr	r1, [pc, #176]	@ (800773c <_dtoa_r+0xa8c>)
 800768c:	f7ff fb25 	bl	8006cda <_dtoa_r+0x2a>
 8007690:	0039      	movs	r1, r7
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	310c      	adds	r1, #12
 8007696:	3202      	adds	r2, #2
 8007698:	0092      	lsls	r2, r2, #2
 800769a:	300c      	adds	r0, #12
 800769c:	f000 ffda 	bl	8008654 <memcpy>
 80076a0:	2201      	movs	r2, #1
 80076a2:	0021      	movs	r1, r4
 80076a4:	9803      	ldr	r0, [sp, #12]
 80076a6:	f000 fc1f 	bl	8007ee8 <__lshift>
 80076aa:	9b08      	ldr	r3, [sp, #32]
 80076ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076ae:	9306      	str	r3, [sp, #24]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	189b      	adds	r3, r3, r2
 80076b4:	2201      	movs	r2, #1
 80076b6:	9704      	str	r7, [sp, #16]
 80076b8:	0007      	movs	r7, r0
 80076ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80076bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076be:	4013      	ands	r3, r2
 80076c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80076c2:	0031      	movs	r1, r6
 80076c4:	9805      	ldr	r0, [sp, #20]
 80076c6:	f7ff fa65 	bl	8006b94 <quorem>
 80076ca:	9904      	ldr	r1, [sp, #16]
 80076cc:	0005      	movs	r5, r0
 80076ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80076d0:	9805      	ldr	r0, [sp, #20]
 80076d2:	f000 fc75 	bl	8007fc0 <__mcmp>
 80076d6:	003a      	movs	r2, r7
 80076d8:	900d      	str	r0, [sp, #52]	@ 0x34
 80076da:	0031      	movs	r1, r6
 80076dc:	9803      	ldr	r0, [sp, #12]
 80076de:	f000 fc8b 	bl	8007ff8 <__mdiff>
 80076e2:	2201      	movs	r2, #1
 80076e4:	68c3      	ldr	r3, [r0, #12]
 80076e6:	0004      	movs	r4, r0
 80076e8:	3530      	adds	r5, #48	@ 0x30
 80076ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d104      	bne.n	80076fa <_dtoa_r+0xa4a>
 80076f0:	0001      	movs	r1, r0
 80076f2:	9805      	ldr	r0, [sp, #20]
 80076f4:	f000 fc64 	bl	8007fc0 <__mcmp>
 80076f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80076fa:	0021      	movs	r1, r4
 80076fc:	9803      	ldr	r0, [sp, #12]
 80076fe:	f000 fa15 	bl	8007b2c <_Bfree>
 8007702:	9b06      	ldr	r3, [sp, #24]
 8007704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007706:	1c5c      	adds	r4, r3, #1
 8007708:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800770a:	4313      	orrs	r3, r2
 800770c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800770e:	4313      	orrs	r3, r2
 8007710:	d116      	bne.n	8007740 <_dtoa_r+0xa90>
 8007712:	2d39      	cmp	r5, #57	@ 0x39
 8007714:	d02f      	beq.n	8007776 <_dtoa_r+0xac6>
 8007716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007718:	2b00      	cmp	r3, #0
 800771a:	dd01      	ble.n	8007720 <_dtoa_r+0xa70>
 800771c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800771e:	3531      	adds	r5, #49	@ 0x31
 8007720:	9b06      	ldr	r3, [sp, #24]
 8007722:	701d      	strb	r5, [r3, #0]
 8007724:	e638      	b.n	8007398 <_dtoa_r+0x6e8>
 8007726:	46c0      	nop			@ (mov r8, r8)
 8007728:	40240000 	.word	0x40240000
 800772c:	00000433 	.word	0x00000433
 8007730:	7ff00000 	.word	0x7ff00000
 8007734:	08008f18 	.word	0x08008f18
 8007738:	08008ec0 	.word	0x08008ec0
 800773c:	000002ef 	.word	0x000002ef
 8007740:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007742:	2b00      	cmp	r3, #0
 8007744:	db04      	blt.n	8007750 <_dtoa_r+0xaa0>
 8007746:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007748:	4313      	orrs	r3, r2
 800774a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800774c:	4313      	orrs	r3, r2
 800774e:	d11e      	bne.n	800778e <_dtoa_r+0xade>
 8007750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	dde4      	ble.n	8007720 <_dtoa_r+0xa70>
 8007756:	9905      	ldr	r1, [sp, #20]
 8007758:	2201      	movs	r2, #1
 800775a:	9803      	ldr	r0, [sp, #12]
 800775c:	f000 fbc4 	bl	8007ee8 <__lshift>
 8007760:	0031      	movs	r1, r6
 8007762:	9005      	str	r0, [sp, #20]
 8007764:	f000 fc2c 	bl	8007fc0 <__mcmp>
 8007768:	2800      	cmp	r0, #0
 800776a:	dc02      	bgt.n	8007772 <_dtoa_r+0xac2>
 800776c:	d1d8      	bne.n	8007720 <_dtoa_r+0xa70>
 800776e:	07eb      	lsls	r3, r5, #31
 8007770:	d5d6      	bpl.n	8007720 <_dtoa_r+0xa70>
 8007772:	2d39      	cmp	r5, #57	@ 0x39
 8007774:	d1d2      	bne.n	800771c <_dtoa_r+0xa6c>
 8007776:	2339      	movs	r3, #57	@ 0x39
 8007778:	9a06      	ldr	r2, [sp, #24]
 800777a:	7013      	strb	r3, [r2, #0]
 800777c:	0023      	movs	r3, r4
 800777e:	001c      	movs	r4, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	2a39      	cmp	r2, #57	@ 0x39
 8007786:	d04f      	beq.n	8007828 <_dtoa_r+0xb78>
 8007788:	3201      	adds	r2, #1
 800778a:	701a      	strb	r2, [r3, #0]
 800778c:	e604      	b.n	8007398 <_dtoa_r+0x6e8>
 800778e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	dd03      	ble.n	800779c <_dtoa_r+0xaec>
 8007794:	2d39      	cmp	r5, #57	@ 0x39
 8007796:	d0ee      	beq.n	8007776 <_dtoa_r+0xac6>
 8007798:	3501      	adds	r5, #1
 800779a:	e7c1      	b.n	8007720 <_dtoa_r+0xa70>
 800779c:	9b06      	ldr	r3, [sp, #24]
 800779e:	9a06      	ldr	r2, [sp, #24]
 80077a0:	701d      	strb	r5, [r3, #0]
 80077a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d02a      	beq.n	80077fe <_dtoa_r+0xb4e>
 80077a8:	2300      	movs	r3, #0
 80077aa:	220a      	movs	r2, #10
 80077ac:	9905      	ldr	r1, [sp, #20]
 80077ae:	9803      	ldr	r0, [sp, #12]
 80077b0:	f000 f9e0 	bl	8007b74 <__multadd>
 80077b4:	9b04      	ldr	r3, [sp, #16]
 80077b6:	9005      	str	r0, [sp, #20]
 80077b8:	42bb      	cmp	r3, r7
 80077ba:	d109      	bne.n	80077d0 <_dtoa_r+0xb20>
 80077bc:	2300      	movs	r3, #0
 80077be:	220a      	movs	r2, #10
 80077c0:	9904      	ldr	r1, [sp, #16]
 80077c2:	9803      	ldr	r0, [sp, #12]
 80077c4:	f000 f9d6 	bl	8007b74 <__multadd>
 80077c8:	9004      	str	r0, [sp, #16]
 80077ca:	0007      	movs	r7, r0
 80077cc:	9406      	str	r4, [sp, #24]
 80077ce:	e778      	b.n	80076c2 <_dtoa_r+0xa12>
 80077d0:	9904      	ldr	r1, [sp, #16]
 80077d2:	2300      	movs	r3, #0
 80077d4:	220a      	movs	r2, #10
 80077d6:	9803      	ldr	r0, [sp, #12]
 80077d8:	f000 f9cc 	bl	8007b74 <__multadd>
 80077dc:	2300      	movs	r3, #0
 80077de:	9004      	str	r0, [sp, #16]
 80077e0:	220a      	movs	r2, #10
 80077e2:	0039      	movs	r1, r7
 80077e4:	9803      	ldr	r0, [sp, #12]
 80077e6:	f000 f9c5 	bl	8007b74 <__multadd>
 80077ea:	e7ee      	b.n	80077ca <_dtoa_r+0xb1a>
 80077ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ee:	2401      	movs	r4, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	dd00      	ble.n	80077f6 <_dtoa_r+0xb46>
 80077f4:	001c      	movs	r4, r3
 80077f6:	9b08      	ldr	r3, [sp, #32]
 80077f8:	191c      	adds	r4, r3, r4
 80077fa:	2300      	movs	r3, #0
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	9905      	ldr	r1, [sp, #20]
 8007800:	2201      	movs	r2, #1
 8007802:	9803      	ldr	r0, [sp, #12]
 8007804:	f000 fb70 	bl	8007ee8 <__lshift>
 8007808:	0031      	movs	r1, r6
 800780a:	9005      	str	r0, [sp, #20]
 800780c:	f000 fbd8 	bl	8007fc0 <__mcmp>
 8007810:	2800      	cmp	r0, #0
 8007812:	dcb3      	bgt.n	800777c <_dtoa_r+0xacc>
 8007814:	d101      	bne.n	800781a <_dtoa_r+0xb6a>
 8007816:	07ed      	lsls	r5, r5, #31
 8007818:	d4b0      	bmi.n	800777c <_dtoa_r+0xacc>
 800781a:	0023      	movs	r3, r4
 800781c:	001c      	movs	r4, r3
 800781e:	3b01      	subs	r3, #1
 8007820:	781a      	ldrb	r2, [r3, #0]
 8007822:	2a30      	cmp	r2, #48	@ 0x30
 8007824:	d0fa      	beq.n	800781c <_dtoa_r+0xb6c>
 8007826:	e5b7      	b.n	8007398 <_dtoa_r+0x6e8>
 8007828:	9a08      	ldr	r2, [sp, #32]
 800782a:	429a      	cmp	r2, r3
 800782c:	d1a7      	bne.n	800777e <_dtoa_r+0xace>
 800782e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007830:	3301      	adds	r3, #1
 8007832:	930c      	str	r3, [sp, #48]	@ 0x30
 8007834:	2331      	movs	r3, #49	@ 0x31
 8007836:	7013      	strb	r3, [r2, #0]
 8007838:	e5ae      	b.n	8007398 <_dtoa_r+0x6e8>
 800783a:	4b15      	ldr	r3, [pc, #84]	@ (8007890 <_dtoa_r+0xbe0>)
 800783c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800783e:	9308      	str	r3, [sp, #32]
 8007840:	4b14      	ldr	r3, [pc, #80]	@ (8007894 <_dtoa_r+0xbe4>)
 8007842:	2a00      	cmp	r2, #0
 8007844:	d001      	beq.n	800784a <_dtoa_r+0xb9a>
 8007846:	f7ff fa7b 	bl	8006d40 <_dtoa_r+0x90>
 800784a:	f7ff fa7b 	bl	8006d44 <_dtoa_r+0x94>
 800784e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007850:	2b01      	cmp	r3, #1
 8007852:	dc00      	bgt.n	8007856 <_dtoa_r+0xba6>
 8007854:	e648      	b.n	80074e8 <_dtoa_r+0x838>
 8007856:	2001      	movs	r0, #1
 8007858:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800785a:	e665      	b.n	8007528 <_dtoa_r+0x878>
 800785c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800785e:	2b00      	cmp	r3, #0
 8007860:	dc00      	bgt.n	8007864 <_dtoa_r+0xbb4>
 8007862:	e6d6      	b.n	8007612 <_dtoa_r+0x962>
 8007864:	2400      	movs	r4, #0
 8007866:	0031      	movs	r1, r6
 8007868:	9805      	ldr	r0, [sp, #20]
 800786a:	f7ff f993 	bl	8006b94 <quorem>
 800786e:	9b08      	ldr	r3, [sp, #32]
 8007870:	3030      	adds	r0, #48	@ 0x30
 8007872:	5518      	strb	r0, [r3, r4]
 8007874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007876:	3401      	adds	r4, #1
 8007878:	0005      	movs	r5, r0
 800787a:	429c      	cmp	r4, r3
 800787c:	dab6      	bge.n	80077ec <_dtoa_r+0xb3c>
 800787e:	2300      	movs	r3, #0
 8007880:	220a      	movs	r2, #10
 8007882:	9905      	ldr	r1, [sp, #20]
 8007884:	9803      	ldr	r0, [sp, #12]
 8007886:	f000 f975 	bl	8007b74 <__multadd>
 800788a:	9005      	str	r0, [sp, #20]
 800788c:	e7eb      	b.n	8007866 <_dtoa_r+0xbb6>
 800788e:	46c0      	nop			@ (mov r8, r8)
 8007890:	08008e9c 	.word	0x08008e9c
 8007894:	08008ea4 	.word	0x08008ea4

08007898 <_free_r>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	0005      	movs	r5, r0
 800789c:	1e0c      	subs	r4, r1, #0
 800789e:	d010      	beq.n	80078c2 <_free_r+0x2a>
 80078a0:	3c04      	subs	r4, #4
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	da00      	bge.n	80078aa <_free_r+0x12>
 80078a8:	18e4      	adds	r4, r4, r3
 80078aa:	0028      	movs	r0, r5
 80078ac:	f000 f8ea 	bl	8007a84 <__malloc_lock>
 80078b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007928 <_free_r+0x90>)
 80078b2:	6813      	ldr	r3, [r2, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d105      	bne.n	80078c4 <_free_r+0x2c>
 80078b8:	6063      	str	r3, [r4, #4]
 80078ba:	6014      	str	r4, [r2, #0]
 80078bc:	0028      	movs	r0, r5
 80078be:	f000 f8e9 	bl	8007a94 <__malloc_unlock>
 80078c2:	bd70      	pop	{r4, r5, r6, pc}
 80078c4:	42a3      	cmp	r3, r4
 80078c6:	d908      	bls.n	80078da <_free_r+0x42>
 80078c8:	6820      	ldr	r0, [r4, #0]
 80078ca:	1821      	adds	r1, r4, r0
 80078cc:	428b      	cmp	r3, r1
 80078ce:	d1f3      	bne.n	80078b8 <_free_r+0x20>
 80078d0:	6819      	ldr	r1, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	1809      	adds	r1, r1, r0
 80078d6:	6021      	str	r1, [r4, #0]
 80078d8:	e7ee      	b.n	80078b8 <_free_r+0x20>
 80078da:	001a      	movs	r2, r3
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <_free_r+0x4e>
 80078e2:	42a3      	cmp	r3, r4
 80078e4:	d9f9      	bls.n	80078da <_free_r+0x42>
 80078e6:	6811      	ldr	r1, [r2, #0]
 80078e8:	1850      	adds	r0, r2, r1
 80078ea:	42a0      	cmp	r0, r4
 80078ec:	d10b      	bne.n	8007906 <_free_r+0x6e>
 80078ee:	6820      	ldr	r0, [r4, #0]
 80078f0:	1809      	adds	r1, r1, r0
 80078f2:	1850      	adds	r0, r2, r1
 80078f4:	6011      	str	r1, [r2, #0]
 80078f6:	4283      	cmp	r3, r0
 80078f8:	d1e0      	bne.n	80078bc <_free_r+0x24>
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	1841      	adds	r1, r0, r1
 8007900:	6011      	str	r1, [r2, #0]
 8007902:	6053      	str	r3, [r2, #4]
 8007904:	e7da      	b.n	80078bc <_free_r+0x24>
 8007906:	42a0      	cmp	r0, r4
 8007908:	d902      	bls.n	8007910 <_free_r+0x78>
 800790a:	230c      	movs	r3, #12
 800790c:	602b      	str	r3, [r5, #0]
 800790e:	e7d5      	b.n	80078bc <_free_r+0x24>
 8007910:	6820      	ldr	r0, [r4, #0]
 8007912:	1821      	adds	r1, r4, r0
 8007914:	428b      	cmp	r3, r1
 8007916:	d103      	bne.n	8007920 <_free_r+0x88>
 8007918:	6819      	ldr	r1, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	1809      	adds	r1, r1, r0
 800791e:	6021      	str	r1, [r4, #0]
 8007920:	6063      	str	r3, [r4, #4]
 8007922:	6054      	str	r4, [r2, #4]
 8007924:	e7ca      	b.n	80078bc <_free_r+0x24>
 8007926:	46c0      	nop			@ (mov r8, r8)
 8007928:	20000550 	.word	0x20000550

0800792c <malloc>:
 800792c:	b510      	push	{r4, lr}
 800792e:	4b03      	ldr	r3, [pc, #12]	@ (800793c <malloc+0x10>)
 8007930:	0001      	movs	r1, r0
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	f000 f826 	bl	8007984 <_malloc_r>
 8007938:	bd10      	pop	{r4, pc}
 800793a:	46c0      	nop			@ (mov r8, r8)
 800793c:	20000018 	.word	0x20000018

08007940 <sbrk_aligned>:
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	4e0f      	ldr	r6, [pc, #60]	@ (8007980 <sbrk_aligned+0x40>)
 8007944:	000d      	movs	r5, r1
 8007946:	6831      	ldr	r1, [r6, #0]
 8007948:	0004      	movs	r4, r0
 800794a:	2900      	cmp	r1, #0
 800794c:	d102      	bne.n	8007954 <sbrk_aligned+0x14>
 800794e:	f000 fe6f 	bl	8008630 <_sbrk_r>
 8007952:	6030      	str	r0, [r6, #0]
 8007954:	0029      	movs	r1, r5
 8007956:	0020      	movs	r0, r4
 8007958:	f000 fe6a 	bl	8008630 <_sbrk_r>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d103      	bne.n	8007968 <sbrk_aligned+0x28>
 8007960:	2501      	movs	r5, #1
 8007962:	426d      	negs	r5, r5
 8007964:	0028      	movs	r0, r5
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	2303      	movs	r3, #3
 800796a:	1cc5      	adds	r5, r0, #3
 800796c:	439d      	bics	r5, r3
 800796e:	42a8      	cmp	r0, r5
 8007970:	d0f8      	beq.n	8007964 <sbrk_aligned+0x24>
 8007972:	1a29      	subs	r1, r5, r0
 8007974:	0020      	movs	r0, r4
 8007976:	f000 fe5b 	bl	8008630 <_sbrk_r>
 800797a:	3001      	adds	r0, #1
 800797c:	d1f2      	bne.n	8007964 <sbrk_aligned+0x24>
 800797e:	e7ef      	b.n	8007960 <sbrk_aligned+0x20>
 8007980:	2000054c 	.word	0x2000054c

08007984 <_malloc_r>:
 8007984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007986:	2203      	movs	r2, #3
 8007988:	1ccb      	adds	r3, r1, #3
 800798a:	4393      	bics	r3, r2
 800798c:	3308      	adds	r3, #8
 800798e:	0005      	movs	r5, r0
 8007990:	001f      	movs	r7, r3
 8007992:	2b0c      	cmp	r3, #12
 8007994:	d234      	bcs.n	8007a00 <_malloc_r+0x7c>
 8007996:	270c      	movs	r7, #12
 8007998:	42b9      	cmp	r1, r7
 800799a:	d833      	bhi.n	8007a04 <_malloc_r+0x80>
 800799c:	0028      	movs	r0, r5
 800799e:	f000 f871 	bl	8007a84 <__malloc_lock>
 80079a2:	4e37      	ldr	r6, [pc, #220]	@ (8007a80 <_malloc_r+0xfc>)
 80079a4:	6833      	ldr	r3, [r6, #0]
 80079a6:	001c      	movs	r4, r3
 80079a8:	2c00      	cmp	r4, #0
 80079aa:	d12f      	bne.n	8007a0c <_malloc_r+0x88>
 80079ac:	0039      	movs	r1, r7
 80079ae:	0028      	movs	r0, r5
 80079b0:	f7ff ffc6 	bl	8007940 <sbrk_aligned>
 80079b4:	0004      	movs	r4, r0
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	d15f      	bne.n	8007a7a <_malloc_r+0xf6>
 80079ba:	6834      	ldr	r4, [r6, #0]
 80079bc:	9400      	str	r4, [sp, #0]
 80079be:	9b00      	ldr	r3, [sp, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d14a      	bne.n	8007a5a <_malloc_r+0xd6>
 80079c4:	2c00      	cmp	r4, #0
 80079c6:	d052      	beq.n	8007a6e <_malloc_r+0xea>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	0028      	movs	r0, r5
 80079cc:	18e3      	adds	r3, r4, r3
 80079ce:	9900      	ldr	r1, [sp, #0]
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	f000 fe2d 	bl	8008630 <_sbrk_r>
 80079d6:	9b01      	ldr	r3, [sp, #4]
 80079d8:	4283      	cmp	r3, r0
 80079da:	d148      	bne.n	8007a6e <_malloc_r+0xea>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	0028      	movs	r0, r5
 80079e0:	1aff      	subs	r7, r7, r3
 80079e2:	0039      	movs	r1, r7
 80079e4:	f7ff ffac 	bl	8007940 <sbrk_aligned>
 80079e8:	3001      	adds	r0, #1
 80079ea:	d040      	beq.n	8007a6e <_malloc_r+0xea>
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	19db      	adds	r3, r3, r7
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	6833      	ldr	r3, [r6, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	2a00      	cmp	r2, #0
 80079f8:	d133      	bne.n	8007a62 <_malloc_r+0xde>
 80079fa:	9b00      	ldr	r3, [sp, #0]
 80079fc:	6033      	str	r3, [r6, #0]
 80079fe:	e019      	b.n	8007a34 <_malloc_r+0xb0>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	dac9      	bge.n	8007998 <_malloc_r+0x14>
 8007a04:	230c      	movs	r3, #12
 8007a06:	602b      	str	r3, [r5, #0]
 8007a08:	2000      	movs	r0, #0
 8007a0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a0c:	6821      	ldr	r1, [r4, #0]
 8007a0e:	1bc9      	subs	r1, r1, r7
 8007a10:	d420      	bmi.n	8007a54 <_malloc_r+0xd0>
 8007a12:	290b      	cmp	r1, #11
 8007a14:	d90a      	bls.n	8007a2c <_malloc_r+0xa8>
 8007a16:	19e2      	adds	r2, r4, r7
 8007a18:	6027      	str	r7, [r4, #0]
 8007a1a:	42a3      	cmp	r3, r4
 8007a1c:	d104      	bne.n	8007a28 <_malloc_r+0xa4>
 8007a1e:	6032      	str	r2, [r6, #0]
 8007a20:	6863      	ldr	r3, [r4, #4]
 8007a22:	6011      	str	r1, [r2, #0]
 8007a24:	6053      	str	r3, [r2, #4]
 8007a26:	e005      	b.n	8007a34 <_malloc_r+0xb0>
 8007a28:	605a      	str	r2, [r3, #4]
 8007a2a:	e7f9      	b.n	8007a20 <_malloc_r+0x9c>
 8007a2c:	6862      	ldr	r2, [r4, #4]
 8007a2e:	42a3      	cmp	r3, r4
 8007a30:	d10e      	bne.n	8007a50 <_malloc_r+0xcc>
 8007a32:	6032      	str	r2, [r6, #0]
 8007a34:	0028      	movs	r0, r5
 8007a36:	f000 f82d 	bl	8007a94 <__malloc_unlock>
 8007a3a:	0020      	movs	r0, r4
 8007a3c:	2207      	movs	r2, #7
 8007a3e:	300b      	adds	r0, #11
 8007a40:	1d23      	adds	r3, r4, #4
 8007a42:	4390      	bics	r0, r2
 8007a44:	1ac2      	subs	r2, r0, r3
 8007a46:	4298      	cmp	r0, r3
 8007a48:	d0df      	beq.n	8007a0a <_malloc_r+0x86>
 8007a4a:	1a1b      	subs	r3, r3, r0
 8007a4c:	50a3      	str	r3, [r4, r2]
 8007a4e:	e7dc      	b.n	8007a0a <_malloc_r+0x86>
 8007a50:	605a      	str	r2, [r3, #4]
 8007a52:	e7ef      	b.n	8007a34 <_malloc_r+0xb0>
 8007a54:	0023      	movs	r3, r4
 8007a56:	6864      	ldr	r4, [r4, #4]
 8007a58:	e7a6      	b.n	80079a8 <_malloc_r+0x24>
 8007a5a:	9c00      	ldr	r4, [sp, #0]
 8007a5c:	6863      	ldr	r3, [r4, #4]
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	e7ad      	b.n	80079be <_malloc_r+0x3a>
 8007a62:	001a      	movs	r2, r3
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	42a3      	cmp	r3, r4
 8007a68:	d1fb      	bne.n	8007a62 <_malloc_r+0xde>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e7da      	b.n	8007a24 <_malloc_r+0xa0>
 8007a6e:	230c      	movs	r3, #12
 8007a70:	0028      	movs	r0, r5
 8007a72:	602b      	str	r3, [r5, #0]
 8007a74:	f000 f80e 	bl	8007a94 <__malloc_unlock>
 8007a78:	e7c6      	b.n	8007a08 <_malloc_r+0x84>
 8007a7a:	6007      	str	r7, [r0, #0]
 8007a7c:	e7da      	b.n	8007a34 <_malloc_r+0xb0>
 8007a7e:	46c0      	nop			@ (mov r8, r8)
 8007a80:	20000550 	.word	0x20000550

08007a84 <__malloc_lock>:
 8007a84:	b510      	push	{r4, lr}
 8007a86:	4802      	ldr	r0, [pc, #8]	@ (8007a90 <__malloc_lock+0xc>)
 8007a88:	f7ff f877 	bl	8006b7a <__retarget_lock_acquire_recursive>
 8007a8c:	bd10      	pop	{r4, pc}
 8007a8e:	46c0      	nop			@ (mov r8, r8)
 8007a90:	20000548 	.word	0x20000548

08007a94 <__malloc_unlock>:
 8007a94:	b510      	push	{r4, lr}
 8007a96:	4802      	ldr	r0, [pc, #8]	@ (8007aa0 <__malloc_unlock+0xc>)
 8007a98:	f7ff f870 	bl	8006b7c <__retarget_lock_release_recursive>
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	46c0      	nop			@ (mov r8, r8)
 8007aa0:	20000548 	.word	0x20000548

08007aa4 <_Balloc>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	69c5      	ldr	r5, [r0, #28]
 8007aa8:	0006      	movs	r6, r0
 8007aaa:	000c      	movs	r4, r1
 8007aac:	2d00      	cmp	r5, #0
 8007aae:	d10e      	bne.n	8007ace <_Balloc+0x2a>
 8007ab0:	2010      	movs	r0, #16
 8007ab2:	f7ff ff3b 	bl	800792c <malloc>
 8007ab6:	1e02      	subs	r2, r0, #0
 8007ab8:	61f0      	str	r0, [r6, #28]
 8007aba:	d104      	bne.n	8007ac6 <_Balloc+0x22>
 8007abc:	216b      	movs	r1, #107	@ 0x6b
 8007abe:	4b19      	ldr	r3, [pc, #100]	@ (8007b24 <_Balloc+0x80>)
 8007ac0:	4819      	ldr	r0, [pc, #100]	@ (8007b28 <_Balloc+0x84>)
 8007ac2:	f000 fdd1 	bl	8008668 <__assert_func>
 8007ac6:	6045      	str	r5, [r0, #4]
 8007ac8:	6085      	str	r5, [r0, #8]
 8007aca:	6005      	str	r5, [r0, #0]
 8007acc:	60c5      	str	r5, [r0, #12]
 8007ace:	69f5      	ldr	r5, [r6, #28]
 8007ad0:	68eb      	ldr	r3, [r5, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d013      	beq.n	8007afe <_Balloc+0x5a>
 8007ad6:	69f3      	ldr	r3, [r6, #28]
 8007ad8:	00a2      	lsls	r2, r4, #2
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	189b      	adds	r3, r3, r2
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d118      	bne.n	8007b16 <_Balloc+0x72>
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	000d      	movs	r5, r1
 8007ae8:	40a5      	lsls	r5, r4
 8007aea:	1d6a      	adds	r2, r5, #5
 8007aec:	0030      	movs	r0, r6
 8007aee:	0092      	lsls	r2, r2, #2
 8007af0:	f000 fdd8 	bl	80086a4 <_calloc_r>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d00c      	beq.n	8007b12 <_Balloc+0x6e>
 8007af8:	6044      	str	r4, [r0, #4]
 8007afa:	6085      	str	r5, [r0, #8]
 8007afc:	e00d      	b.n	8007b1a <_Balloc+0x76>
 8007afe:	2221      	movs	r2, #33	@ 0x21
 8007b00:	2104      	movs	r1, #4
 8007b02:	0030      	movs	r0, r6
 8007b04:	f000 fdce 	bl	80086a4 <_calloc_r>
 8007b08:	69f3      	ldr	r3, [r6, #28]
 8007b0a:	60e8      	str	r0, [r5, #12]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e1      	bne.n	8007ad6 <_Balloc+0x32>
 8007b12:	2000      	movs	r0, #0
 8007b14:	bd70      	pop	{r4, r5, r6, pc}
 8007b16:	6802      	ldr	r2, [r0, #0]
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	6103      	str	r3, [r0, #16]
 8007b1e:	60c3      	str	r3, [r0, #12]
 8007b20:	e7f8      	b.n	8007b14 <_Balloc+0x70>
 8007b22:	46c0      	nop			@ (mov r8, r8)
 8007b24:	08008ea9 	.word	0x08008ea9
 8007b28:	08008f29 	.word	0x08008f29

08007b2c <_Bfree>:
 8007b2c:	b570      	push	{r4, r5, r6, lr}
 8007b2e:	69c6      	ldr	r6, [r0, #28]
 8007b30:	0005      	movs	r5, r0
 8007b32:	000c      	movs	r4, r1
 8007b34:	2e00      	cmp	r6, #0
 8007b36:	d10e      	bne.n	8007b56 <_Bfree+0x2a>
 8007b38:	2010      	movs	r0, #16
 8007b3a:	f7ff fef7 	bl	800792c <malloc>
 8007b3e:	1e02      	subs	r2, r0, #0
 8007b40:	61e8      	str	r0, [r5, #28]
 8007b42:	d104      	bne.n	8007b4e <_Bfree+0x22>
 8007b44:	218f      	movs	r1, #143	@ 0x8f
 8007b46:	4b09      	ldr	r3, [pc, #36]	@ (8007b6c <_Bfree+0x40>)
 8007b48:	4809      	ldr	r0, [pc, #36]	@ (8007b70 <_Bfree+0x44>)
 8007b4a:	f000 fd8d 	bl	8008668 <__assert_func>
 8007b4e:	6046      	str	r6, [r0, #4]
 8007b50:	6086      	str	r6, [r0, #8]
 8007b52:	6006      	str	r6, [r0, #0]
 8007b54:	60c6      	str	r6, [r0, #12]
 8007b56:	2c00      	cmp	r4, #0
 8007b58:	d007      	beq.n	8007b6a <_Bfree+0x3e>
 8007b5a:	69eb      	ldr	r3, [r5, #28]
 8007b5c:	6862      	ldr	r2, [r4, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	0092      	lsls	r2, r2, #2
 8007b62:	189b      	adds	r3, r3, r2
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	6022      	str	r2, [r4, #0]
 8007b68:	601c      	str	r4, [r3, #0]
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	08008ea9 	.word	0x08008ea9
 8007b70:	08008f29 	.word	0x08008f29

08007b74 <__multadd>:
 8007b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b76:	000f      	movs	r7, r1
 8007b78:	9001      	str	r0, [sp, #4]
 8007b7a:	000c      	movs	r4, r1
 8007b7c:	001e      	movs	r6, r3
 8007b7e:	2000      	movs	r0, #0
 8007b80:	690d      	ldr	r5, [r1, #16]
 8007b82:	3714      	adds	r7, #20
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	3001      	adds	r0, #1
 8007b88:	b299      	uxth	r1, r3
 8007b8a:	4351      	muls	r1, r2
 8007b8c:	0c1b      	lsrs	r3, r3, #16
 8007b8e:	4353      	muls	r3, r2
 8007b90:	1989      	adds	r1, r1, r6
 8007b92:	0c0e      	lsrs	r6, r1, #16
 8007b94:	199b      	adds	r3, r3, r6
 8007b96:	0c1e      	lsrs	r6, r3, #16
 8007b98:	b289      	uxth	r1, r1
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	185b      	adds	r3, r3, r1
 8007b9e:	c708      	stmia	r7!, {r3}
 8007ba0:	4285      	cmp	r5, r0
 8007ba2:	dcef      	bgt.n	8007b84 <__multadd+0x10>
 8007ba4:	2e00      	cmp	r6, #0
 8007ba6:	d022      	beq.n	8007bee <__multadd+0x7a>
 8007ba8:	68a3      	ldr	r3, [r4, #8]
 8007baa:	42ab      	cmp	r3, r5
 8007bac:	dc19      	bgt.n	8007be2 <__multadd+0x6e>
 8007bae:	6861      	ldr	r1, [r4, #4]
 8007bb0:	9801      	ldr	r0, [sp, #4]
 8007bb2:	3101      	adds	r1, #1
 8007bb4:	f7ff ff76 	bl	8007aa4 <_Balloc>
 8007bb8:	1e07      	subs	r7, r0, #0
 8007bba:	d105      	bne.n	8007bc8 <__multadd+0x54>
 8007bbc:	003a      	movs	r2, r7
 8007bbe:	21ba      	movs	r1, #186	@ 0xba
 8007bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf4 <__multadd+0x80>)
 8007bc2:	480d      	ldr	r0, [pc, #52]	@ (8007bf8 <__multadd+0x84>)
 8007bc4:	f000 fd50 	bl	8008668 <__assert_func>
 8007bc8:	0021      	movs	r1, r4
 8007bca:	6922      	ldr	r2, [r4, #16]
 8007bcc:	310c      	adds	r1, #12
 8007bce:	3202      	adds	r2, #2
 8007bd0:	0092      	lsls	r2, r2, #2
 8007bd2:	300c      	adds	r0, #12
 8007bd4:	f000 fd3e 	bl	8008654 <memcpy>
 8007bd8:	0021      	movs	r1, r4
 8007bda:	9801      	ldr	r0, [sp, #4]
 8007bdc:	f7ff ffa6 	bl	8007b2c <_Bfree>
 8007be0:	003c      	movs	r4, r7
 8007be2:	1d2b      	adds	r3, r5, #4
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	18e3      	adds	r3, r4, r3
 8007be8:	3501      	adds	r5, #1
 8007bea:	605e      	str	r6, [r3, #4]
 8007bec:	6125      	str	r5, [r4, #16]
 8007bee:	0020      	movs	r0, r4
 8007bf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007bf2:	46c0      	nop			@ (mov r8, r8)
 8007bf4:	08008f18 	.word	0x08008f18
 8007bf8:	08008f29 	.word	0x08008f29

08007bfc <__hi0bits>:
 8007bfc:	2280      	movs	r2, #128	@ 0x80
 8007bfe:	0003      	movs	r3, r0
 8007c00:	0252      	lsls	r2, r2, #9
 8007c02:	2000      	movs	r0, #0
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d201      	bcs.n	8007c0c <__hi0bits+0x10>
 8007c08:	041b      	lsls	r3, r3, #16
 8007c0a:	3010      	adds	r0, #16
 8007c0c:	2280      	movs	r2, #128	@ 0x80
 8007c0e:	0452      	lsls	r2, r2, #17
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d201      	bcs.n	8007c18 <__hi0bits+0x1c>
 8007c14:	3008      	adds	r0, #8
 8007c16:	021b      	lsls	r3, r3, #8
 8007c18:	2280      	movs	r2, #128	@ 0x80
 8007c1a:	0552      	lsls	r2, r2, #21
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d201      	bcs.n	8007c24 <__hi0bits+0x28>
 8007c20:	3004      	adds	r0, #4
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	2280      	movs	r2, #128	@ 0x80
 8007c26:	05d2      	lsls	r2, r2, #23
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d201      	bcs.n	8007c30 <__hi0bits+0x34>
 8007c2c:	3002      	adds	r0, #2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	db03      	blt.n	8007c3c <__hi0bits+0x40>
 8007c34:	3001      	adds	r0, #1
 8007c36:	4213      	tst	r3, r2
 8007c38:	d100      	bne.n	8007c3c <__hi0bits+0x40>
 8007c3a:	2020      	movs	r0, #32
 8007c3c:	4770      	bx	lr

08007c3e <__lo0bits>:
 8007c3e:	6803      	ldr	r3, [r0, #0]
 8007c40:	0001      	movs	r1, r0
 8007c42:	2207      	movs	r2, #7
 8007c44:	0018      	movs	r0, r3
 8007c46:	4010      	ands	r0, r2
 8007c48:	4213      	tst	r3, r2
 8007c4a:	d00d      	beq.n	8007c68 <__lo0bits+0x2a>
 8007c4c:	3a06      	subs	r2, #6
 8007c4e:	2000      	movs	r0, #0
 8007c50:	4213      	tst	r3, r2
 8007c52:	d105      	bne.n	8007c60 <__lo0bits+0x22>
 8007c54:	3002      	adds	r0, #2
 8007c56:	4203      	tst	r3, r0
 8007c58:	d003      	beq.n	8007c62 <__lo0bits+0x24>
 8007c5a:	40d3      	lsrs	r3, r2
 8007c5c:	0010      	movs	r0, r2
 8007c5e:	600b      	str	r3, [r1, #0]
 8007c60:	4770      	bx	lr
 8007c62:	089b      	lsrs	r3, r3, #2
 8007c64:	600b      	str	r3, [r1, #0]
 8007c66:	e7fb      	b.n	8007c60 <__lo0bits+0x22>
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	d101      	bne.n	8007c72 <__lo0bits+0x34>
 8007c6e:	2010      	movs	r0, #16
 8007c70:	0c1b      	lsrs	r3, r3, #16
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	2a00      	cmp	r2, #0
 8007c76:	d101      	bne.n	8007c7c <__lo0bits+0x3e>
 8007c78:	3008      	adds	r0, #8
 8007c7a:	0a1b      	lsrs	r3, r3, #8
 8007c7c:	071a      	lsls	r2, r3, #28
 8007c7e:	d101      	bne.n	8007c84 <__lo0bits+0x46>
 8007c80:	3004      	adds	r0, #4
 8007c82:	091b      	lsrs	r3, r3, #4
 8007c84:	079a      	lsls	r2, r3, #30
 8007c86:	d101      	bne.n	8007c8c <__lo0bits+0x4e>
 8007c88:	3002      	adds	r0, #2
 8007c8a:	089b      	lsrs	r3, r3, #2
 8007c8c:	07da      	lsls	r2, r3, #31
 8007c8e:	d4e9      	bmi.n	8007c64 <__lo0bits+0x26>
 8007c90:	3001      	adds	r0, #1
 8007c92:	085b      	lsrs	r3, r3, #1
 8007c94:	d1e6      	bne.n	8007c64 <__lo0bits+0x26>
 8007c96:	2020      	movs	r0, #32
 8007c98:	e7e2      	b.n	8007c60 <__lo0bits+0x22>
	...

08007c9c <__i2b>:
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	000c      	movs	r4, r1
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	f7ff feff 	bl	8007aa4 <_Balloc>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d107      	bne.n	8007cba <__i2b+0x1e>
 8007caa:	2146      	movs	r1, #70	@ 0x46
 8007cac:	4c05      	ldr	r4, [pc, #20]	@ (8007cc4 <__i2b+0x28>)
 8007cae:	0002      	movs	r2, r0
 8007cb0:	4b05      	ldr	r3, [pc, #20]	@ (8007cc8 <__i2b+0x2c>)
 8007cb2:	0020      	movs	r0, r4
 8007cb4:	31ff      	adds	r1, #255	@ 0xff
 8007cb6:	f000 fcd7 	bl	8008668 <__assert_func>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	6144      	str	r4, [r0, #20]
 8007cbe:	6103      	str	r3, [r0, #16]
 8007cc0:	bd10      	pop	{r4, pc}
 8007cc2:	46c0      	nop			@ (mov r8, r8)
 8007cc4:	08008f29 	.word	0x08008f29
 8007cc8:	08008f18 	.word	0x08008f18

08007ccc <__multiply>:
 8007ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cce:	0014      	movs	r4, r2
 8007cd0:	690a      	ldr	r2, [r1, #16]
 8007cd2:	6923      	ldr	r3, [r4, #16]
 8007cd4:	000d      	movs	r5, r1
 8007cd6:	b08b      	sub	sp, #44	@ 0x2c
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	db02      	blt.n	8007ce2 <__multiply+0x16>
 8007cdc:	0023      	movs	r3, r4
 8007cde:	000c      	movs	r4, r1
 8007ce0:	001d      	movs	r5, r3
 8007ce2:	6927      	ldr	r7, [r4, #16]
 8007ce4:	692e      	ldr	r6, [r5, #16]
 8007ce6:	6861      	ldr	r1, [r4, #4]
 8007ce8:	19bb      	adds	r3, r7, r6
 8007cea:	9303      	str	r3, [sp, #12]
 8007cec:	68a3      	ldr	r3, [r4, #8]
 8007cee:	19ba      	adds	r2, r7, r6
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	da00      	bge.n	8007cf6 <__multiply+0x2a>
 8007cf4:	3101      	adds	r1, #1
 8007cf6:	f7ff fed5 	bl	8007aa4 <_Balloc>
 8007cfa:	9002      	str	r0, [sp, #8]
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d106      	bne.n	8007d0e <__multiply+0x42>
 8007d00:	21b1      	movs	r1, #177	@ 0xb1
 8007d02:	4b49      	ldr	r3, [pc, #292]	@ (8007e28 <__multiply+0x15c>)
 8007d04:	4849      	ldr	r0, [pc, #292]	@ (8007e2c <__multiply+0x160>)
 8007d06:	9a02      	ldr	r2, [sp, #8]
 8007d08:	0049      	lsls	r1, r1, #1
 8007d0a:	f000 fcad 	bl	8008668 <__assert_func>
 8007d0e:	9b02      	ldr	r3, [sp, #8]
 8007d10:	2200      	movs	r2, #0
 8007d12:	3314      	adds	r3, #20
 8007d14:	469c      	mov	ip, r3
 8007d16:	19bb      	adds	r3, r7, r6
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4463      	add	r3, ip
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	4663      	mov	r3, ip
 8007d20:	9904      	ldr	r1, [sp, #16]
 8007d22:	428b      	cmp	r3, r1
 8007d24:	d32a      	bcc.n	8007d7c <__multiply+0xb0>
 8007d26:	0023      	movs	r3, r4
 8007d28:	00bf      	lsls	r7, r7, #2
 8007d2a:	3314      	adds	r3, #20
 8007d2c:	3514      	adds	r5, #20
 8007d2e:	9308      	str	r3, [sp, #32]
 8007d30:	00b6      	lsls	r6, r6, #2
 8007d32:	19db      	adds	r3, r3, r7
 8007d34:	9305      	str	r3, [sp, #20]
 8007d36:	19ab      	adds	r3, r5, r6
 8007d38:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d3a:	2304      	movs	r3, #4
 8007d3c:	9306      	str	r3, [sp, #24]
 8007d3e:	0023      	movs	r3, r4
 8007d40:	9a05      	ldr	r2, [sp, #20]
 8007d42:	3315      	adds	r3, #21
 8007d44:	9501      	str	r5, [sp, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d305      	bcc.n	8007d56 <__multiply+0x8a>
 8007d4a:	1b13      	subs	r3, r2, r4
 8007d4c:	3b15      	subs	r3, #21
 8007d4e:	089b      	lsrs	r3, r3, #2
 8007d50:	3301      	adds	r3, #1
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	9306      	str	r3, [sp, #24]
 8007d56:	9b01      	ldr	r3, [sp, #4]
 8007d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d310      	bcc.n	8007d80 <__multiply+0xb4>
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	dd05      	ble.n	8007d70 <__multiply+0xa4>
 8007d64:	9b04      	ldr	r3, [sp, #16]
 8007d66:	3b04      	subs	r3, #4
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d056      	beq.n	8007e1e <__multiply+0x152>
 8007d70:	9b02      	ldr	r3, [sp, #8]
 8007d72:	9a03      	ldr	r2, [sp, #12]
 8007d74:	0018      	movs	r0, r3
 8007d76:	611a      	str	r2, [r3, #16]
 8007d78:	b00b      	add	sp, #44	@ 0x2c
 8007d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d7c:	c304      	stmia	r3!, {r2}
 8007d7e:	e7cf      	b.n	8007d20 <__multiply+0x54>
 8007d80:	9b01      	ldr	r3, [sp, #4]
 8007d82:	6818      	ldr	r0, [r3, #0]
 8007d84:	b280      	uxth	r0, r0
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d01e      	beq.n	8007dc8 <__multiply+0xfc>
 8007d8a:	4667      	mov	r7, ip
 8007d8c:	2500      	movs	r5, #0
 8007d8e:	9e08      	ldr	r6, [sp, #32]
 8007d90:	ce02      	ldmia	r6!, {r1}
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	9307      	str	r3, [sp, #28]
 8007d96:	b28b      	uxth	r3, r1
 8007d98:	4343      	muls	r3, r0
 8007d9a:	001a      	movs	r2, r3
 8007d9c:	466b      	mov	r3, sp
 8007d9e:	0c09      	lsrs	r1, r1, #16
 8007da0:	8b9b      	ldrh	r3, [r3, #28]
 8007da2:	4341      	muls	r1, r0
 8007da4:	18d3      	adds	r3, r2, r3
 8007da6:	9a07      	ldr	r2, [sp, #28]
 8007da8:	195b      	adds	r3, r3, r5
 8007daa:	0c12      	lsrs	r2, r2, #16
 8007dac:	1889      	adds	r1, r1, r2
 8007dae:	0c1a      	lsrs	r2, r3, #16
 8007db0:	188a      	adds	r2, r1, r2
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	0c15      	lsrs	r5, r2, #16
 8007db6:	0412      	lsls	r2, r2, #16
 8007db8:	431a      	orrs	r2, r3
 8007dba:	9b05      	ldr	r3, [sp, #20]
 8007dbc:	c704      	stmia	r7!, {r2}
 8007dbe:	42b3      	cmp	r3, r6
 8007dc0:	d8e6      	bhi.n	8007d90 <__multiply+0xc4>
 8007dc2:	4663      	mov	r3, ip
 8007dc4:	9a06      	ldr	r2, [sp, #24]
 8007dc6:	509d      	str	r5, [r3, r2]
 8007dc8:	9b01      	ldr	r3, [sp, #4]
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	0c00      	lsrs	r0, r0, #16
 8007dce:	d020      	beq.n	8007e12 <__multiply+0x146>
 8007dd0:	4663      	mov	r3, ip
 8007dd2:	0025      	movs	r5, r4
 8007dd4:	4661      	mov	r1, ip
 8007dd6:	2700      	movs	r7, #0
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3514      	adds	r5, #20
 8007ddc:	682a      	ldr	r2, [r5, #0]
 8007dde:	680e      	ldr	r6, [r1, #0]
 8007de0:	b292      	uxth	r2, r2
 8007de2:	4342      	muls	r2, r0
 8007de4:	0c36      	lsrs	r6, r6, #16
 8007de6:	1992      	adds	r2, r2, r6
 8007de8:	19d2      	adds	r2, r2, r7
 8007dea:	0416      	lsls	r6, r2, #16
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	431e      	orrs	r6, r3
 8007df0:	600e      	str	r6, [r1, #0]
 8007df2:	cd40      	ldmia	r5!, {r6}
 8007df4:	684b      	ldr	r3, [r1, #4]
 8007df6:	0c36      	lsrs	r6, r6, #16
 8007df8:	4346      	muls	r6, r0
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	0c12      	lsrs	r2, r2, #16
 8007dfe:	18f3      	adds	r3, r6, r3
 8007e00:	189b      	adds	r3, r3, r2
 8007e02:	9a05      	ldr	r2, [sp, #20]
 8007e04:	0c1f      	lsrs	r7, r3, #16
 8007e06:	3104      	adds	r1, #4
 8007e08:	42aa      	cmp	r2, r5
 8007e0a:	d8e7      	bhi.n	8007ddc <__multiply+0x110>
 8007e0c:	4662      	mov	r2, ip
 8007e0e:	9906      	ldr	r1, [sp, #24]
 8007e10:	5053      	str	r3, [r2, r1]
 8007e12:	9b01      	ldr	r3, [sp, #4]
 8007e14:	3304      	adds	r3, #4
 8007e16:	9301      	str	r3, [sp, #4]
 8007e18:	2304      	movs	r3, #4
 8007e1a:	449c      	add	ip, r3
 8007e1c:	e79b      	b.n	8007d56 <__multiply+0x8a>
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	9303      	str	r3, [sp, #12]
 8007e24:	e79b      	b.n	8007d5e <__multiply+0x92>
 8007e26:	46c0      	nop			@ (mov r8, r8)
 8007e28:	08008f18 	.word	0x08008f18
 8007e2c:	08008f29 	.word	0x08008f29

08007e30 <__pow5mult>:
 8007e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e32:	2303      	movs	r3, #3
 8007e34:	0015      	movs	r5, r2
 8007e36:	0007      	movs	r7, r0
 8007e38:	000e      	movs	r6, r1
 8007e3a:	401a      	ands	r2, r3
 8007e3c:	421d      	tst	r5, r3
 8007e3e:	d008      	beq.n	8007e52 <__pow5mult+0x22>
 8007e40:	4925      	ldr	r1, [pc, #148]	@ (8007ed8 <__pow5mult+0xa8>)
 8007e42:	3a01      	subs	r2, #1
 8007e44:	0092      	lsls	r2, r2, #2
 8007e46:	5852      	ldr	r2, [r2, r1]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	0031      	movs	r1, r6
 8007e4c:	f7ff fe92 	bl	8007b74 <__multadd>
 8007e50:	0006      	movs	r6, r0
 8007e52:	10ad      	asrs	r5, r5, #2
 8007e54:	d03d      	beq.n	8007ed2 <__pow5mult+0xa2>
 8007e56:	69fc      	ldr	r4, [r7, #28]
 8007e58:	2c00      	cmp	r4, #0
 8007e5a:	d10f      	bne.n	8007e7c <__pow5mult+0x4c>
 8007e5c:	2010      	movs	r0, #16
 8007e5e:	f7ff fd65 	bl	800792c <malloc>
 8007e62:	1e02      	subs	r2, r0, #0
 8007e64:	61f8      	str	r0, [r7, #28]
 8007e66:	d105      	bne.n	8007e74 <__pow5mult+0x44>
 8007e68:	21b4      	movs	r1, #180	@ 0xb4
 8007e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8007edc <__pow5mult+0xac>)
 8007e6c:	481c      	ldr	r0, [pc, #112]	@ (8007ee0 <__pow5mult+0xb0>)
 8007e6e:	31ff      	adds	r1, #255	@ 0xff
 8007e70:	f000 fbfa 	bl	8008668 <__assert_func>
 8007e74:	6044      	str	r4, [r0, #4]
 8007e76:	6084      	str	r4, [r0, #8]
 8007e78:	6004      	str	r4, [r0, #0]
 8007e7a:	60c4      	str	r4, [r0, #12]
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	689c      	ldr	r4, [r3, #8]
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	2c00      	cmp	r4, #0
 8007e84:	d108      	bne.n	8007e98 <__pow5mult+0x68>
 8007e86:	0038      	movs	r0, r7
 8007e88:	4916      	ldr	r1, [pc, #88]	@ (8007ee4 <__pow5mult+0xb4>)
 8007e8a:	f7ff ff07 	bl	8007c9c <__i2b>
 8007e8e:	9b01      	ldr	r3, [sp, #4]
 8007e90:	0004      	movs	r4, r0
 8007e92:	6098      	str	r0, [r3, #8]
 8007e94:	2300      	movs	r3, #0
 8007e96:	6003      	str	r3, [r0, #0]
 8007e98:	2301      	movs	r3, #1
 8007e9a:	421d      	tst	r5, r3
 8007e9c:	d00a      	beq.n	8007eb4 <__pow5mult+0x84>
 8007e9e:	0031      	movs	r1, r6
 8007ea0:	0022      	movs	r2, r4
 8007ea2:	0038      	movs	r0, r7
 8007ea4:	f7ff ff12 	bl	8007ccc <__multiply>
 8007ea8:	0031      	movs	r1, r6
 8007eaa:	9001      	str	r0, [sp, #4]
 8007eac:	0038      	movs	r0, r7
 8007eae:	f7ff fe3d 	bl	8007b2c <_Bfree>
 8007eb2:	9e01      	ldr	r6, [sp, #4]
 8007eb4:	106d      	asrs	r5, r5, #1
 8007eb6:	d00c      	beq.n	8007ed2 <__pow5mult+0xa2>
 8007eb8:	6820      	ldr	r0, [r4, #0]
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d107      	bne.n	8007ece <__pow5mult+0x9e>
 8007ebe:	0022      	movs	r2, r4
 8007ec0:	0021      	movs	r1, r4
 8007ec2:	0038      	movs	r0, r7
 8007ec4:	f7ff ff02 	bl	8007ccc <__multiply>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	6020      	str	r0, [r4, #0]
 8007ecc:	6003      	str	r3, [r0, #0]
 8007ece:	0004      	movs	r4, r0
 8007ed0:	e7e2      	b.n	8007e98 <__pow5mult+0x68>
 8007ed2:	0030      	movs	r0, r6
 8007ed4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ed6:	46c0      	nop			@ (mov r8, r8)
 8007ed8:	08008f84 	.word	0x08008f84
 8007edc:	08008ea9 	.word	0x08008ea9
 8007ee0:	08008f29 	.word	0x08008f29
 8007ee4:	00000271 	.word	0x00000271

08007ee8 <__lshift>:
 8007ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eea:	000c      	movs	r4, r1
 8007eec:	0016      	movs	r6, r2
 8007eee:	6923      	ldr	r3, [r4, #16]
 8007ef0:	1157      	asrs	r7, r2, #5
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	18fb      	adds	r3, r7, r3
 8007ef6:	9301      	str	r3, [sp, #4]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	6849      	ldr	r1, [r1, #4]
 8007efe:	68a3      	ldr	r3, [r4, #8]
 8007f00:	9002      	str	r0, [sp, #8]
 8007f02:	9a00      	ldr	r2, [sp, #0]
 8007f04:	4293      	cmp	r3, r2
 8007f06:	db10      	blt.n	8007f2a <__lshift+0x42>
 8007f08:	9802      	ldr	r0, [sp, #8]
 8007f0a:	f7ff fdcb 	bl	8007aa4 <_Balloc>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	0001      	movs	r1, r0
 8007f12:	0005      	movs	r5, r0
 8007f14:	001a      	movs	r2, r3
 8007f16:	3114      	adds	r1, #20
 8007f18:	4298      	cmp	r0, r3
 8007f1a:	d10c      	bne.n	8007f36 <__lshift+0x4e>
 8007f1c:	21ef      	movs	r1, #239	@ 0xef
 8007f1e:	002a      	movs	r2, r5
 8007f20:	4b25      	ldr	r3, [pc, #148]	@ (8007fb8 <__lshift+0xd0>)
 8007f22:	4826      	ldr	r0, [pc, #152]	@ (8007fbc <__lshift+0xd4>)
 8007f24:	0049      	lsls	r1, r1, #1
 8007f26:	f000 fb9f 	bl	8008668 <__assert_func>
 8007f2a:	3101      	adds	r1, #1
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	e7e8      	b.n	8007f02 <__lshift+0x1a>
 8007f30:	0098      	lsls	r0, r3, #2
 8007f32:	500a      	str	r2, [r1, r0]
 8007f34:	3301      	adds	r3, #1
 8007f36:	42bb      	cmp	r3, r7
 8007f38:	dbfa      	blt.n	8007f30 <__lshift+0x48>
 8007f3a:	43fb      	mvns	r3, r7
 8007f3c:	17db      	asrs	r3, r3, #31
 8007f3e:	401f      	ands	r7, r3
 8007f40:	00bf      	lsls	r7, r7, #2
 8007f42:	0023      	movs	r3, r4
 8007f44:	201f      	movs	r0, #31
 8007f46:	19c9      	adds	r1, r1, r7
 8007f48:	0037      	movs	r7, r6
 8007f4a:	6922      	ldr	r2, [r4, #16]
 8007f4c:	3314      	adds	r3, #20
 8007f4e:	0092      	lsls	r2, r2, #2
 8007f50:	189a      	adds	r2, r3, r2
 8007f52:	4007      	ands	r7, r0
 8007f54:	4206      	tst	r6, r0
 8007f56:	d029      	beq.n	8007fac <__lshift+0xc4>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	1bc0      	subs	r0, r0, r7
 8007f5c:	9003      	str	r0, [sp, #12]
 8007f5e:	468c      	mov	ip, r1
 8007f60:	2000      	movs	r0, #0
 8007f62:	681e      	ldr	r6, [r3, #0]
 8007f64:	40be      	lsls	r6, r7
 8007f66:	4306      	orrs	r6, r0
 8007f68:	4660      	mov	r0, ip
 8007f6a:	c040      	stmia	r0!, {r6}
 8007f6c:	4684      	mov	ip, r0
 8007f6e:	9e03      	ldr	r6, [sp, #12]
 8007f70:	cb01      	ldmia	r3!, {r0}
 8007f72:	40f0      	lsrs	r0, r6
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d8f4      	bhi.n	8007f62 <__lshift+0x7a>
 8007f78:	0026      	movs	r6, r4
 8007f7a:	3615      	adds	r6, #21
 8007f7c:	2304      	movs	r3, #4
 8007f7e:	42b2      	cmp	r2, r6
 8007f80:	d304      	bcc.n	8007f8c <__lshift+0xa4>
 8007f82:	1b13      	subs	r3, r2, r4
 8007f84:	3b15      	subs	r3, #21
 8007f86:	089b      	lsrs	r3, r3, #2
 8007f88:	3301      	adds	r3, #1
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	50c8      	str	r0, [r1, r3]
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d002      	beq.n	8007f98 <__lshift+0xb0>
 8007f92:	9b01      	ldr	r3, [sp, #4]
 8007f94:	3302      	adds	r3, #2
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	9b00      	ldr	r3, [sp, #0]
 8007f9a:	9802      	ldr	r0, [sp, #8]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	0021      	movs	r1, r4
 8007fa0:	612b      	str	r3, [r5, #16]
 8007fa2:	f7ff fdc3 	bl	8007b2c <_Bfree>
 8007fa6:	0028      	movs	r0, r5
 8007fa8:	b005      	add	sp, #20
 8007faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fac:	cb01      	ldmia	r3!, {r0}
 8007fae:	c101      	stmia	r1!, {r0}
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d8fb      	bhi.n	8007fac <__lshift+0xc4>
 8007fb4:	e7f0      	b.n	8007f98 <__lshift+0xb0>
 8007fb6:	46c0      	nop			@ (mov r8, r8)
 8007fb8:	08008f18 	.word	0x08008f18
 8007fbc:	08008f29 	.word	0x08008f29

08007fc0 <__mcmp>:
 8007fc0:	b530      	push	{r4, r5, lr}
 8007fc2:	690b      	ldr	r3, [r1, #16]
 8007fc4:	6904      	ldr	r4, [r0, #16]
 8007fc6:	0002      	movs	r2, r0
 8007fc8:	1ae0      	subs	r0, r4, r3
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	d10f      	bne.n	8007fee <__mcmp+0x2e>
 8007fce:	3214      	adds	r2, #20
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	3114      	adds	r1, #20
 8007fd4:	0014      	movs	r4, r2
 8007fd6:	18c9      	adds	r1, r1, r3
 8007fd8:	18d2      	adds	r2, r2, r3
 8007fda:	3a04      	subs	r2, #4
 8007fdc:	3904      	subs	r1, #4
 8007fde:	6815      	ldr	r5, [r2, #0]
 8007fe0:	680b      	ldr	r3, [r1, #0]
 8007fe2:	429d      	cmp	r5, r3
 8007fe4:	d004      	beq.n	8007ff0 <__mcmp+0x30>
 8007fe6:	2001      	movs	r0, #1
 8007fe8:	429d      	cmp	r5, r3
 8007fea:	d200      	bcs.n	8007fee <__mcmp+0x2e>
 8007fec:	3802      	subs	r0, #2
 8007fee:	bd30      	pop	{r4, r5, pc}
 8007ff0:	4294      	cmp	r4, r2
 8007ff2:	d3f2      	bcc.n	8007fda <__mcmp+0x1a>
 8007ff4:	e7fb      	b.n	8007fee <__mcmp+0x2e>
	...

08007ff8 <__mdiff>:
 8007ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ffa:	000c      	movs	r4, r1
 8007ffc:	b087      	sub	sp, #28
 8007ffe:	9000      	str	r0, [sp, #0]
 8008000:	0011      	movs	r1, r2
 8008002:	0020      	movs	r0, r4
 8008004:	0017      	movs	r7, r2
 8008006:	f7ff ffdb 	bl	8007fc0 <__mcmp>
 800800a:	1e05      	subs	r5, r0, #0
 800800c:	d110      	bne.n	8008030 <__mdiff+0x38>
 800800e:	0001      	movs	r1, r0
 8008010:	9800      	ldr	r0, [sp, #0]
 8008012:	f7ff fd47 	bl	8007aa4 <_Balloc>
 8008016:	1e02      	subs	r2, r0, #0
 8008018:	d104      	bne.n	8008024 <__mdiff+0x2c>
 800801a:	4b40      	ldr	r3, [pc, #256]	@ (800811c <__mdiff+0x124>)
 800801c:	4840      	ldr	r0, [pc, #256]	@ (8008120 <__mdiff+0x128>)
 800801e:	4941      	ldr	r1, [pc, #260]	@ (8008124 <__mdiff+0x12c>)
 8008020:	f000 fb22 	bl	8008668 <__assert_func>
 8008024:	2301      	movs	r3, #1
 8008026:	6145      	str	r5, [r0, #20]
 8008028:	6103      	str	r3, [r0, #16]
 800802a:	0010      	movs	r0, r2
 800802c:	b007      	add	sp, #28
 800802e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008030:	2600      	movs	r6, #0
 8008032:	42b0      	cmp	r0, r6
 8008034:	da03      	bge.n	800803e <__mdiff+0x46>
 8008036:	0023      	movs	r3, r4
 8008038:	003c      	movs	r4, r7
 800803a:	001f      	movs	r7, r3
 800803c:	3601      	adds	r6, #1
 800803e:	6861      	ldr	r1, [r4, #4]
 8008040:	9800      	ldr	r0, [sp, #0]
 8008042:	f7ff fd2f 	bl	8007aa4 <_Balloc>
 8008046:	1e02      	subs	r2, r0, #0
 8008048:	d103      	bne.n	8008052 <__mdiff+0x5a>
 800804a:	4b34      	ldr	r3, [pc, #208]	@ (800811c <__mdiff+0x124>)
 800804c:	4834      	ldr	r0, [pc, #208]	@ (8008120 <__mdiff+0x128>)
 800804e:	4936      	ldr	r1, [pc, #216]	@ (8008128 <__mdiff+0x130>)
 8008050:	e7e6      	b.n	8008020 <__mdiff+0x28>
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	3414      	adds	r4, #20
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	18e3      	adds	r3, r4, r3
 800805c:	0021      	movs	r1, r4
 800805e:	9401      	str	r4, [sp, #4]
 8008060:	003c      	movs	r4, r7
 8008062:	9302      	str	r3, [sp, #8]
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	3414      	adds	r4, #20
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	18e3      	adds	r3, r4, r3
 800806c:	9303      	str	r3, [sp, #12]
 800806e:	0003      	movs	r3, r0
 8008070:	60c6      	str	r6, [r0, #12]
 8008072:	468c      	mov	ip, r1
 8008074:	2000      	movs	r0, #0
 8008076:	3314      	adds	r3, #20
 8008078:	9304      	str	r3, [sp, #16]
 800807a:	9305      	str	r3, [sp, #20]
 800807c:	4663      	mov	r3, ip
 800807e:	cb20      	ldmia	r3!, {r5}
 8008080:	b2a9      	uxth	r1, r5
 8008082:	000e      	movs	r6, r1
 8008084:	469c      	mov	ip, r3
 8008086:	cc08      	ldmia	r4!, {r3}
 8008088:	0c2d      	lsrs	r5, r5, #16
 800808a:	b299      	uxth	r1, r3
 800808c:	1a71      	subs	r1, r6, r1
 800808e:	1809      	adds	r1, r1, r0
 8008090:	0c1b      	lsrs	r3, r3, #16
 8008092:	1408      	asrs	r0, r1, #16
 8008094:	1aeb      	subs	r3, r5, r3
 8008096:	181b      	adds	r3, r3, r0
 8008098:	1418      	asrs	r0, r3, #16
 800809a:	b289      	uxth	r1, r1
 800809c:	041b      	lsls	r3, r3, #16
 800809e:	4319      	orrs	r1, r3
 80080a0:	9b05      	ldr	r3, [sp, #20]
 80080a2:	c302      	stmia	r3!, {r1}
 80080a4:	9305      	str	r3, [sp, #20]
 80080a6:	9b03      	ldr	r3, [sp, #12]
 80080a8:	42a3      	cmp	r3, r4
 80080aa:	d8e7      	bhi.n	800807c <__mdiff+0x84>
 80080ac:	0039      	movs	r1, r7
 80080ae:	9c03      	ldr	r4, [sp, #12]
 80080b0:	3115      	adds	r1, #21
 80080b2:	2304      	movs	r3, #4
 80080b4:	428c      	cmp	r4, r1
 80080b6:	d304      	bcc.n	80080c2 <__mdiff+0xca>
 80080b8:	1be3      	subs	r3, r4, r7
 80080ba:	3b15      	subs	r3, #21
 80080bc:	089b      	lsrs	r3, r3, #2
 80080be:	3301      	adds	r3, #1
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	9901      	ldr	r1, [sp, #4]
 80080c4:	18cd      	adds	r5, r1, r3
 80080c6:	9904      	ldr	r1, [sp, #16]
 80080c8:	002e      	movs	r6, r5
 80080ca:	18cb      	adds	r3, r1, r3
 80080cc:	001f      	movs	r7, r3
 80080ce:	9902      	ldr	r1, [sp, #8]
 80080d0:	428e      	cmp	r6, r1
 80080d2:	d311      	bcc.n	80080f8 <__mdiff+0x100>
 80080d4:	9c02      	ldr	r4, [sp, #8]
 80080d6:	1ee9      	subs	r1, r5, #3
 80080d8:	2000      	movs	r0, #0
 80080da:	428c      	cmp	r4, r1
 80080dc:	d304      	bcc.n	80080e8 <__mdiff+0xf0>
 80080de:	0021      	movs	r1, r4
 80080e0:	3103      	adds	r1, #3
 80080e2:	1b49      	subs	r1, r1, r5
 80080e4:	0889      	lsrs	r1, r1, #2
 80080e6:	0088      	lsls	r0, r1, #2
 80080e8:	181b      	adds	r3, r3, r0
 80080ea:	3b04      	subs	r3, #4
 80080ec:	6819      	ldr	r1, [r3, #0]
 80080ee:	2900      	cmp	r1, #0
 80080f0:	d010      	beq.n	8008114 <__mdiff+0x11c>
 80080f2:	9b00      	ldr	r3, [sp, #0]
 80080f4:	6113      	str	r3, [r2, #16]
 80080f6:	e798      	b.n	800802a <__mdiff+0x32>
 80080f8:	4684      	mov	ip, r0
 80080fa:	ce02      	ldmia	r6!, {r1}
 80080fc:	b288      	uxth	r0, r1
 80080fe:	4460      	add	r0, ip
 8008100:	1400      	asrs	r0, r0, #16
 8008102:	0c0c      	lsrs	r4, r1, #16
 8008104:	1904      	adds	r4, r0, r4
 8008106:	4461      	add	r1, ip
 8008108:	1420      	asrs	r0, r4, #16
 800810a:	b289      	uxth	r1, r1
 800810c:	0424      	lsls	r4, r4, #16
 800810e:	4321      	orrs	r1, r4
 8008110:	c702      	stmia	r7!, {r1}
 8008112:	e7dc      	b.n	80080ce <__mdiff+0xd6>
 8008114:	9900      	ldr	r1, [sp, #0]
 8008116:	3901      	subs	r1, #1
 8008118:	9100      	str	r1, [sp, #0]
 800811a:	e7e6      	b.n	80080ea <__mdiff+0xf2>
 800811c:	08008f18 	.word	0x08008f18
 8008120:	08008f29 	.word	0x08008f29
 8008124:	00000237 	.word	0x00000237
 8008128:	00000245 	.word	0x00000245

0800812c <__d2b>:
 800812c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800812e:	2101      	movs	r1, #1
 8008130:	0016      	movs	r6, r2
 8008132:	001f      	movs	r7, r3
 8008134:	f7ff fcb6 	bl	8007aa4 <_Balloc>
 8008138:	1e04      	subs	r4, r0, #0
 800813a:	d105      	bne.n	8008148 <__d2b+0x1c>
 800813c:	0022      	movs	r2, r4
 800813e:	4b25      	ldr	r3, [pc, #148]	@ (80081d4 <__d2b+0xa8>)
 8008140:	4825      	ldr	r0, [pc, #148]	@ (80081d8 <__d2b+0xac>)
 8008142:	4926      	ldr	r1, [pc, #152]	@ (80081dc <__d2b+0xb0>)
 8008144:	f000 fa90 	bl	8008668 <__assert_func>
 8008148:	033b      	lsls	r3, r7, #12
 800814a:	007d      	lsls	r5, r7, #1
 800814c:	0b1b      	lsrs	r3, r3, #12
 800814e:	0d6d      	lsrs	r5, r5, #21
 8008150:	d002      	beq.n	8008158 <__d2b+0x2c>
 8008152:	2280      	movs	r2, #128	@ 0x80
 8008154:	0352      	lsls	r2, r2, #13
 8008156:	4313      	orrs	r3, r2
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	2e00      	cmp	r6, #0
 800815c:	d025      	beq.n	80081aa <__d2b+0x7e>
 800815e:	4668      	mov	r0, sp
 8008160:	9600      	str	r6, [sp, #0]
 8008162:	f7ff fd6c 	bl	8007c3e <__lo0bits>
 8008166:	9b01      	ldr	r3, [sp, #4]
 8008168:	9900      	ldr	r1, [sp, #0]
 800816a:	2800      	cmp	r0, #0
 800816c:	d01b      	beq.n	80081a6 <__d2b+0x7a>
 800816e:	2220      	movs	r2, #32
 8008170:	001e      	movs	r6, r3
 8008172:	1a12      	subs	r2, r2, r0
 8008174:	4096      	lsls	r6, r2
 8008176:	0032      	movs	r2, r6
 8008178:	40c3      	lsrs	r3, r0
 800817a:	430a      	orrs	r2, r1
 800817c:	6162      	str	r2, [r4, #20]
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	9e01      	ldr	r6, [sp, #4]
 8008182:	61a6      	str	r6, [r4, #24]
 8008184:	1e73      	subs	r3, r6, #1
 8008186:	419e      	sbcs	r6, r3
 8008188:	3601      	adds	r6, #1
 800818a:	6126      	str	r6, [r4, #16]
 800818c:	2d00      	cmp	r5, #0
 800818e:	d014      	beq.n	80081ba <__d2b+0x8e>
 8008190:	2635      	movs	r6, #53	@ 0x35
 8008192:	4b13      	ldr	r3, [pc, #76]	@ (80081e0 <__d2b+0xb4>)
 8008194:	18ed      	adds	r5, r5, r3
 8008196:	9b08      	ldr	r3, [sp, #32]
 8008198:	182d      	adds	r5, r5, r0
 800819a:	601d      	str	r5, [r3, #0]
 800819c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800819e:	1a36      	subs	r6, r6, r0
 80081a0:	601e      	str	r6, [r3, #0]
 80081a2:	0020      	movs	r0, r4
 80081a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081a6:	6161      	str	r1, [r4, #20]
 80081a8:	e7ea      	b.n	8008180 <__d2b+0x54>
 80081aa:	a801      	add	r0, sp, #4
 80081ac:	f7ff fd47 	bl	8007c3e <__lo0bits>
 80081b0:	9b01      	ldr	r3, [sp, #4]
 80081b2:	2601      	movs	r6, #1
 80081b4:	6163      	str	r3, [r4, #20]
 80081b6:	3020      	adds	r0, #32
 80081b8:	e7e7      	b.n	800818a <__d2b+0x5e>
 80081ba:	4b0a      	ldr	r3, [pc, #40]	@ (80081e4 <__d2b+0xb8>)
 80081bc:	18c0      	adds	r0, r0, r3
 80081be:	9b08      	ldr	r3, [sp, #32]
 80081c0:	6018      	str	r0, [r3, #0]
 80081c2:	4b09      	ldr	r3, [pc, #36]	@ (80081e8 <__d2b+0xbc>)
 80081c4:	18f3      	adds	r3, r6, r3
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	18e3      	adds	r3, r4, r3
 80081ca:	6958      	ldr	r0, [r3, #20]
 80081cc:	f7ff fd16 	bl	8007bfc <__hi0bits>
 80081d0:	0176      	lsls	r6, r6, #5
 80081d2:	e7e3      	b.n	800819c <__d2b+0x70>
 80081d4:	08008f18 	.word	0x08008f18
 80081d8:	08008f29 	.word	0x08008f29
 80081dc:	0000030f 	.word	0x0000030f
 80081e0:	fffffbcd 	.word	0xfffffbcd
 80081e4:	fffffbce 	.word	0xfffffbce
 80081e8:	3fffffff 	.word	0x3fffffff

080081ec <__ssputs_r>:
 80081ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ee:	688e      	ldr	r6, [r1, #8]
 80081f0:	b085      	sub	sp, #20
 80081f2:	001f      	movs	r7, r3
 80081f4:	000c      	movs	r4, r1
 80081f6:	680b      	ldr	r3, [r1, #0]
 80081f8:	9002      	str	r0, [sp, #8]
 80081fa:	9203      	str	r2, [sp, #12]
 80081fc:	42be      	cmp	r6, r7
 80081fe:	d830      	bhi.n	8008262 <__ssputs_r+0x76>
 8008200:	210c      	movs	r1, #12
 8008202:	5e62      	ldrsh	r2, [r4, r1]
 8008204:	2190      	movs	r1, #144	@ 0x90
 8008206:	00c9      	lsls	r1, r1, #3
 8008208:	420a      	tst	r2, r1
 800820a:	d028      	beq.n	800825e <__ssputs_r+0x72>
 800820c:	2003      	movs	r0, #3
 800820e:	6921      	ldr	r1, [r4, #16]
 8008210:	1a5b      	subs	r3, r3, r1
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	6963      	ldr	r3, [r4, #20]
 8008216:	4343      	muls	r3, r0
 8008218:	9801      	ldr	r0, [sp, #4]
 800821a:	0fdd      	lsrs	r5, r3, #31
 800821c:	18ed      	adds	r5, r5, r3
 800821e:	1c7b      	adds	r3, r7, #1
 8008220:	181b      	adds	r3, r3, r0
 8008222:	106d      	asrs	r5, r5, #1
 8008224:	42ab      	cmp	r3, r5
 8008226:	d900      	bls.n	800822a <__ssputs_r+0x3e>
 8008228:	001d      	movs	r5, r3
 800822a:	0552      	lsls	r2, r2, #21
 800822c:	d528      	bpl.n	8008280 <__ssputs_r+0x94>
 800822e:	0029      	movs	r1, r5
 8008230:	9802      	ldr	r0, [sp, #8]
 8008232:	f7ff fba7 	bl	8007984 <_malloc_r>
 8008236:	1e06      	subs	r6, r0, #0
 8008238:	d02c      	beq.n	8008294 <__ssputs_r+0xa8>
 800823a:	9a01      	ldr	r2, [sp, #4]
 800823c:	6921      	ldr	r1, [r4, #16]
 800823e:	f000 fa09 	bl	8008654 <memcpy>
 8008242:	89a2      	ldrh	r2, [r4, #12]
 8008244:	4b18      	ldr	r3, [pc, #96]	@ (80082a8 <__ssputs_r+0xbc>)
 8008246:	401a      	ands	r2, r3
 8008248:	2380      	movs	r3, #128	@ 0x80
 800824a:	4313      	orrs	r3, r2
 800824c:	81a3      	strh	r3, [r4, #12]
 800824e:	9b01      	ldr	r3, [sp, #4]
 8008250:	6126      	str	r6, [r4, #16]
 8008252:	18f6      	adds	r6, r6, r3
 8008254:	6026      	str	r6, [r4, #0]
 8008256:	003e      	movs	r6, r7
 8008258:	6165      	str	r5, [r4, #20]
 800825a:	1aed      	subs	r5, r5, r3
 800825c:	60a5      	str	r5, [r4, #8]
 800825e:	42be      	cmp	r6, r7
 8008260:	d900      	bls.n	8008264 <__ssputs_r+0x78>
 8008262:	003e      	movs	r6, r7
 8008264:	0032      	movs	r2, r6
 8008266:	9903      	ldr	r1, [sp, #12]
 8008268:	6820      	ldr	r0, [r4, #0]
 800826a:	f000 f9ce 	bl	800860a <memmove>
 800826e:	2000      	movs	r0, #0
 8008270:	68a3      	ldr	r3, [r4, #8]
 8008272:	1b9b      	subs	r3, r3, r6
 8008274:	60a3      	str	r3, [r4, #8]
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	199b      	adds	r3, r3, r6
 800827a:	6023      	str	r3, [r4, #0]
 800827c:	b005      	add	sp, #20
 800827e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008280:	002a      	movs	r2, r5
 8008282:	9802      	ldr	r0, [sp, #8]
 8008284:	f000 fa4d 	bl	8008722 <_realloc_r>
 8008288:	1e06      	subs	r6, r0, #0
 800828a:	d1e0      	bne.n	800824e <__ssputs_r+0x62>
 800828c:	6921      	ldr	r1, [r4, #16]
 800828e:	9802      	ldr	r0, [sp, #8]
 8008290:	f7ff fb02 	bl	8007898 <_free_r>
 8008294:	230c      	movs	r3, #12
 8008296:	2001      	movs	r0, #1
 8008298:	9a02      	ldr	r2, [sp, #8]
 800829a:	4240      	negs	r0, r0
 800829c:	6013      	str	r3, [r2, #0]
 800829e:	89a2      	ldrh	r2, [r4, #12]
 80082a0:	3334      	adds	r3, #52	@ 0x34
 80082a2:	4313      	orrs	r3, r2
 80082a4:	81a3      	strh	r3, [r4, #12]
 80082a6:	e7e9      	b.n	800827c <__ssputs_r+0x90>
 80082a8:	fffffb7f 	.word	0xfffffb7f

080082ac <_svfiprintf_r>:
 80082ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ae:	b0a1      	sub	sp, #132	@ 0x84
 80082b0:	9003      	str	r0, [sp, #12]
 80082b2:	001d      	movs	r5, r3
 80082b4:	898b      	ldrh	r3, [r1, #12]
 80082b6:	000f      	movs	r7, r1
 80082b8:	0016      	movs	r6, r2
 80082ba:	061b      	lsls	r3, r3, #24
 80082bc:	d511      	bpl.n	80082e2 <_svfiprintf_r+0x36>
 80082be:	690b      	ldr	r3, [r1, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10e      	bne.n	80082e2 <_svfiprintf_r+0x36>
 80082c4:	2140      	movs	r1, #64	@ 0x40
 80082c6:	f7ff fb5d 	bl	8007984 <_malloc_r>
 80082ca:	6038      	str	r0, [r7, #0]
 80082cc:	6138      	str	r0, [r7, #16]
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d105      	bne.n	80082de <_svfiprintf_r+0x32>
 80082d2:	230c      	movs	r3, #12
 80082d4:	9a03      	ldr	r2, [sp, #12]
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	2001      	movs	r0, #1
 80082da:	4240      	negs	r0, r0
 80082dc:	e0cf      	b.n	800847e <_svfiprintf_r+0x1d2>
 80082de:	2340      	movs	r3, #64	@ 0x40
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	2300      	movs	r3, #0
 80082e4:	ac08      	add	r4, sp, #32
 80082e6:	6163      	str	r3, [r4, #20]
 80082e8:	3320      	adds	r3, #32
 80082ea:	7663      	strb	r3, [r4, #25]
 80082ec:	3310      	adds	r3, #16
 80082ee:	76a3      	strb	r3, [r4, #26]
 80082f0:	9507      	str	r5, [sp, #28]
 80082f2:	0035      	movs	r5, r6
 80082f4:	782b      	ldrb	r3, [r5, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <_svfiprintf_r+0x52>
 80082fa:	2b25      	cmp	r3, #37	@ 0x25
 80082fc:	d148      	bne.n	8008390 <_svfiprintf_r+0xe4>
 80082fe:	1bab      	subs	r3, r5, r6
 8008300:	9305      	str	r3, [sp, #20]
 8008302:	42b5      	cmp	r5, r6
 8008304:	d00b      	beq.n	800831e <_svfiprintf_r+0x72>
 8008306:	0032      	movs	r2, r6
 8008308:	0039      	movs	r1, r7
 800830a:	9803      	ldr	r0, [sp, #12]
 800830c:	f7ff ff6e 	bl	80081ec <__ssputs_r>
 8008310:	3001      	adds	r0, #1
 8008312:	d100      	bne.n	8008316 <_svfiprintf_r+0x6a>
 8008314:	e0ae      	b.n	8008474 <_svfiprintf_r+0x1c8>
 8008316:	6963      	ldr	r3, [r4, #20]
 8008318:	9a05      	ldr	r2, [sp, #20]
 800831a:	189b      	adds	r3, r3, r2
 800831c:	6163      	str	r3, [r4, #20]
 800831e:	782b      	ldrb	r3, [r5, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d100      	bne.n	8008326 <_svfiprintf_r+0x7a>
 8008324:	e0a6      	b.n	8008474 <_svfiprintf_r+0x1c8>
 8008326:	2201      	movs	r2, #1
 8008328:	2300      	movs	r3, #0
 800832a:	4252      	negs	r2, r2
 800832c:	6062      	str	r2, [r4, #4]
 800832e:	a904      	add	r1, sp, #16
 8008330:	3254      	adds	r2, #84	@ 0x54
 8008332:	1852      	adds	r2, r2, r1
 8008334:	1c6e      	adds	r6, r5, #1
 8008336:	6023      	str	r3, [r4, #0]
 8008338:	60e3      	str	r3, [r4, #12]
 800833a:	60a3      	str	r3, [r4, #8]
 800833c:	7013      	strb	r3, [r2, #0]
 800833e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008340:	4b54      	ldr	r3, [pc, #336]	@ (8008494 <_svfiprintf_r+0x1e8>)
 8008342:	2205      	movs	r2, #5
 8008344:	0018      	movs	r0, r3
 8008346:	7831      	ldrb	r1, [r6, #0]
 8008348:	9305      	str	r3, [sp, #20]
 800834a:	f7fe fc18 	bl	8006b7e <memchr>
 800834e:	1c75      	adds	r5, r6, #1
 8008350:	2800      	cmp	r0, #0
 8008352:	d11f      	bne.n	8008394 <_svfiprintf_r+0xe8>
 8008354:	6822      	ldr	r2, [r4, #0]
 8008356:	06d3      	lsls	r3, r2, #27
 8008358:	d504      	bpl.n	8008364 <_svfiprintf_r+0xb8>
 800835a:	2353      	movs	r3, #83	@ 0x53
 800835c:	a904      	add	r1, sp, #16
 800835e:	185b      	adds	r3, r3, r1
 8008360:	2120      	movs	r1, #32
 8008362:	7019      	strb	r1, [r3, #0]
 8008364:	0713      	lsls	r3, r2, #28
 8008366:	d504      	bpl.n	8008372 <_svfiprintf_r+0xc6>
 8008368:	2353      	movs	r3, #83	@ 0x53
 800836a:	a904      	add	r1, sp, #16
 800836c:	185b      	adds	r3, r3, r1
 800836e:	212b      	movs	r1, #43	@ 0x2b
 8008370:	7019      	strb	r1, [r3, #0]
 8008372:	7833      	ldrb	r3, [r6, #0]
 8008374:	2b2a      	cmp	r3, #42	@ 0x2a
 8008376:	d016      	beq.n	80083a6 <_svfiprintf_r+0xfa>
 8008378:	0035      	movs	r5, r6
 800837a:	2100      	movs	r1, #0
 800837c:	200a      	movs	r0, #10
 800837e:	68e3      	ldr	r3, [r4, #12]
 8008380:	782a      	ldrb	r2, [r5, #0]
 8008382:	1c6e      	adds	r6, r5, #1
 8008384:	3a30      	subs	r2, #48	@ 0x30
 8008386:	2a09      	cmp	r2, #9
 8008388:	d950      	bls.n	800842c <_svfiprintf_r+0x180>
 800838a:	2900      	cmp	r1, #0
 800838c:	d111      	bne.n	80083b2 <_svfiprintf_r+0x106>
 800838e:	e017      	b.n	80083c0 <_svfiprintf_r+0x114>
 8008390:	3501      	adds	r5, #1
 8008392:	e7af      	b.n	80082f4 <_svfiprintf_r+0x48>
 8008394:	9b05      	ldr	r3, [sp, #20]
 8008396:	6822      	ldr	r2, [r4, #0]
 8008398:	1ac0      	subs	r0, r0, r3
 800839a:	2301      	movs	r3, #1
 800839c:	4083      	lsls	r3, r0
 800839e:	4313      	orrs	r3, r2
 80083a0:	002e      	movs	r6, r5
 80083a2:	6023      	str	r3, [r4, #0]
 80083a4:	e7cc      	b.n	8008340 <_svfiprintf_r+0x94>
 80083a6:	9b07      	ldr	r3, [sp, #28]
 80083a8:	1d19      	adds	r1, r3, #4
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	9107      	str	r1, [sp, #28]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	db01      	blt.n	80083b6 <_svfiprintf_r+0x10a>
 80083b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083b4:	e004      	b.n	80083c0 <_svfiprintf_r+0x114>
 80083b6:	425b      	negs	r3, r3
 80083b8:	60e3      	str	r3, [r4, #12]
 80083ba:	2302      	movs	r3, #2
 80083bc:	4313      	orrs	r3, r2
 80083be:	6023      	str	r3, [r4, #0]
 80083c0:	782b      	ldrb	r3, [r5, #0]
 80083c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80083c4:	d10c      	bne.n	80083e0 <_svfiprintf_r+0x134>
 80083c6:	786b      	ldrb	r3, [r5, #1]
 80083c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ca:	d134      	bne.n	8008436 <_svfiprintf_r+0x18a>
 80083cc:	9b07      	ldr	r3, [sp, #28]
 80083ce:	3502      	adds	r5, #2
 80083d0:	1d1a      	adds	r2, r3, #4
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	9207      	str	r2, [sp, #28]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da01      	bge.n	80083de <_svfiprintf_r+0x132>
 80083da:	2301      	movs	r3, #1
 80083dc:	425b      	negs	r3, r3
 80083de:	9309      	str	r3, [sp, #36]	@ 0x24
 80083e0:	4e2d      	ldr	r6, [pc, #180]	@ (8008498 <_svfiprintf_r+0x1ec>)
 80083e2:	2203      	movs	r2, #3
 80083e4:	0030      	movs	r0, r6
 80083e6:	7829      	ldrb	r1, [r5, #0]
 80083e8:	f7fe fbc9 	bl	8006b7e <memchr>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d006      	beq.n	80083fe <_svfiprintf_r+0x152>
 80083f0:	2340      	movs	r3, #64	@ 0x40
 80083f2:	1b80      	subs	r0, r0, r6
 80083f4:	4083      	lsls	r3, r0
 80083f6:	6822      	ldr	r2, [r4, #0]
 80083f8:	3501      	adds	r5, #1
 80083fa:	4313      	orrs	r3, r2
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	7829      	ldrb	r1, [r5, #0]
 8008400:	2206      	movs	r2, #6
 8008402:	4826      	ldr	r0, [pc, #152]	@ (800849c <_svfiprintf_r+0x1f0>)
 8008404:	1c6e      	adds	r6, r5, #1
 8008406:	7621      	strb	r1, [r4, #24]
 8008408:	f7fe fbb9 	bl	8006b7e <memchr>
 800840c:	2800      	cmp	r0, #0
 800840e:	d038      	beq.n	8008482 <_svfiprintf_r+0x1d6>
 8008410:	4b23      	ldr	r3, [pc, #140]	@ (80084a0 <_svfiprintf_r+0x1f4>)
 8008412:	2b00      	cmp	r3, #0
 8008414:	d122      	bne.n	800845c <_svfiprintf_r+0x1b0>
 8008416:	2207      	movs	r2, #7
 8008418:	9b07      	ldr	r3, [sp, #28]
 800841a:	3307      	adds	r3, #7
 800841c:	4393      	bics	r3, r2
 800841e:	3308      	adds	r3, #8
 8008420:	9307      	str	r3, [sp, #28]
 8008422:	6963      	ldr	r3, [r4, #20]
 8008424:	9a04      	ldr	r2, [sp, #16]
 8008426:	189b      	adds	r3, r3, r2
 8008428:	6163      	str	r3, [r4, #20]
 800842a:	e762      	b.n	80082f2 <_svfiprintf_r+0x46>
 800842c:	4343      	muls	r3, r0
 800842e:	0035      	movs	r5, r6
 8008430:	2101      	movs	r1, #1
 8008432:	189b      	adds	r3, r3, r2
 8008434:	e7a4      	b.n	8008380 <_svfiprintf_r+0xd4>
 8008436:	2300      	movs	r3, #0
 8008438:	200a      	movs	r0, #10
 800843a:	0019      	movs	r1, r3
 800843c:	3501      	adds	r5, #1
 800843e:	6063      	str	r3, [r4, #4]
 8008440:	782a      	ldrb	r2, [r5, #0]
 8008442:	1c6e      	adds	r6, r5, #1
 8008444:	3a30      	subs	r2, #48	@ 0x30
 8008446:	2a09      	cmp	r2, #9
 8008448:	d903      	bls.n	8008452 <_svfiprintf_r+0x1a6>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0c8      	beq.n	80083e0 <_svfiprintf_r+0x134>
 800844e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008450:	e7c6      	b.n	80083e0 <_svfiprintf_r+0x134>
 8008452:	4341      	muls	r1, r0
 8008454:	0035      	movs	r5, r6
 8008456:	2301      	movs	r3, #1
 8008458:	1889      	adds	r1, r1, r2
 800845a:	e7f1      	b.n	8008440 <_svfiprintf_r+0x194>
 800845c:	aa07      	add	r2, sp, #28
 800845e:	9200      	str	r2, [sp, #0]
 8008460:	0021      	movs	r1, r4
 8008462:	003a      	movs	r2, r7
 8008464:	4b0f      	ldr	r3, [pc, #60]	@ (80084a4 <_svfiprintf_r+0x1f8>)
 8008466:	9803      	ldr	r0, [sp, #12]
 8008468:	f7fd fe16 	bl	8006098 <_printf_float>
 800846c:	9004      	str	r0, [sp, #16]
 800846e:	9b04      	ldr	r3, [sp, #16]
 8008470:	3301      	adds	r3, #1
 8008472:	d1d6      	bne.n	8008422 <_svfiprintf_r+0x176>
 8008474:	89bb      	ldrh	r3, [r7, #12]
 8008476:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008478:	065b      	lsls	r3, r3, #25
 800847a:	d500      	bpl.n	800847e <_svfiprintf_r+0x1d2>
 800847c:	e72c      	b.n	80082d8 <_svfiprintf_r+0x2c>
 800847e:	b021      	add	sp, #132	@ 0x84
 8008480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008482:	aa07      	add	r2, sp, #28
 8008484:	9200      	str	r2, [sp, #0]
 8008486:	0021      	movs	r1, r4
 8008488:	003a      	movs	r2, r7
 800848a:	4b06      	ldr	r3, [pc, #24]	@ (80084a4 <_svfiprintf_r+0x1f8>)
 800848c:	9803      	ldr	r0, [sp, #12]
 800848e:	f7fe f8b1 	bl	80065f4 <_printf_i>
 8008492:	e7eb      	b.n	800846c <_svfiprintf_r+0x1c0>
 8008494:	08009080 	.word	0x08009080
 8008498:	08009086 	.word	0x08009086
 800849c:	0800908a 	.word	0x0800908a
 80084a0:	08006099 	.word	0x08006099
 80084a4:	080081ed 	.word	0x080081ed

080084a8 <__sflush_r>:
 80084a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084aa:	220c      	movs	r2, #12
 80084ac:	5e8b      	ldrsh	r3, [r1, r2]
 80084ae:	0005      	movs	r5, r0
 80084b0:	000c      	movs	r4, r1
 80084b2:	071a      	lsls	r2, r3, #28
 80084b4:	d456      	bmi.n	8008564 <__sflush_r+0xbc>
 80084b6:	684a      	ldr	r2, [r1, #4]
 80084b8:	2a00      	cmp	r2, #0
 80084ba:	dc02      	bgt.n	80084c2 <__sflush_r+0x1a>
 80084bc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80084be:	2a00      	cmp	r2, #0
 80084c0:	dd4e      	ble.n	8008560 <__sflush_r+0xb8>
 80084c2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80084c4:	2f00      	cmp	r7, #0
 80084c6:	d04b      	beq.n	8008560 <__sflush_r+0xb8>
 80084c8:	2200      	movs	r2, #0
 80084ca:	2080      	movs	r0, #128	@ 0x80
 80084cc:	682e      	ldr	r6, [r5, #0]
 80084ce:	602a      	str	r2, [r5, #0]
 80084d0:	001a      	movs	r2, r3
 80084d2:	0140      	lsls	r0, r0, #5
 80084d4:	6a21      	ldr	r1, [r4, #32]
 80084d6:	4002      	ands	r2, r0
 80084d8:	4203      	tst	r3, r0
 80084da:	d033      	beq.n	8008544 <__sflush_r+0x9c>
 80084dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084de:	89a3      	ldrh	r3, [r4, #12]
 80084e0:	075b      	lsls	r3, r3, #29
 80084e2:	d506      	bpl.n	80084f2 <__sflush_r+0x4a>
 80084e4:	6863      	ldr	r3, [r4, #4]
 80084e6:	1ad2      	subs	r2, r2, r3
 80084e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <__sflush_r+0x4a>
 80084ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084f0:	1ad2      	subs	r2, r2, r3
 80084f2:	2300      	movs	r3, #0
 80084f4:	0028      	movs	r0, r5
 80084f6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80084f8:	6a21      	ldr	r1, [r4, #32]
 80084fa:	47b8      	blx	r7
 80084fc:	89a2      	ldrh	r2, [r4, #12]
 80084fe:	1c43      	adds	r3, r0, #1
 8008500:	d106      	bne.n	8008510 <__sflush_r+0x68>
 8008502:	6829      	ldr	r1, [r5, #0]
 8008504:	291d      	cmp	r1, #29
 8008506:	d846      	bhi.n	8008596 <__sflush_r+0xee>
 8008508:	4b29      	ldr	r3, [pc, #164]	@ (80085b0 <__sflush_r+0x108>)
 800850a:	410b      	asrs	r3, r1
 800850c:	07db      	lsls	r3, r3, #31
 800850e:	d442      	bmi.n	8008596 <__sflush_r+0xee>
 8008510:	2300      	movs	r3, #0
 8008512:	6063      	str	r3, [r4, #4]
 8008514:	6923      	ldr	r3, [r4, #16]
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	04d2      	lsls	r2, r2, #19
 800851a:	d505      	bpl.n	8008528 <__sflush_r+0x80>
 800851c:	1c43      	adds	r3, r0, #1
 800851e:	d102      	bne.n	8008526 <__sflush_r+0x7e>
 8008520:	682b      	ldr	r3, [r5, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d100      	bne.n	8008528 <__sflush_r+0x80>
 8008526:	6560      	str	r0, [r4, #84]	@ 0x54
 8008528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800852a:	602e      	str	r6, [r5, #0]
 800852c:	2900      	cmp	r1, #0
 800852e:	d017      	beq.n	8008560 <__sflush_r+0xb8>
 8008530:	0023      	movs	r3, r4
 8008532:	3344      	adds	r3, #68	@ 0x44
 8008534:	4299      	cmp	r1, r3
 8008536:	d002      	beq.n	800853e <__sflush_r+0x96>
 8008538:	0028      	movs	r0, r5
 800853a:	f7ff f9ad 	bl	8007898 <_free_r>
 800853e:	2300      	movs	r3, #0
 8008540:	6363      	str	r3, [r4, #52]	@ 0x34
 8008542:	e00d      	b.n	8008560 <__sflush_r+0xb8>
 8008544:	2301      	movs	r3, #1
 8008546:	0028      	movs	r0, r5
 8008548:	47b8      	blx	r7
 800854a:	0002      	movs	r2, r0
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	d1c6      	bne.n	80084de <__sflush_r+0x36>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d0c3      	beq.n	80084de <__sflush_r+0x36>
 8008556:	2b1d      	cmp	r3, #29
 8008558:	d001      	beq.n	800855e <__sflush_r+0xb6>
 800855a:	2b16      	cmp	r3, #22
 800855c:	d11a      	bne.n	8008594 <__sflush_r+0xec>
 800855e:	602e      	str	r6, [r5, #0]
 8008560:	2000      	movs	r0, #0
 8008562:	e01e      	b.n	80085a2 <__sflush_r+0xfa>
 8008564:	690e      	ldr	r6, [r1, #16]
 8008566:	2e00      	cmp	r6, #0
 8008568:	d0fa      	beq.n	8008560 <__sflush_r+0xb8>
 800856a:	680f      	ldr	r7, [r1, #0]
 800856c:	600e      	str	r6, [r1, #0]
 800856e:	1bba      	subs	r2, r7, r6
 8008570:	9201      	str	r2, [sp, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	079b      	lsls	r3, r3, #30
 8008576:	d100      	bne.n	800857a <__sflush_r+0xd2>
 8008578:	694a      	ldr	r2, [r1, #20]
 800857a:	60a2      	str	r2, [r4, #8]
 800857c:	9b01      	ldr	r3, [sp, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	ddee      	ble.n	8008560 <__sflush_r+0xb8>
 8008582:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008584:	0032      	movs	r2, r6
 8008586:	001f      	movs	r7, r3
 8008588:	0028      	movs	r0, r5
 800858a:	9b01      	ldr	r3, [sp, #4]
 800858c:	6a21      	ldr	r1, [r4, #32]
 800858e:	47b8      	blx	r7
 8008590:	2800      	cmp	r0, #0
 8008592:	dc07      	bgt.n	80085a4 <__sflush_r+0xfc>
 8008594:	89a2      	ldrh	r2, [r4, #12]
 8008596:	2340      	movs	r3, #64	@ 0x40
 8008598:	2001      	movs	r0, #1
 800859a:	4313      	orrs	r3, r2
 800859c:	b21b      	sxth	r3, r3
 800859e:	81a3      	strh	r3, [r4, #12]
 80085a0:	4240      	negs	r0, r0
 80085a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	1836      	adds	r6, r6, r0
 80085a8:	1a1b      	subs	r3, r3, r0
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	e7e6      	b.n	800857c <__sflush_r+0xd4>
 80085ae:	46c0      	nop			@ (mov r8, r8)
 80085b0:	dfbffffe 	.word	0xdfbffffe

080085b4 <_fflush_r>:
 80085b4:	690b      	ldr	r3, [r1, #16]
 80085b6:	b570      	push	{r4, r5, r6, lr}
 80085b8:	0005      	movs	r5, r0
 80085ba:	000c      	movs	r4, r1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d102      	bne.n	80085c6 <_fflush_r+0x12>
 80085c0:	2500      	movs	r5, #0
 80085c2:	0028      	movs	r0, r5
 80085c4:	bd70      	pop	{r4, r5, r6, pc}
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d004      	beq.n	80085d4 <_fflush_r+0x20>
 80085ca:	6a03      	ldr	r3, [r0, #32]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <_fflush_r+0x20>
 80085d0:	f7fe f9ae 	bl	8006930 <__sinit>
 80085d4:	220c      	movs	r2, #12
 80085d6:	5ea3      	ldrsh	r3, [r4, r2]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d0f1      	beq.n	80085c0 <_fflush_r+0xc>
 80085dc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085de:	07d2      	lsls	r2, r2, #31
 80085e0:	d404      	bmi.n	80085ec <_fflush_r+0x38>
 80085e2:	059b      	lsls	r3, r3, #22
 80085e4:	d402      	bmi.n	80085ec <_fflush_r+0x38>
 80085e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085e8:	f7fe fac7 	bl	8006b7a <__retarget_lock_acquire_recursive>
 80085ec:	0028      	movs	r0, r5
 80085ee:	0021      	movs	r1, r4
 80085f0:	f7ff ff5a 	bl	80084a8 <__sflush_r>
 80085f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085f6:	0005      	movs	r5, r0
 80085f8:	07db      	lsls	r3, r3, #31
 80085fa:	d4e2      	bmi.n	80085c2 <_fflush_r+0xe>
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	059b      	lsls	r3, r3, #22
 8008600:	d4df      	bmi.n	80085c2 <_fflush_r+0xe>
 8008602:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008604:	f7fe faba 	bl	8006b7c <__retarget_lock_release_recursive>
 8008608:	e7db      	b.n	80085c2 <_fflush_r+0xe>

0800860a <memmove>:
 800860a:	b510      	push	{r4, lr}
 800860c:	4288      	cmp	r0, r1
 800860e:	d806      	bhi.n	800861e <memmove+0x14>
 8008610:	2300      	movs	r3, #0
 8008612:	429a      	cmp	r2, r3
 8008614:	d008      	beq.n	8008628 <memmove+0x1e>
 8008616:	5ccc      	ldrb	r4, [r1, r3]
 8008618:	54c4      	strb	r4, [r0, r3]
 800861a:	3301      	adds	r3, #1
 800861c:	e7f9      	b.n	8008612 <memmove+0x8>
 800861e:	188b      	adds	r3, r1, r2
 8008620:	4298      	cmp	r0, r3
 8008622:	d2f5      	bcs.n	8008610 <memmove+0x6>
 8008624:	3a01      	subs	r2, #1
 8008626:	d200      	bcs.n	800862a <memmove+0x20>
 8008628:	bd10      	pop	{r4, pc}
 800862a:	5c8b      	ldrb	r3, [r1, r2]
 800862c:	5483      	strb	r3, [r0, r2]
 800862e:	e7f9      	b.n	8008624 <memmove+0x1a>

08008630 <_sbrk_r>:
 8008630:	2300      	movs	r3, #0
 8008632:	b570      	push	{r4, r5, r6, lr}
 8008634:	4d06      	ldr	r5, [pc, #24]	@ (8008650 <_sbrk_r+0x20>)
 8008636:	0004      	movs	r4, r0
 8008638:	0008      	movs	r0, r1
 800863a:	602b      	str	r3, [r5, #0]
 800863c:	f7fb f99c 	bl	8003978 <_sbrk>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d103      	bne.n	800864c <_sbrk_r+0x1c>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d000      	beq.n	800864c <_sbrk_r+0x1c>
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	bd70      	pop	{r4, r5, r6, pc}
 800864e:	46c0      	nop			@ (mov r8, r8)
 8008650:	20000544 	.word	0x20000544

08008654 <memcpy>:
 8008654:	2300      	movs	r3, #0
 8008656:	b510      	push	{r4, lr}
 8008658:	429a      	cmp	r2, r3
 800865a:	d100      	bne.n	800865e <memcpy+0xa>
 800865c:	bd10      	pop	{r4, pc}
 800865e:	5ccc      	ldrb	r4, [r1, r3]
 8008660:	54c4      	strb	r4, [r0, r3]
 8008662:	3301      	adds	r3, #1
 8008664:	e7f8      	b.n	8008658 <memcpy+0x4>
	...

08008668 <__assert_func>:
 8008668:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800866a:	0014      	movs	r4, r2
 800866c:	001a      	movs	r2, r3
 800866e:	4b09      	ldr	r3, [pc, #36]	@ (8008694 <__assert_func+0x2c>)
 8008670:	0005      	movs	r5, r0
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	000e      	movs	r6, r1
 8008676:	68d8      	ldr	r0, [r3, #12]
 8008678:	4b07      	ldr	r3, [pc, #28]	@ (8008698 <__assert_func+0x30>)
 800867a:	2c00      	cmp	r4, #0
 800867c:	d101      	bne.n	8008682 <__assert_func+0x1a>
 800867e:	4b07      	ldr	r3, [pc, #28]	@ (800869c <__assert_func+0x34>)
 8008680:	001c      	movs	r4, r3
 8008682:	4907      	ldr	r1, [pc, #28]	@ (80086a0 <__assert_func+0x38>)
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	9402      	str	r4, [sp, #8]
 8008688:	002b      	movs	r3, r5
 800868a:	9600      	str	r6, [sp, #0]
 800868c:	f000 f886 	bl	800879c <fiprintf>
 8008690:	f000 f894 	bl	80087bc <abort>
 8008694:	20000018 	.word	0x20000018
 8008698:	0800909b 	.word	0x0800909b
 800869c:	080090d6 	.word	0x080090d6
 80086a0:	080090a8 	.word	0x080090a8

080086a4 <_calloc_r>:
 80086a4:	b570      	push	{r4, r5, r6, lr}
 80086a6:	0c0b      	lsrs	r3, r1, #16
 80086a8:	0c15      	lsrs	r5, r2, #16
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d11e      	bne.n	80086ec <_calloc_r+0x48>
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	d10c      	bne.n	80086cc <_calloc_r+0x28>
 80086b2:	b289      	uxth	r1, r1
 80086b4:	b294      	uxth	r4, r2
 80086b6:	434c      	muls	r4, r1
 80086b8:	0021      	movs	r1, r4
 80086ba:	f7ff f963 	bl	8007984 <_malloc_r>
 80086be:	1e05      	subs	r5, r0, #0
 80086c0:	d01a      	beq.n	80086f8 <_calloc_r+0x54>
 80086c2:	0022      	movs	r2, r4
 80086c4:	2100      	movs	r1, #0
 80086c6:	f7fe f9d3 	bl	8006a70 <memset>
 80086ca:	e016      	b.n	80086fa <_calloc_r+0x56>
 80086cc:	1c2b      	adds	r3, r5, #0
 80086ce:	1c0c      	adds	r4, r1, #0
 80086d0:	b289      	uxth	r1, r1
 80086d2:	b292      	uxth	r2, r2
 80086d4:	434a      	muls	r2, r1
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	b2a1      	uxth	r1, r4
 80086da:	4359      	muls	r1, r3
 80086dc:	0c14      	lsrs	r4, r2, #16
 80086de:	190c      	adds	r4, r1, r4
 80086e0:	0c23      	lsrs	r3, r4, #16
 80086e2:	d107      	bne.n	80086f4 <_calloc_r+0x50>
 80086e4:	0424      	lsls	r4, r4, #16
 80086e6:	b292      	uxth	r2, r2
 80086e8:	4314      	orrs	r4, r2
 80086ea:	e7e5      	b.n	80086b8 <_calloc_r+0x14>
 80086ec:	2d00      	cmp	r5, #0
 80086ee:	d101      	bne.n	80086f4 <_calloc_r+0x50>
 80086f0:	1c14      	adds	r4, r2, #0
 80086f2:	e7ed      	b.n	80086d0 <_calloc_r+0x2c>
 80086f4:	230c      	movs	r3, #12
 80086f6:	6003      	str	r3, [r0, #0]
 80086f8:	2500      	movs	r5, #0
 80086fa:	0028      	movs	r0, r5
 80086fc:	bd70      	pop	{r4, r5, r6, pc}

080086fe <__ascii_mbtowc>:
 80086fe:	b082      	sub	sp, #8
 8008700:	2900      	cmp	r1, #0
 8008702:	d100      	bne.n	8008706 <__ascii_mbtowc+0x8>
 8008704:	a901      	add	r1, sp, #4
 8008706:	1e10      	subs	r0, r2, #0
 8008708:	d006      	beq.n	8008718 <__ascii_mbtowc+0x1a>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d006      	beq.n	800871c <__ascii_mbtowc+0x1e>
 800870e:	7813      	ldrb	r3, [r2, #0]
 8008710:	600b      	str	r3, [r1, #0]
 8008712:	7810      	ldrb	r0, [r2, #0]
 8008714:	1e43      	subs	r3, r0, #1
 8008716:	4198      	sbcs	r0, r3
 8008718:	b002      	add	sp, #8
 800871a:	4770      	bx	lr
 800871c:	2002      	movs	r0, #2
 800871e:	4240      	negs	r0, r0
 8008720:	e7fa      	b.n	8008718 <__ascii_mbtowc+0x1a>

08008722 <_realloc_r>:
 8008722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008724:	0006      	movs	r6, r0
 8008726:	000c      	movs	r4, r1
 8008728:	0015      	movs	r5, r2
 800872a:	2900      	cmp	r1, #0
 800872c:	d105      	bne.n	800873a <_realloc_r+0x18>
 800872e:	0011      	movs	r1, r2
 8008730:	f7ff f928 	bl	8007984 <_malloc_r>
 8008734:	0004      	movs	r4, r0
 8008736:	0020      	movs	r0, r4
 8008738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800873a:	2a00      	cmp	r2, #0
 800873c:	d103      	bne.n	8008746 <_realloc_r+0x24>
 800873e:	f7ff f8ab 	bl	8007898 <_free_r>
 8008742:	2400      	movs	r4, #0
 8008744:	e7f7      	b.n	8008736 <_realloc_r+0x14>
 8008746:	f000 f840 	bl	80087ca <_malloc_usable_size_r>
 800874a:	0007      	movs	r7, r0
 800874c:	4285      	cmp	r5, r0
 800874e:	d802      	bhi.n	8008756 <_realloc_r+0x34>
 8008750:	0843      	lsrs	r3, r0, #1
 8008752:	42ab      	cmp	r3, r5
 8008754:	d3ef      	bcc.n	8008736 <_realloc_r+0x14>
 8008756:	0029      	movs	r1, r5
 8008758:	0030      	movs	r0, r6
 800875a:	f7ff f913 	bl	8007984 <_malloc_r>
 800875e:	9001      	str	r0, [sp, #4]
 8008760:	2800      	cmp	r0, #0
 8008762:	d0ee      	beq.n	8008742 <_realloc_r+0x20>
 8008764:	002a      	movs	r2, r5
 8008766:	42bd      	cmp	r5, r7
 8008768:	d900      	bls.n	800876c <_realloc_r+0x4a>
 800876a:	003a      	movs	r2, r7
 800876c:	0021      	movs	r1, r4
 800876e:	9801      	ldr	r0, [sp, #4]
 8008770:	f7ff ff70 	bl	8008654 <memcpy>
 8008774:	0021      	movs	r1, r4
 8008776:	0030      	movs	r0, r6
 8008778:	f7ff f88e 	bl	8007898 <_free_r>
 800877c:	9c01      	ldr	r4, [sp, #4]
 800877e:	e7da      	b.n	8008736 <_realloc_r+0x14>

08008780 <__ascii_wctomb>:
 8008780:	0003      	movs	r3, r0
 8008782:	1e08      	subs	r0, r1, #0
 8008784:	d005      	beq.n	8008792 <__ascii_wctomb+0x12>
 8008786:	2aff      	cmp	r2, #255	@ 0xff
 8008788:	d904      	bls.n	8008794 <__ascii_wctomb+0x14>
 800878a:	228a      	movs	r2, #138	@ 0x8a
 800878c:	2001      	movs	r0, #1
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	4240      	negs	r0, r0
 8008792:	4770      	bx	lr
 8008794:	2001      	movs	r0, #1
 8008796:	700a      	strb	r2, [r1, #0]
 8008798:	e7fb      	b.n	8008792 <__ascii_wctomb+0x12>
	...

0800879c <fiprintf>:
 800879c:	b40e      	push	{r1, r2, r3}
 800879e:	b517      	push	{r0, r1, r2, r4, lr}
 80087a0:	4c05      	ldr	r4, [pc, #20]	@ (80087b8 <fiprintf+0x1c>)
 80087a2:	ab05      	add	r3, sp, #20
 80087a4:	cb04      	ldmia	r3!, {r2}
 80087a6:	0001      	movs	r1, r0
 80087a8:	6820      	ldr	r0, [r4, #0]
 80087aa:	9301      	str	r3, [sp, #4]
 80087ac:	f000 f83c 	bl	8008828 <_vfiprintf_r>
 80087b0:	bc1e      	pop	{r1, r2, r3, r4}
 80087b2:	bc08      	pop	{r3}
 80087b4:	b003      	add	sp, #12
 80087b6:	4718      	bx	r3
 80087b8:	20000018 	.word	0x20000018

080087bc <abort>:
 80087bc:	2006      	movs	r0, #6
 80087be:	b510      	push	{r4, lr}
 80087c0:	f000 fa18 	bl	8008bf4 <raise>
 80087c4:	2001      	movs	r0, #1
 80087c6:	f7fb f864 	bl	8003892 <_exit>

080087ca <_malloc_usable_size_r>:
 80087ca:	1f0b      	subs	r3, r1, #4
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	1f18      	subs	r0, r3, #4
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	da01      	bge.n	80087d8 <_malloc_usable_size_r+0xe>
 80087d4:	580b      	ldr	r3, [r1, r0]
 80087d6:	18c0      	adds	r0, r0, r3
 80087d8:	4770      	bx	lr

080087da <__sfputc_r>:
 80087da:	6893      	ldr	r3, [r2, #8]
 80087dc:	b510      	push	{r4, lr}
 80087de:	3b01      	subs	r3, #1
 80087e0:	6093      	str	r3, [r2, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	da04      	bge.n	80087f0 <__sfputc_r+0x16>
 80087e6:	6994      	ldr	r4, [r2, #24]
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	db07      	blt.n	80087fc <__sfputc_r+0x22>
 80087ec:	290a      	cmp	r1, #10
 80087ee:	d005      	beq.n	80087fc <__sfputc_r+0x22>
 80087f0:	6813      	ldr	r3, [r2, #0]
 80087f2:	1c58      	adds	r0, r3, #1
 80087f4:	6010      	str	r0, [r2, #0]
 80087f6:	7019      	strb	r1, [r3, #0]
 80087f8:	0008      	movs	r0, r1
 80087fa:	bd10      	pop	{r4, pc}
 80087fc:	f000 f930 	bl	8008a60 <__swbuf_r>
 8008800:	0001      	movs	r1, r0
 8008802:	e7f9      	b.n	80087f8 <__sfputc_r+0x1e>

08008804 <__sfputs_r>:
 8008804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008806:	0006      	movs	r6, r0
 8008808:	000f      	movs	r7, r1
 800880a:	0014      	movs	r4, r2
 800880c:	18d5      	adds	r5, r2, r3
 800880e:	42ac      	cmp	r4, r5
 8008810:	d101      	bne.n	8008816 <__sfputs_r+0x12>
 8008812:	2000      	movs	r0, #0
 8008814:	e007      	b.n	8008826 <__sfputs_r+0x22>
 8008816:	7821      	ldrb	r1, [r4, #0]
 8008818:	003a      	movs	r2, r7
 800881a:	0030      	movs	r0, r6
 800881c:	f7ff ffdd 	bl	80087da <__sfputc_r>
 8008820:	3401      	adds	r4, #1
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d1f3      	bne.n	800880e <__sfputs_r+0xa>
 8008826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008828 <_vfiprintf_r>:
 8008828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800882a:	b0a1      	sub	sp, #132	@ 0x84
 800882c:	000f      	movs	r7, r1
 800882e:	0015      	movs	r5, r2
 8008830:	001e      	movs	r6, r3
 8008832:	9003      	str	r0, [sp, #12]
 8008834:	2800      	cmp	r0, #0
 8008836:	d004      	beq.n	8008842 <_vfiprintf_r+0x1a>
 8008838:	6a03      	ldr	r3, [r0, #32]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <_vfiprintf_r+0x1a>
 800883e:	f7fe f877 	bl	8006930 <__sinit>
 8008842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008844:	07db      	lsls	r3, r3, #31
 8008846:	d405      	bmi.n	8008854 <_vfiprintf_r+0x2c>
 8008848:	89bb      	ldrh	r3, [r7, #12]
 800884a:	059b      	lsls	r3, r3, #22
 800884c:	d402      	bmi.n	8008854 <_vfiprintf_r+0x2c>
 800884e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008850:	f7fe f993 	bl	8006b7a <__retarget_lock_acquire_recursive>
 8008854:	89bb      	ldrh	r3, [r7, #12]
 8008856:	071b      	lsls	r3, r3, #28
 8008858:	d502      	bpl.n	8008860 <_vfiprintf_r+0x38>
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d113      	bne.n	8008888 <_vfiprintf_r+0x60>
 8008860:	0039      	movs	r1, r7
 8008862:	9803      	ldr	r0, [sp, #12]
 8008864:	f000 f93e 	bl	8008ae4 <__swsetup_r>
 8008868:	2800      	cmp	r0, #0
 800886a:	d00d      	beq.n	8008888 <_vfiprintf_r+0x60>
 800886c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800886e:	07db      	lsls	r3, r3, #31
 8008870:	d503      	bpl.n	800887a <_vfiprintf_r+0x52>
 8008872:	2001      	movs	r0, #1
 8008874:	4240      	negs	r0, r0
 8008876:	b021      	add	sp, #132	@ 0x84
 8008878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800887a:	89bb      	ldrh	r3, [r7, #12]
 800887c:	059b      	lsls	r3, r3, #22
 800887e:	d4f8      	bmi.n	8008872 <_vfiprintf_r+0x4a>
 8008880:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008882:	f7fe f97b 	bl	8006b7c <__retarget_lock_release_recursive>
 8008886:	e7f4      	b.n	8008872 <_vfiprintf_r+0x4a>
 8008888:	2300      	movs	r3, #0
 800888a:	ac08      	add	r4, sp, #32
 800888c:	6163      	str	r3, [r4, #20]
 800888e:	3320      	adds	r3, #32
 8008890:	7663      	strb	r3, [r4, #25]
 8008892:	3310      	adds	r3, #16
 8008894:	76a3      	strb	r3, [r4, #26]
 8008896:	9607      	str	r6, [sp, #28]
 8008898:	002e      	movs	r6, r5
 800889a:	7833      	ldrb	r3, [r6, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <_vfiprintf_r+0x7c>
 80088a0:	2b25      	cmp	r3, #37	@ 0x25
 80088a2:	d148      	bne.n	8008936 <_vfiprintf_r+0x10e>
 80088a4:	1b73      	subs	r3, r6, r5
 80088a6:	9305      	str	r3, [sp, #20]
 80088a8:	42ae      	cmp	r6, r5
 80088aa:	d00b      	beq.n	80088c4 <_vfiprintf_r+0x9c>
 80088ac:	002a      	movs	r2, r5
 80088ae:	0039      	movs	r1, r7
 80088b0:	9803      	ldr	r0, [sp, #12]
 80088b2:	f7ff ffa7 	bl	8008804 <__sfputs_r>
 80088b6:	3001      	adds	r0, #1
 80088b8:	d100      	bne.n	80088bc <_vfiprintf_r+0x94>
 80088ba:	e0ae      	b.n	8008a1a <_vfiprintf_r+0x1f2>
 80088bc:	6963      	ldr	r3, [r4, #20]
 80088be:	9a05      	ldr	r2, [sp, #20]
 80088c0:	189b      	adds	r3, r3, r2
 80088c2:	6163      	str	r3, [r4, #20]
 80088c4:	7833      	ldrb	r3, [r6, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d100      	bne.n	80088cc <_vfiprintf_r+0xa4>
 80088ca:	e0a6      	b.n	8008a1a <_vfiprintf_r+0x1f2>
 80088cc:	2201      	movs	r2, #1
 80088ce:	2300      	movs	r3, #0
 80088d0:	4252      	negs	r2, r2
 80088d2:	6062      	str	r2, [r4, #4]
 80088d4:	a904      	add	r1, sp, #16
 80088d6:	3254      	adds	r2, #84	@ 0x54
 80088d8:	1852      	adds	r2, r2, r1
 80088da:	1c75      	adds	r5, r6, #1
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	60e3      	str	r3, [r4, #12]
 80088e0:	60a3      	str	r3, [r4, #8]
 80088e2:	7013      	strb	r3, [r2, #0]
 80088e4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80088e6:	4b59      	ldr	r3, [pc, #356]	@ (8008a4c <_vfiprintf_r+0x224>)
 80088e8:	2205      	movs	r2, #5
 80088ea:	0018      	movs	r0, r3
 80088ec:	7829      	ldrb	r1, [r5, #0]
 80088ee:	9305      	str	r3, [sp, #20]
 80088f0:	f7fe f945 	bl	8006b7e <memchr>
 80088f4:	1c6e      	adds	r6, r5, #1
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d11f      	bne.n	800893a <_vfiprintf_r+0x112>
 80088fa:	6822      	ldr	r2, [r4, #0]
 80088fc:	06d3      	lsls	r3, r2, #27
 80088fe:	d504      	bpl.n	800890a <_vfiprintf_r+0xe2>
 8008900:	2353      	movs	r3, #83	@ 0x53
 8008902:	a904      	add	r1, sp, #16
 8008904:	185b      	adds	r3, r3, r1
 8008906:	2120      	movs	r1, #32
 8008908:	7019      	strb	r1, [r3, #0]
 800890a:	0713      	lsls	r3, r2, #28
 800890c:	d504      	bpl.n	8008918 <_vfiprintf_r+0xf0>
 800890e:	2353      	movs	r3, #83	@ 0x53
 8008910:	a904      	add	r1, sp, #16
 8008912:	185b      	adds	r3, r3, r1
 8008914:	212b      	movs	r1, #43	@ 0x2b
 8008916:	7019      	strb	r1, [r3, #0]
 8008918:	782b      	ldrb	r3, [r5, #0]
 800891a:	2b2a      	cmp	r3, #42	@ 0x2a
 800891c:	d016      	beq.n	800894c <_vfiprintf_r+0x124>
 800891e:	002e      	movs	r6, r5
 8008920:	2100      	movs	r1, #0
 8008922:	200a      	movs	r0, #10
 8008924:	68e3      	ldr	r3, [r4, #12]
 8008926:	7832      	ldrb	r2, [r6, #0]
 8008928:	1c75      	adds	r5, r6, #1
 800892a:	3a30      	subs	r2, #48	@ 0x30
 800892c:	2a09      	cmp	r2, #9
 800892e:	d950      	bls.n	80089d2 <_vfiprintf_r+0x1aa>
 8008930:	2900      	cmp	r1, #0
 8008932:	d111      	bne.n	8008958 <_vfiprintf_r+0x130>
 8008934:	e017      	b.n	8008966 <_vfiprintf_r+0x13e>
 8008936:	3601      	adds	r6, #1
 8008938:	e7af      	b.n	800889a <_vfiprintf_r+0x72>
 800893a:	9b05      	ldr	r3, [sp, #20]
 800893c:	6822      	ldr	r2, [r4, #0]
 800893e:	1ac0      	subs	r0, r0, r3
 8008940:	2301      	movs	r3, #1
 8008942:	4083      	lsls	r3, r0
 8008944:	4313      	orrs	r3, r2
 8008946:	0035      	movs	r5, r6
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	e7cc      	b.n	80088e6 <_vfiprintf_r+0xbe>
 800894c:	9b07      	ldr	r3, [sp, #28]
 800894e:	1d19      	adds	r1, r3, #4
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	9107      	str	r1, [sp, #28]
 8008954:	2b00      	cmp	r3, #0
 8008956:	db01      	blt.n	800895c <_vfiprintf_r+0x134>
 8008958:	930b      	str	r3, [sp, #44]	@ 0x2c
 800895a:	e004      	b.n	8008966 <_vfiprintf_r+0x13e>
 800895c:	425b      	negs	r3, r3
 800895e:	60e3      	str	r3, [r4, #12]
 8008960:	2302      	movs	r3, #2
 8008962:	4313      	orrs	r3, r2
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	7833      	ldrb	r3, [r6, #0]
 8008968:	2b2e      	cmp	r3, #46	@ 0x2e
 800896a:	d10c      	bne.n	8008986 <_vfiprintf_r+0x15e>
 800896c:	7873      	ldrb	r3, [r6, #1]
 800896e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008970:	d134      	bne.n	80089dc <_vfiprintf_r+0x1b4>
 8008972:	9b07      	ldr	r3, [sp, #28]
 8008974:	3602      	adds	r6, #2
 8008976:	1d1a      	adds	r2, r3, #4
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	9207      	str	r2, [sp, #28]
 800897c:	2b00      	cmp	r3, #0
 800897e:	da01      	bge.n	8008984 <_vfiprintf_r+0x15c>
 8008980:	2301      	movs	r3, #1
 8008982:	425b      	negs	r3, r3
 8008984:	9309      	str	r3, [sp, #36]	@ 0x24
 8008986:	4d32      	ldr	r5, [pc, #200]	@ (8008a50 <_vfiprintf_r+0x228>)
 8008988:	2203      	movs	r2, #3
 800898a:	0028      	movs	r0, r5
 800898c:	7831      	ldrb	r1, [r6, #0]
 800898e:	f7fe f8f6 	bl	8006b7e <memchr>
 8008992:	2800      	cmp	r0, #0
 8008994:	d006      	beq.n	80089a4 <_vfiprintf_r+0x17c>
 8008996:	2340      	movs	r3, #64	@ 0x40
 8008998:	1b40      	subs	r0, r0, r5
 800899a:	4083      	lsls	r3, r0
 800899c:	6822      	ldr	r2, [r4, #0]
 800899e:	3601      	adds	r6, #1
 80089a0:	4313      	orrs	r3, r2
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	7831      	ldrb	r1, [r6, #0]
 80089a6:	2206      	movs	r2, #6
 80089a8:	482a      	ldr	r0, [pc, #168]	@ (8008a54 <_vfiprintf_r+0x22c>)
 80089aa:	1c75      	adds	r5, r6, #1
 80089ac:	7621      	strb	r1, [r4, #24]
 80089ae:	f7fe f8e6 	bl	8006b7e <memchr>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d040      	beq.n	8008a38 <_vfiprintf_r+0x210>
 80089b6:	4b28      	ldr	r3, [pc, #160]	@ (8008a58 <_vfiprintf_r+0x230>)
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d122      	bne.n	8008a02 <_vfiprintf_r+0x1da>
 80089bc:	2207      	movs	r2, #7
 80089be:	9b07      	ldr	r3, [sp, #28]
 80089c0:	3307      	adds	r3, #7
 80089c2:	4393      	bics	r3, r2
 80089c4:	3308      	adds	r3, #8
 80089c6:	9307      	str	r3, [sp, #28]
 80089c8:	6963      	ldr	r3, [r4, #20]
 80089ca:	9a04      	ldr	r2, [sp, #16]
 80089cc:	189b      	adds	r3, r3, r2
 80089ce:	6163      	str	r3, [r4, #20]
 80089d0:	e762      	b.n	8008898 <_vfiprintf_r+0x70>
 80089d2:	4343      	muls	r3, r0
 80089d4:	002e      	movs	r6, r5
 80089d6:	2101      	movs	r1, #1
 80089d8:	189b      	adds	r3, r3, r2
 80089da:	e7a4      	b.n	8008926 <_vfiprintf_r+0xfe>
 80089dc:	2300      	movs	r3, #0
 80089de:	200a      	movs	r0, #10
 80089e0:	0019      	movs	r1, r3
 80089e2:	3601      	adds	r6, #1
 80089e4:	6063      	str	r3, [r4, #4]
 80089e6:	7832      	ldrb	r2, [r6, #0]
 80089e8:	1c75      	adds	r5, r6, #1
 80089ea:	3a30      	subs	r2, #48	@ 0x30
 80089ec:	2a09      	cmp	r2, #9
 80089ee:	d903      	bls.n	80089f8 <_vfiprintf_r+0x1d0>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d0c8      	beq.n	8008986 <_vfiprintf_r+0x15e>
 80089f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80089f6:	e7c6      	b.n	8008986 <_vfiprintf_r+0x15e>
 80089f8:	4341      	muls	r1, r0
 80089fa:	002e      	movs	r6, r5
 80089fc:	2301      	movs	r3, #1
 80089fe:	1889      	adds	r1, r1, r2
 8008a00:	e7f1      	b.n	80089e6 <_vfiprintf_r+0x1be>
 8008a02:	aa07      	add	r2, sp, #28
 8008a04:	9200      	str	r2, [sp, #0]
 8008a06:	0021      	movs	r1, r4
 8008a08:	003a      	movs	r2, r7
 8008a0a:	4b14      	ldr	r3, [pc, #80]	@ (8008a5c <_vfiprintf_r+0x234>)
 8008a0c:	9803      	ldr	r0, [sp, #12]
 8008a0e:	f7fd fb43 	bl	8006098 <_printf_float>
 8008a12:	9004      	str	r0, [sp, #16]
 8008a14:	9b04      	ldr	r3, [sp, #16]
 8008a16:	3301      	adds	r3, #1
 8008a18:	d1d6      	bne.n	80089c8 <_vfiprintf_r+0x1a0>
 8008a1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a1c:	07db      	lsls	r3, r3, #31
 8008a1e:	d405      	bmi.n	8008a2c <_vfiprintf_r+0x204>
 8008a20:	89bb      	ldrh	r3, [r7, #12]
 8008a22:	059b      	lsls	r3, r3, #22
 8008a24:	d402      	bmi.n	8008a2c <_vfiprintf_r+0x204>
 8008a26:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008a28:	f7fe f8a8 	bl	8006b7c <__retarget_lock_release_recursive>
 8008a2c:	89bb      	ldrh	r3, [r7, #12]
 8008a2e:	065b      	lsls	r3, r3, #25
 8008a30:	d500      	bpl.n	8008a34 <_vfiprintf_r+0x20c>
 8008a32:	e71e      	b.n	8008872 <_vfiprintf_r+0x4a>
 8008a34:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008a36:	e71e      	b.n	8008876 <_vfiprintf_r+0x4e>
 8008a38:	aa07      	add	r2, sp, #28
 8008a3a:	9200      	str	r2, [sp, #0]
 8008a3c:	0021      	movs	r1, r4
 8008a3e:	003a      	movs	r2, r7
 8008a40:	4b06      	ldr	r3, [pc, #24]	@ (8008a5c <_vfiprintf_r+0x234>)
 8008a42:	9803      	ldr	r0, [sp, #12]
 8008a44:	f7fd fdd6 	bl	80065f4 <_printf_i>
 8008a48:	e7e3      	b.n	8008a12 <_vfiprintf_r+0x1ea>
 8008a4a:	46c0      	nop			@ (mov r8, r8)
 8008a4c:	08009080 	.word	0x08009080
 8008a50:	08009086 	.word	0x08009086
 8008a54:	0800908a 	.word	0x0800908a
 8008a58:	08006099 	.word	0x08006099
 8008a5c:	08008805 	.word	0x08008805

08008a60 <__swbuf_r>:
 8008a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a62:	0006      	movs	r6, r0
 8008a64:	000d      	movs	r5, r1
 8008a66:	0014      	movs	r4, r2
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d004      	beq.n	8008a76 <__swbuf_r+0x16>
 8008a6c:	6a03      	ldr	r3, [r0, #32]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <__swbuf_r+0x16>
 8008a72:	f7fd ff5d 	bl	8006930 <__sinit>
 8008a76:	69a3      	ldr	r3, [r4, #24]
 8008a78:	60a3      	str	r3, [r4, #8]
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	071b      	lsls	r3, r3, #28
 8008a7e:	d502      	bpl.n	8008a86 <__swbuf_r+0x26>
 8008a80:	6923      	ldr	r3, [r4, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d109      	bne.n	8008a9a <__swbuf_r+0x3a>
 8008a86:	0021      	movs	r1, r4
 8008a88:	0030      	movs	r0, r6
 8008a8a:	f000 f82b 	bl	8008ae4 <__swsetup_r>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d003      	beq.n	8008a9a <__swbuf_r+0x3a>
 8008a92:	2501      	movs	r5, #1
 8008a94:	426d      	negs	r5, r5
 8008a96:	0028      	movs	r0, r5
 8008a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a9a:	6923      	ldr	r3, [r4, #16]
 8008a9c:	6820      	ldr	r0, [r4, #0]
 8008a9e:	b2ef      	uxtb	r7, r5
 8008aa0:	1ac0      	subs	r0, r0, r3
 8008aa2:	6963      	ldr	r3, [r4, #20]
 8008aa4:	b2ed      	uxtb	r5, r5
 8008aa6:	4283      	cmp	r3, r0
 8008aa8:	dc05      	bgt.n	8008ab6 <__swbuf_r+0x56>
 8008aaa:	0021      	movs	r1, r4
 8008aac:	0030      	movs	r0, r6
 8008aae:	f7ff fd81 	bl	80085b4 <_fflush_r>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d1ed      	bne.n	8008a92 <__swbuf_r+0x32>
 8008ab6:	68a3      	ldr	r3, [r4, #8]
 8008ab8:	3001      	adds	r0, #1
 8008aba:	3b01      	subs	r3, #1
 8008abc:	60a3      	str	r3, [r4, #8]
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	6022      	str	r2, [r4, #0]
 8008ac4:	701f      	strb	r7, [r3, #0]
 8008ac6:	6963      	ldr	r3, [r4, #20]
 8008ac8:	4283      	cmp	r3, r0
 8008aca:	d004      	beq.n	8008ad6 <__swbuf_r+0x76>
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	07db      	lsls	r3, r3, #31
 8008ad0:	d5e1      	bpl.n	8008a96 <__swbuf_r+0x36>
 8008ad2:	2d0a      	cmp	r5, #10
 8008ad4:	d1df      	bne.n	8008a96 <__swbuf_r+0x36>
 8008ad6:	0021      	movs	r1, r4
 8008ad8:	0030      	movs	r0, r6
 8008ada:	f7ff fd6b 	bl	80085b4 <_fflush_r>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d0d9      	beq.n	8008a96 <__swbuf_r+0x36>
 8008ae2:	e7d6      	b.n	8008a92 <__swbuf_r+0x32>

08008ae4 <__swsetup_r>:
 8008ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8008b9c <__swsetup_r+0xb8>)
 8008ae6:	b570      	push	{r4, r5, r6, lr}
 8008ae8:	0005      	movs	r5, r0
 8008aea:	6818      	ldr	r0, [r3, #0]
 8008aec:	000c      	movs	r4, r1
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d004      	beq.n	8008afc <__swsetup_r+0x18>
 8008af2:	6a03      	ldr	r3, [r0, #32]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <__swsetup_r+0x18>
 8008af8:	f7fd ff1a 	bl	8006930 <__sinit>
 8008afc:	230c      	movs	r3, #12
 8008afe:	5ee2      	ldrsh	r2, [r4, r3]
 8008b00:	0713      	lsls	r3, r2, #28
 8008b02:	d423      	bmi.n	8008b4c <__swsetup_r+0x68>
 8008b04:	06d3      	lsls	r3, r2, #27
 8008b06:	d407      	bmi.n	8008b18 <__swsetup_r+0x34>
 8008b08:	2309      	movs	r3, #9
 8008b0a:	602b      	str	r3, [r5, #0]
 8008b0c:	2340      	movs	r3, #64	@ 0x40
 8008b0e:	2001      	movs	r0, #1
 8008b10:	4313      	orrs	r3, r2
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	4240      	negs	r0, r0
 8008b16:	e03a      	b.n	8008b8e <__swsetup_r+0xaa>
 8008b18:	0752      	lsls	r2, r2, #29
 8008b1a:	d513      	bpl.n	8008b44 <__swsetup_r+0x60>
 8008b1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b1e:	2900      	cmp	r1, #0
 8008b20:	d008      	beq.n	8008b34 <__swsetup_r+0x50>
 8008b22:	0023      	movs	r3, r4
 8008b24:	3344      	adds	r3, #68	@ 0x44
 8008b26:	4299      	cmp	r1, r3
 8008b28:	d002      	beq.n	8008b30 <__swsetup_r+0x4c>
 8008b2a:	0028      	movs	r0, r5
 8008b2c:	f7fe feb4 	bl	8007898 <_free_r>
 8008b30:	2300      	movs	r3, #0
 8008b32:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b34:	2224      	movs	r2, #36	@ 0x24
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	4393      	bics	r3, r2
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	6063      	str	r3, [r4, #4]
 8008b40:	6923      	ldr	r3, [r4, #16]
 8008b42:	6023      	str	r3, [r4, #0]
 8008b44:	2308      	movs	r3, #8
 8008b46:	89a2      	ldrh	r2, [r4, #12]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10b      	bne.n	8008b6a <__swsetup_r+0x86>
 8008b52:	21a0      	movs	r1, #160	@ 0xa0
 8008b54:	2280      	movs	r2, #128	@ 0x80
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	0089      	lsls	r1, r1, #2
 8008b5a:	0092      	lsls	r2, r2, #2
 8008b5c:	400b      	ands	r3, r1
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d003      	beq.n	8008b6a <__swsetup_r+0x86>
 8008b62:	0021      	movs	r1, r4
 8008b64:	0028      	movs	r0, r5
 8008b66:	f000 f88f 	bl	8008c88 <__smakebuf_r>
 8008b6a:	230c      	movs	r3, #12
 8008b6c:	5ee2      	ldrsh	r2, [r4, r3]
 8008b6e:	2101      	movs	r1, #1
 8008b70:	0013      	movs	r3, r2
 8008b72:	400b      	ands	r3, r1
 8008b74:	420a      	tst	r2, r1
 8008b76:	d00b      	beq.n	8008b90 <__swsetup_r+0xac>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60a3      	str	r3, [r4, #8]
 8008b7c:	6963      	ldr	r3, [r4, #20]
 8008b7e:	425b      	negs	r3, r3
 8008b80:	61a3      	str	r3, [r4, #24]
 8008b82:	2000      	movs	r0, #0
 8008b84:	6923      	ldr	r3, [r4, #16]
 8008b86:	4283      	cmp	r3, r0
 8008b88:	d101      	bne.n	8008b8e <__swsetup_r+0xaa>
 8008b8a:	0613      	lsls	r3, r2, #24
 8008b8c:	d4be      	bmi.n	8008b0c <__swsetup_r+0x28>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	0791      	lsls	r1, r2, #30
 8008b92:	d400      	bmi.n	8008b96 <__swsetup_r+0xb2>
 8008b94:	6963      	ldr	r3, [r4, #20]
 8008b96:	60a3      	str	r3, [r4, #8]
 8008b98:	e7f3      	b.n	8008b82 <__swsetup_r+0x9e>
 8008b9a:	46c0      	nop			@ (mov r8, r8)
 8008b9c:	20000018 	.word	0x20000018

08008ba0 <_raise_r>:
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	0004      	movs	r4, r0
 8008ba4:	000d      	movs	r5, r1
 8008ba6:	291f      	cmp	r1, #31
 8008ba8:	d904      	bls.n	8008bb4 <_raise_r+0x14>
 8008baa:	2316      	movs	r3, #22
 8008bac:	6003      	str	r3, [r0, #0]
 8008bae:	2001      	movs	r0, #1
 8008bb0:	4240      	negs	r0, r0
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}
 8008bb4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d004      	beq.n	8008bc4 <_raise_r+0x24>
 8008bba:	008a      	lsls	r2, r1, #2
 8008bbc:	189b      	adds	r3, r3, r2
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	2a00      	cmp	r2, #0
 8008bc2:	d108      	bne.n	8008bd6 <_raise_r+0x36>
 8008bc4:	0020      	movs	r0, r4
 8008bc6:	f000 f831 	bl	8008c2c <_getpid_r>
 8008bca:	002a      	movs	r2, r5
 8008bcc:	0001      	movs	r1, r0
 8008bce:	0020      	movs	r0, r4
 8008bd0:	f000 f81a 	bl	8008c08 <_kill_r>
 8008bd4:	e7ed      	b.n	8008bb2 <_raise_r+0x12>
 8008bd6:	2a01      	cmp	r2, #1
 8008bd8:	d009      	beq.n	8008bee <_raise_r+0x4e>
 8008bda:	1c51      	adds	r1, r2, #1
 8008bdc:	d103      	bne.n	8008be6 <_raise_r+0x46>
 8008bde:	2316      	movs	r3, #22
 8008be0:	6003      	str	r3, [r0, #0]
 8008be2:	2001      	movs	r0, #1
 8008be4:	e7e5      	b.n	8008bb2 <_raise_r+0x12>
 8008be6:	2100      	movs	r1, #0
 8008be8:	0028      	movs	r0, r5
 8008bea:	6019      	str	r1, [r3, #0]
 8008bec:	4790      	blx	r2
 8008bee:	2000      	movs	r0, #0
 8008bf0:	e7df      	b.n	8008bb2 <_raise_r+0x12>
	...

08008bf4 <raise>:
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	4b03      	ldr	r3, [pc, #12]	@ (8008c04 <raise+0x10>)
 8008bf8:	0001      	movs	r1, r0
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	f7ff ffd0 	bl	8008ba0 <_raise_r>
 8008c00:	bd10      	pop	{r4, pc}
 8008c02:	46c0      	nop			@ (mov r8, r8)
 8008c04:	20000018 	.word	0x20000018

08008c08 <_kill_r>:
 8008c08:	2300      	movs	r3, #0
 8008c0a:	b570      	push	{r4, r5, r6, lr}
 8008c0c:	4d06      	ldr	r5, [pc, #24]	@ (8008c28 <_kill_r+0x20>)
 8008c0e:	0004      	movs	r4, r0
 8008c10:	0008      	movs	r0, r1
 8008c12:	0011      	movs	r1, r2
 8008c14:	602b      	str	r3, [r5, #0]
 8008c16:	f7fa fe2c 	bl	8003872 <_kill>
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	d103      	bne.n	8008c26 <_kill_r+0x1e>
 8008c1e:	682b      	ldr	r3, [r5, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d000      	beq.n	8008c26 <_kill_r+0x1e>
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	20000544 	.word	0x20000544

08008c2c <_getpid_r>:
 8008c2c:	b510      	push	{r4, lr}
 8008c2e:	f7fa fe1a 	bl	8003866 <_getpid>
 8008c32:	bd10      	pop	{r4, pc}

08008c34 <__swhatbuf_r>:
 8008c34:	b570      	push	{r4, r5, r6, lr}
 8008c36:	000e      	movs	r6, r1
 8008c38:	001d      	movs	r5, r3
 8008c3a:	230e      	movs	r3, #14
 8008c3c:	5ec9      	ldrsh	r1, [r1, r3]
 8008c3e:	0014      	movs	r4, r2
 8008c40:	b096      	sub	sp, #88	@ 0x58
 8008c42:	2900      	cmp	r1, #0
 8008c44:	da0c      	bge.n	8008c60 <__swhatbuf_r+0x2c>
 8008c46:	89b2      	ldrh	r2, [r6, #12]
 8008c48:	2380      	movs	r3, #128	@ 0x80
 8008c4a:	0011      	movs	r1, r2
 8008c4c:	4019      	ands	r1, r3
 8008c4e:	421a      	tst	r2, r3
 8008c50:	d114      	bne.n	8008c7c <__swhatbuf_r+0x48>
 8008c52:	2380      	movs	r3, #128	@ 0x80
 8008c54:	00db      	lsls	r3, r3, #3
 8008c56:	2000      	movs	r0, #0
 8008c58:	6029      	str	r1, [r5, #0]
 8008c5a:	6023      	str	r3, [r4, #0]
 8008c5c:	b016      	add	sp, #88	@ 0x58
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	466a      	mov	r2, sp
 8008c62:	f000 f853 	bl	8008d0c <_fstat_r>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	dbed      	blt.n	8008c46 <__swhatbuf_r+0x12>
 8008c6a:	23f0      	movs	r3, #240	@ 0xf0
 8008c6c:	9901      	ldr	r1, [sp, #4]
 8008c6e:	021b      	lsls	r3, r3, #8
 8008c70:	4019      	ands	r1, r3
 8008c72:	4b04      	ldr	r3, [pc, #16]	@ (8008c84 <__swhatbuf_r+0x50>)
 8008c74:	18c9      	adds	r1, r1, r3
 8008c76:	424b      	negs	r3, r1
 8008c78:	4159      	adcs	r1, r3
 8008c7a:	e7ea      	b.n	8008c52 <__swhatbuf_r+0x1e>
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	2340      	movs	r3, #64	@ 0x40
 8008c80:	e7e9      	b.n	8008c56 <__swhatbuf_r+0x22>
 8008c82:	46c0      	nop			@ (mov r8, r8)
 8008c84:	ffffe000 	.word	0xffffe000

08008c88 <__smakebuf_r>:
 8008c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c8a:	2602      	movs	r6, #2
 8008c8c:	898b      	ldrh	r3, [r1, #12]
 8008c8e:	0005      	movs	r5, r0
 8008c90:	000c      	movs	r4, r1
 8008c92:	b085      	sub	sp, #20
 8008c94:	4233      	tst	r3, r6
 8008c96:	d007      	beq.n	8008ca8 <__smakebuf_r+0x20>
 8008c98:	0023      	movs	r3, r4
 8008c9a:	3347      	adds	r3, #71	@ 0x47
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	6123      	str	r3, [r4, #16]
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	6163      	str	r3, [r4, #20]
 8008ca4:	b005      	add	sp, #20
 8008ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ca8:	ab03      	add	r3, sp, #12
 8008caa:	aa02      	add	r2, sp, #8
 8008cac:	f7ff ffc2 	bl	8008c34 <__swhatbuf_r>
 8008cb0:	9f02      	ldr	r7, [sp, #8]
 8008cb2:	9001      	str	r0, [sp, #4]
 8008cb4:	0039      	movs	r1, r7
 8008cb6:	0028      	movs	r0, r5
 8008cb8:	f7fe fe64 	bl	8007984 <_malloc_r>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	d108      	bne.n	8008cd2 <__smakebuf_r+0x4a>
 8008cc0:	220c      	movs	r2, #12
 8008cc2:	5ea3      	ldrsh	r3, [r4, r2]
 8008cc4:	059a      	lsls	r2, r3, #22
 8008cc6:	d4ed      	bmi.n	8008ca4 <__smakebuf_r+0x1c>
 8008cc8:	2203      	movs	r2, #3
 8008cca:	4393      	bics	r3, r2
 8008ccc:	431e      	orrs	r6, r3
 8008cce:	81a6      	strh	r6, [r4, #12]
 8008cd0:	e7e2      	b.n	8008c98 <__smakebuf_r+0x10>
 8008cd2:	2380      	movs	r3, #128	@ 0x80
 8008cd4:	89a2      	ldrh	r2, [r4, #12]
 8008cd6:	6020      	str	r0, [r4, #0]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	81a3      	strh	r3, [r4, #12]
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	6120      	str	r0, [r4, #16]
 8008ce0:	6167      	str	r7, [r4, #20]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00c      	beq.n	8008d00 <__smakebuf_r+0x78>
 8008ce6:	0028      	movs	r0, r5
 8008ce8:	230e      	movs	r3, #14
 8008cea:	5ee1      	ldrsh	r1, [r4, r3]
 8008cec:	f000 f820 	bl	8008d30 <_isatty_r>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d005      	beq.n	8008d00 <__smakebuf_r+0x78>
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	89a2      	ldrh	r2, [r4, #12]
 8008cf8:	439a      	bics	r2, r3
 8008cfa:	3b02      	subs	r3, #2
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	9a01      	ldr	r2, [sp, #4]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	81a3      	strh	r3, [r4, #12]
 8008d08:	e7cc      	b.n	8008ca4 <__smakebuf_r+0x1c>
	...

08008d0c <_fstat_r>:
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	b570      	push	{r4, r5, r6, lr}
 8008d10:	4d06      	ldr	r5, [pc, #24]	@ (8008d2c <_fstat_r+0x20>)
 8008d12:	0004      	movs	r4, r0
 8008d14:	0008      	movs	r0, r1
 8008d16:	0011      	movs	r1, r2
 8008d18:	602b      	str	r3, [r5, #0]
 8008d1a:	f7fa fe0a 	bl	8003932 <_fstat>
 8008d1e:	1c43      	adds	r3, r0, #1
 8008d20:	d103      	bne.n	8008d2a <_fstat_r+0x1e>
 8008d22:	682b      	ldr	r3, [r5, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d000      	beq.n	8008d2a <_fstat_r+0x1e>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd70      	pop	{r4, r5, r6, pc}
 8008d2c:	20000544 	.word	0x20000544

08008d30 <_isatty_r>:
 8008d30:	2300      	movs	r3, #0
 8008d32:	b570      	push	{r4, r5, r6, lr}
 8008d34:	4d06      	ldr	r5, [pc, #24]	@ (8008d50 <_isatty_r+0x20>)
 8008d36:	0004      	movs	r4, r0
 8008d38:	0008      	movs	r0, r1
 8008d3a:	602b      	str	r3, [r5, #0]
 8008d3c:	f7fa fe07 	bl	800394e <_isatty>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d103      	bne.n	8008d4c <_isatty_r+0x1c>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d000      	beq.n	8008d4c <_isatty_r+0x1c>
 8008d4a:	6023      	str	r3, [r4, #0]
 8008d4c:	bd70      	pop	{r4, r5, r6, pc}
 8008d4e:	46c0      	nop			@ (mov r8, r8)
 8008d50:	20000544 	.word	0x20000544

08008d54 <_init>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	46c0      	nop			@ (mov r8, r8)
 8008d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5a:	bc08      	pop	{r3}
 8008d5c:	469e      	mov	lr, r3
 8008d5e:	4770      	bx	lr

08008d60 <_fini>:
 8008d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d62:	46c0      	nop			@ (mov r8, r8)
 8008d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d66:	bc08      	pop	{r3}
 8008d68:	469e      	mov	lr, r3
 8008d6a:	4770      	bx	lr
